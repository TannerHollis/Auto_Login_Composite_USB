
Auto_Login_Composite_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a0  080042a0  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a8  080042a8  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080042b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000040  080042f0  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080042f0  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000354cc  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9c  00000000  00000000  0005553c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  000590d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  000599b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002260a  00000000  00000000  0005a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e249  00000000  00000000  0007c7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3f06  00000000  00000000  0008a9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e8f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002050  00000000  00000000  0014e944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004104 	.word	0x08004104

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08004104 	.word	0x08004104

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <console_if_open>:
    .App = &console_app,
    .Base.AltCount = 1,
}, *const console_if = &_console_if;

static void console_if_open(void* itf, USBD_CDC_LineCodingType * lc)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
#if (STDOUT_BUFFER_SIZE > 0)
    console_if_IN.head = console_if_IN.tail = 0;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <console_if_open+0x24>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	805a      	strh	r2, [r3, #2]
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <console_if_open+0x24>)
 80004d2:	885a      	ldrh	r2, [r3, #2]
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <console_if_open+0x24>)
 80004d6:	801a      	strh	r2, [r3, #0]
#endif
#if (STDIN_BUFFER_SIZE > 0)
    console_if_OUT.head = console_if_OUT.tail = 0;
    console_if_recv();
#endif
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	2000005c 	.word	0x2000005c

080004e8 <console_if_in_cmplt>:

#if (STDOUT_BUFFER_SIZE > 0)
static void console_if_in_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	4613      	mov	r3, r2
 80004f4:	80fb      	strh	r3, [r7, #6]
    if (console_if_IN.tail < console_in_size)
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <console_if_in_cmplt+0x40>)
 80004f8:	885b      	ldrh	r3, [r3, #2]
 80004fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004fe:	4293      	cmp	r3, r2
 8000500:	d207      	bcs.n	8000512 <console_if_in_cmplt+0x2a>
        console_if_IN.tail += length;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <console_if_in_cmplt+0x40>)
 8000504:	885a      	ldrh	r2, [r3, #2]
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	4413      	add	r3, r2
 800050a:	b29a      	uxth	r2, r3
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <console_if_in_cmplt+0x40>)
 800050e:	805a      	strh	r2, [r3, #2]
 8000510:	e004      	b.n	800051c <console_if_in_cmplt+0x34>
    else
        console_if_IN.tail = length - 1;
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	3b01      	subs	r3, #1
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <console_if_in_cmplt+0x40>)
 800051a:	805a      	strh	r2, [r3, #2]
    console_if_send();
 800051c:	f000 f806 	bl	800052c <console_if_send>
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000005c 	.word	0x2000005c

0800052c <console_if_send>:

static void console_if_send(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <console_if_send+0x6c>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	807b      	strh	r3, [r7, #2]
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <console_if_send+0x6c>)
 800053a:	885b      	ldrh	r3, [r3, #2]
 800053c:	803b      	strh	r3, [r7, #0]
    uint16_t start = tail + 1, length;
 800053e:	883b      	ldrh	r3, [r7, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	80fb      	strh	r3, [r7, #6]

    if (tail <= head)
 8000544:	883a      	ldrh	r2, [r7, #0]
 8000546:	887b      	ldrh	r3, [r7, #2]
 8000548:	429a      	cmp	r2, r3
 800054a:	d804      	bhi.n	8000556 <console_if_send+0x2a>
    {
        length = head - tail;
 800054c:	887a      	ldrh	r2, [r7, #2]
 800054e:	883b      	ldrh	r3, [r7, #0]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	80bb      	strh	r3, [r7, #4]
 8000554:	e00f      	b.n	8000576 <console_if_send+0x4a>
    }
    else if (tail < console_in_size)
 8000556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800055a:	883b      	ldrh	r3, [r7, #0]
 800055c:	4293      	cmp	r3, r2
 800055e:	d205      	bcs.n	800056c <console_if_send+0x40>
    {
        length = console_in_size - tail;
 8000560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000564:	883b      	ldrh	r3, [r7, #0]
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	80bb      	strh	r3, [r7, #4]
 800056a:	e004      	b.n	8000576 <console_if_send+0x4a>
    }
    else
    {
        length = head + 1;
 800056c:	887b      	ldrh	r3, [r7, #2]
 800056e:	3301      	adds	r3, #1
 8000570:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 8000576:	88bb      	ldrh	r3, [r7, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d008      	beq.n	800058e <console_if_send+0x62>
    {
        USBD_CDC_Transmit(console_if,
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <console_if_send+0x70>)
                &console_if_IN.buffer[start], length);
 800057e:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Transmit(console_if,
 8000580:	4a05      	ldr	r2, [pc, #20]	; (8000598 <console_if_send+0x6c>)
 8000582:	4413      	add	r3, r2
 8000584:	3304      	adds	r3, #4
 8000586:	88ba      	ldrh	r2, [r7, #4]
 8000588:	4619      	mov	r1, r3
 800058a:	f000 fa2a 	bl	80009e2 <USBD_CDC_Transmit>
    }
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000005c 	.word	0x2000005c
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_USB_OTG_FS_MspInit>:

#include <xpd_usb.h>
#include <usb_device.h>

void HAL_USB_OTG_FS_MspInit(void* handle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80005a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80005ba:	230a      	movs	r3, #10
 80005bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <HAL_USB_OTG_FS_MspInit+0x44>)
 80005c6:	f002 fe75 	bl	80032b4 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2043      	movs	r0, #67	; 0x43
 80005d0:	f002 fe2b 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80005d4:	2043      	movs	r0, #67	; 0x43
 80005d6:	f002 fe44 	bl	8003262 <HAL_NVIC_EnableIRQ>
}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000

080005e8 <HAL_USB_OTG_FS_MspDeInit>:

void HAL_USB_OTG_FS_MspDeInit(void* handle)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11 | GPIO_PIN_12);
 80005f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <HAL_USB_OTG_FS_MspDeInit+0x20>)
 80005f6:	f002 fff9 	bl	80035ec <HAL_GPIO_DeInit>

    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 80005fa:	2043      	movs	r0, #67	; 0x43
 80005fc:	f002 fe3f 	bl	800327e <HAL_NVIC_DisableIRQ>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020000 	.word	0x40020000

0800060c <HAL_USBD_Setup>:

void HAL_USBD_Setup(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
    USB_INST2HANDLE(UsbDevice, USB_OTG_FS);
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_USBD_Setup+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000618:	60da      	str	r2, [r3, #12]
    UsbDevice->Callbacks.DepInit = HAL_USB_OTG_FS_MspInit;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_USBD_Setup+0x28>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_USBD_Setup+0x2c>)
 8000620:	611a      	str	r2, [r3, #16]
    UsbDevice->Callbacks.DepDeinit = HAL_USB_OTG_FS_MspDeInit;
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_USBD_Setup+0x28>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <HAL_USBD_Setup+0x30>)
 8000628:	615a      	str	r2, [r3, #20]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	08004250 	.word	0x08004250
 8000638:	080005a1 	.word	0x080005a1
 800063c:	080005e9 	.word	0x080005e9

08000640 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void);

void OTG_FS_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    USB_vIRQHandler(UsbDevice);
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <OTG_FS_IRQHandler+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fa8b 	bl	8002b64 <USB_vDevIRQHandler>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	08004250 	.word	0x08004250

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f002 fc74 	bl	8002f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f80a 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f886 	bl	8000774 <MX_GPIO_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000668:	f000 f870 	bl	800074c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  //HAL_PWREx_EnableVddUSB();
  HAL_USBD_Setup();
 800066c:	f7ff ffce 	bl	800060c <HAL_USBD_Setup>
  UsbDevice_Init();
 8000670:	f000 f960 	bl	8000934 <UsbDevice_Init>

  /* USER CODE END 2 */
  //USBD_HID_ReportIn(&keyboard_if, &kbHID, sizeof(kbHID));
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x1c>
	...

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fd34 	bl	80040f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006ec:	2360      	movs	r3, #96	; 0x60
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 f889 	bl	8003814 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 f89c 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2103      	movs	r1, #3
 800072a:	4618      	mov	r0, r3
 800072c:	f003 faea 	bl	8003d04 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 f885 	bl	8000844 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2009      	movs	r0, #9
 8000756:	f002 fd68 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800075a:	2009      	movs	r0, #9
 800075c:	f002 fd81 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	200a      	movs	r0, #10
 8000766:	f002 fd60 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800076a:	200a      	movs	r0, #10
 800076c:	f002 fd79 	bl	8003262 <HAL_NVIC_EnableIRQ>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0x8c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_GPIO_Init+0x8c>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0x8c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_GPIO_Init+0x8c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <MX_GPIO_Init+0x8c>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_GPIO_Init+0x8c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_GPIO_Init+0x8c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <MX_GPIO_Init+0x8c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_GPIO_Init+0x8c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : K1_Pin K0_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K0_Pin;
 80007de:	2318      	movs	r3, #24
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_GPIO_Init+0x90>)
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_GPIO_Init+0x94>)
 80007f2:	f002 fd5f 	bl	80032b4 <HAL_GPIO_Init>

}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	10210000 	.word	0x10210000
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == K1_Pin){
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	2b08      	cmp	r3, #8
 800081a:	d10a      	bne.n	8000832 <HAL_GPIO_EXTI_Callback+0x26>
		kbHID.MODIFIER = 0x00;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <HAL_GPIO_EXTI_Callback+0x30>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
		kbHID.KEYCODE1 = 0x04;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_GPIO_EXTI_Callback+0x30>)
 8000824:	2204      	movs	r2, #4
 8000826:	709a      	strb	r2, [r3, #2]
		USBD_HID_ReportIn(&keyboard_if, &kbHID, sizeof(kbHID));
 8000828:	2208      	movs	r2, #8
 800082a:	4904      	ldr	r1, [pc, #16]	; (800083c <HAL_GPIO_EXTI_Callback+0x30>)
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <HAL_GPIO_EXTI_Callback+0x34>)
 800082e:	f000 fb59 	bl	8000ee4 <USBD_HID_ReportIn>
		//USBD_HID_ReportIn(&keyboard_if, &kbHID, sizeof(kbHID));
	}
	else if (GPIO_Pin == K0_Pin){

	}
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000264 	.word	0x20000264
 8000840:	08004220 	.word	0x08004220

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f002 fb7e 	bl	8002fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80008f8:	2008      	movs	r0, #8
 80008fa:	f002 ff73 	bl	80037e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000906:	2010      	movs	r0, #16
 8000908:	f002 ff6c 	bl	80037e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <UsbDevice_Init>:
extern USBD_CDC_IfHandleType *const console_if;

extern USBD_HID_IfHandleType *const keyboard_if;

void UsbDevice_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    /* All fields of Config have to be properly set up */
    console_if->Config.InEpNum  = 0x81;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <UsbDevice_Init+0x4c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2281      	movs	r2, #129	; 0x81
 800093e:	749a      	strb	r2, [r3, #18]
    console_if->Config.OutEpNum = 0x01;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <UsbDevice_Init+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	745a      	strb	r2, [r3, #17]
    console_if->Config.NotEpNum = 0x82;
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <UsbDevice_Init+0x4c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2282      	movs	r2, #130	; 0x82
 800094e:	74da      	strb	r2, [r3, #19]

    /* All fields of hid_if have to be properly set up */
    keyboard_if->Config.InEpNum = 0x83;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <UsbDevice_Init+0x50>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2283      	movs	r2, #131	; 0x83
 8000956:	741a      	strb	r2, [r3, #16]

    /* Mount the interfaces to the device */
    //USBD_CDC_MountInterface(console_if, UsbDevice);
    USBD_HID_MountInterface(keyboard_if, UsbDevice);
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <UsbDevice_Init+0x50>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <UsbDevice_Init+0x54>)
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fa71 	bl	8000e48 <USBD_HID_MountInterface>

    /* Initialize the device */
    USBD_Init(UsbDevice, dev_cfg);
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <UsbDevice_Init+0x54>)
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <UsbDevice_Init+0x58>)
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 faed 	bl	8000f4c <USBD_Init>

    /* The device connection can be made */
    USBD_Connect(UsbDevice);
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <UsbDevice_Init+0x54>)
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fb1b 	bl	8000fb0 <USBD_Connect>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	080041a8 	.word	0x080041a8
 8000984:	08004220 	.word	0x08004220
 8000988:	2000026c 	.word	0x2000026c
 800098c:	08004234 	.word	0x08004234

08000990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000996:	490e      	ldr	r1, [pc, #56]	; (80009d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009ac:	4c0b      	ldr	r4, [pc, #44]	; (80009dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ba:	f7ff ffa9 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009be:	f003 fb75 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c2:	f7ff fe49 	bl	8000658 <main>
  bx  lr    
 80009c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80009d4:	080042b0 	.word	0x080042b0
  ldr r2, =_sbss
 80009d8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80009dc:	2000046c 	.word	0x2000046c

080009e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>

080009e2 <USBD_CDC_Transmit>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Transmit(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	4613      	mov	r3, r2
 80009ee:	80fb      	strh	r3, [r7, #6]
    return USBD_EpSend(itf->Base.Device, itf->Config.InEpNum, data, length);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	7c99      	ldrb	r1, [r3, #18]
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f000 ff4c 	bl	8001898 <USBD_EpSend>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <USBD_EpAddr2Ref>:
 * @return The endpoint's reference
 */
static inline
USBD_EpHandleType* USBD_EpAddr2Ref      (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8000a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da08      	bge.n	8000a30 <USBD_EpAddr2Ref+0x26>
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	f003 030f 	and.w	r3, r3, #15
 8000a24:	011b      	lsls	r3, r3, #4
 8000a26:	3338      	adds	r3, #56	; 0x38
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	e006      	b.n	8000a3e <USBD_EpAddr2Ref+0x34>
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	3306      	adds	r3, #6
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	3338      	adds	r3, #56	; 0x38
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	3304      	adds	r3, #4
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <USBD_EpOpen>:
 */
static inline void USBD_EpOpen          (USBD_HandleType *dev,
                                         uint8_t epAddr,
                                         USB_EndPointType type,
                                         uint16_t mps)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	4608      	mov	r0, r1
 8000a54:	4611      	mov	r1, r2
 8000a56:	461a      	mov	r2, r3
 8000a58:	4603      	mov	r3, r0
 8000a5a:	70fb      	strb	r3, [r7, #3]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70bb      	strb	r3, [r7, #2]
 8000a60:	4613      	mov	r3, r2
 8000a62:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 8000a64:	883b      	ldrh	r3, [r7, #0]
 8000a66:	78ba      	ldrb	r2, [r7, #2]
 8000a68:	78f9      	ldrb	r1, [r7, #3]
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f001 feb4 	bl	80027d8 <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 8000a70:	78fb      	ldrb	r3, [r7, #3]
 8000a72:	4619      	mov	r1, r3
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ffc8 	bl	8000a0a <USBD_EpAddr2Ref>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	72da      	strb	r2, [r3, #11]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <USBD_EpClose>:
 * @param dev: USB Device handle reference
 * @param epAddr: endpoint address
 */
static inline void USBD_EpClose         (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	4619      	mov	r1, r3
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f001 ff33 	bl	8002904 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffb1 	bl	8000a0a <USBD_EpAddr2Ref>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2200      	movs	r2, #0
 8000aac:	72da      	strb	r2, [r3, #11]
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <hid_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t hid_getDesc(USBD_HID_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	72fb      	strb	r3, [r7, #11]
    USBD_HandleType *dev = itf->Base.Device;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	61fb      	str	r3, [r7, #28]
    USBD_HID_DescType *desc = (USBD_HID_DescType*)dest;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	61bb      	str	r3, [r7, #24]
    uint16_t len = sizeof(hid_desc);
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	82fb      	strh	r3, [r7, #22]

    memcpy(dest, &hid_desc, sizeof(hid_desc));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <hid_getDesc+0x88>)
 8000ad8:	461d      	mov	r5, r3
 8000ada:	4614      	mov	r4, r2
 8000adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ade:	6028      	str	r0, [r5, #0]
 8000ae0:	6069      	str	r1, [r5, #4]
 8000ae2:	60aa      	str	r2, [r5, #8]
 8000ae4:	60eb      	str	r3, [r5, #12]
 8000ae6:	8823      	ldrh	r3, [r4, #0]
 8000ae8:	822b      	strh	r3, [r5, #16]

    /* Set report size */
    desc->HIDCD.sHIDD[0].wItemLength = HID_APP(itf)->Report->DescLength;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	889a      	ldrh	r2, [r3, #4]
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	821a      	strh	r2, [r3, #16]

#if (USBD_MAX_IF_COUNT > 1)
    /* Adjustment of interface indexes */
    desc->HID.bInterfaceNumber = ifNum;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	7afa      	ldrb	r2, [r7, #11]
 8000afa:	709a      	strb	r2, [r3, #2]

    desc->HID.iInterface = USBD_IIF_INDEX(ifNum, 0);
 8000afc:	7afb      	ldrb	r3, [r7, #11]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	721a      	strb	r2, [r3, #8]

#endif /* (USBD_MAX_IF_COUNT > 1) */

    /* Add endpoints */
    len += USBD_EpDesc(dev, itf->Config.InEpNum, &dest[len]);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	7c19      	ldrb	r1, [r3, #16]
 8000b0a:	8afb      	ldrh	r3, [r7, #22]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	461a      	mov	r2, r3
 8000b12:	69f8      	ldr	r0, [r7, #28]
 8000b14:	f000 fe50 	bl	80017b8 <USBD_EpDesc>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	8afb      	ldrh	r3, [r7, #22]
 8000b1e:	4413      	add	r3, r2
 8000b20:	82fb      	strh	r3, [r7, #22]
        dest[len - 1] = USBD_EpHsInterval(HID_APP(itf)->Report->Input.Interval_ms);
    }
    else
#endif /* (USBD_HS_SUPPORT == 1) */
    {
        dest[len - 1] = HID_APP(itf)->Report->Input.Interval_ms;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	8afb      	ldrh	r3, [r7, #22]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	440b      	add	r3, r1
 8000b30:	7a12      	ldrb	r2, [r2, #8]
 8000b32:	701a      	strb	r2, [r3, #0]
            dest[len - 1] = HID_APP(itf)->Report->Output.Interval_ms;
        }
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    return len;
 8000b34:	8afb      	ldrh	r3, [r7, #22]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08004254 	.word	0x08004254

08000b44 <hid_getString>:
 * @param itf: reference of the HID interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* hid_getString(USBD_HID_IfHandleType *itf, uint8_t intNum)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
        }
    }
    else
#endif /* USBD_HID_REPORT_STRINGS */
    {
        return itf->App->Name;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
    }
#endif /* USBD_HID_ALTSETTINGS */
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <hid_init>:
 *        resetting the internal variables
 *        and initializing the attached application.
 * @param itf: reference of the HID interface
 */
static void hid_init(USBD_HID_IfHandleType *itf)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
        mpsLimit = USB_EP_INTR_HS_MPS;
    }
    else
#endif
    {
        mpsLimit = USB_EP_INTR_FS_MPS;
 8000b70:	2340      	movs	r3, #64	; 0x40
 8000b72:	81fb      	strh	r3, [r7, #14]
    }
    mps = HID_APP(itf)->Report->Input.MaxSize;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	895b      	ldrh	r3, [r3, #10]
 8000b7c:	82fb      	strh	r3, [r7, #22]
    if (mps > mpsLimit)
 8000b7e:	8afa      	ldrh	r2, [r7, #22]
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d901      	bls.n	8000b8a <hid_init+0x28>
    {
        mps = mpsLimit;
 8000b86:	89fb      	ldrh	r3, [r7, #14]
 8000b88:	82fb      	strh	r3, [r7, #22]
    }
    USBD_EpOpen(dev, itf->Config.InEpNum, USB_EP_TYPE_INTERRUPT, mps);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7c19      	ldrb	r1, [r3, #16]
 8000b8e:	8afb      	ldrh	r3, [r7, #22]
 8000b90:	2203      	movs	r2, #3
 8000b92:	6938      	ldr	r0, [r7, #16]
 8000b94:	f7ff ff59 	bl	8000a4a <USBD_EpOpen>
        USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_INTERRUPT, mps);
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    /* Initialize state */
    itf->Request = 0;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	749a      	strb	r2, [r3, #18]
    itf->IdleRate = HID_APP(itf)->Report->Input.Interval_ms / 4;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	7a1b      	ldrb	r3, [r3, #8]
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	745a      	strb	r2, [r3, #17]

    /* Initialize application */
    USBD_SAFE_CALLBACK(HID_APP(itf)->Init, itf);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d004      	beq.n	8000bc2 <hid_init+0x60>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	4798      	blx	r3
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <hid_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the HID interface
 */
static void hid_deinit(USBD_HID_IfHandleType *itf)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]

    /* Close EPs */
    USBD_EpClose(dev, itf->Config.InEpNum);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7c1b      	ldrb	r3, [r3, #16]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff ff52 	bl	8000a88 <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    /* Deinitialize application */
    USBD_SAFE_CALLBACK(HID_APP(itf)->Deinit, itf);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d004      	beq.n	8000bf8 <hid_deinit+0x2e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	4798      	blx	r3
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <hid_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the HID interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType hid_setupStage(USBD_HID_IfHandleType *itf)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	77fb      	strb	r3, [r7, #31]
    USBD_HandleType *dev = itf->Base.Device;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	617b      	str	r3, [r7, #20]

    switch (dev->Setup.RequestType.Type)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	791b      	ldrb	r3, [r3, #4]
 8000c16:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <hid_setupStage+0x26>
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d034      	beq.n	8000c8e <hid_setupStage+0x8e>
                    break;
            }
            break;
        }
        default:
            break;
 8000c24:	e0c2      	b.n	8000dac <hid_setupStage+0x1ac>
            if (dev->Setup.Request == USB_REQ_GET_DESCRIPTOR)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d12d      	bne.n	8000c8a <hid_setupStage+0x8a>
                switch (dev->Setup.Value >> 8)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	88db      	ldrh	r3, [r3, #6]
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	2b21      	cmp	r3, #33	; 0x21
 8000c38:	d002      	beq.n	8000c40 <hid_setupStage+0x40>
 8000c3a:	2b22      	cmp	r3, #34	; 0x22
 8000c3c:	d016      	beq.n	8000c6c <hid_setupStage+0x6c>
                        break;
 8000c3e:	e025      	b.n	8000c8c <hid_setupStage+0x8c>
                        void* data = dev->CtrlData;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	33fc      	adds	r3, #252	; 0xfc
 8000c44:	60fb      	str	r3, [r7, #12]
                        memcpy(dev->CtrlData, &hid_desc.HIDCD, sizeof(hid_desc.HIDCD));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 8000c4c:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <hid_setupStage+0x1b8>)
 8000c4e:	3309      	adds	r3, #9
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	6859      	ldr	r1, [r3, #4]
 8000c54:	6010      	str	r0, [r2, #0]
 8000c56:	6051      	str	r1, [r2, #4]
 8000c58:	7a1b      	ldrb	r3, [r3, #8]
 8000c5a:	7213      	strb	r3, [r2, #8]
                        retval = USBD_CtrlSendData(dev, data, sizeof(hid_desc.HIDCD));
 8000c5c:	2209      	movs	r2, #9
 8000c5e:	68f9      	ldr	r1, [r7, #12]
 8000c60:	6978      	ldr	r0, [r7, #20]
 8000c62:	f000 fb81 	bl	8001368 <USBD_CtrlSendData>
 8000c66:	4603      	mov	r3, r0
 8000c68:	77fb      	strb	r3, [r7, #31]
                        break;
 8000c6a:	e00f      	b.n	8000c8c <hid_setupStage+0x8c>
                                (void*)HID_APP(itf)->Report->Desc,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	6819      	ldr	r1, [r3, #0]
                                HID_APP(itf)->Report->DescLength);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	685b      	ldr	r3, [r3, #4]
                        retval = USBD_CtrlSendData(dev,
 8000c7a:	889b      	ldrh	r3, [r3, #4]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f000 fb72 	bl	8001368 <USBD_CtrlSendData>
 8000c84:	4603      	mov	r3, r0
 8000c86:	77fb      	strb	r3, [r7, #31]
                        break;
 8000c88:	e000      	b.n	8000c8c <hid_setupStage+0x8c>
            }
 8000c8a:	bf00      	nop
            break;
 8000c8c:	e08e      	b.n	8000dac <hid_setupStage+0x1ac>
            uint8_t reportId = (uint8_t)dev->Setup.Value;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	88db      	ldrh	r3, [r3, #6]
 8000c92:	74fb      	strb	r3, [r7, #19]
            USBD_HID_ReportType reportType = dev->Setup.Value >> 8;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	88db      	ldrh	r3, [r3, #6]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	74bb      	strb	r3, [r7, #18]
            switch (dev->Setup.Request)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	795b      	ldrb	r3, [r3, #5]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	2b09      	cmp	r3, #9
 8000ca6:	d87f      	bhi.n	8000da8 <hid_setupStage+0x1a8>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <hid_setupStage+0xb0>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000cd9 	.word	0x08000cd9
 8000cb4:	08000d41 	.word	0x08000d41
 8000cb8:	08000da9 	.word	0x08000da9
 8000cbc:	08000da9 	.word	0x08000da9
 8000cc0:	08000da9 	.word	0x08000da9
 8000cc4:	08000da9 	.word	0x08000da9
 8000cc8:	08000da9 	.word	0x08000da9
 8000ccc:	08000da9 	.word	0x08000da9
 8000cd0:	08000d11 	.word	0x08000d11
 8000cd4:	08000d5f 	.word	0x08000d5f
                    itf->Request = reportType;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7cba      	ldrb	r2, [r7, #18]
 8000cdc:	749a      	strb	r2, [r3, #18]
                    USBD_SAFE_CALLBACK(HID_APP(itf)->GetReport,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d008      	beq.n	8000cfa <hid_setupStage+0xfa>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	7c92      	ldrb	r2, [r2, #18]
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	7cfa      	ldrb	r2, [r7, #19]
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	4798      	blx	r3
                    if (itf->Request == 0)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7c9b      	ldrb	r3, [r3, #18]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <hid_setupStage+0x108>
                    {   retval = USBD_E_OK; }
 8000d04:	2300      	movs	r3, #0
 8000d06:	77fb      	strb	r3, [r7, #31]
                    itf->Request = 0;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	749a      	strb	r2, [r3, #18]
                    break;
 8000d0e:	e04c      	b.n	8000daa <hid_setupStage+0x1aa>
                    if (reportType == HID_REPORT_OUTPUT)
 8000d10:	7cbb      	ldrb	r3, [r7, #18]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d105      	bne.n	8000d22 <hid_setupStage+0x122>
                        max_len = HID_APP(itf)->Report->Output.MaxSize;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	8a1b      	ldrh	r3, [r3, #16]
 8000d1e:	83bb      	strh	r3, [r7, #28]
 8000d20:	e004      	b.n	8000d2c <hid_setupStage+0x12c>
                        max_len = HID_APP(itf)->Report->Feature.MaxSize;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	899b      	ldrh	r3, [r3, #12]
 8000d2a:	83bb      	strh	r3, [r7, #28]
                    retval = USBD_CtrlReceiveData(dev, dev->CtrlData, max_len);
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	33fc      	adds	r3, #252	; 0xfc
 8000d30:	8bba      	ldrh	r2, [r7, #28]
 8000d32:	4619      	mov	r1, r3
 8000d34:	6978      	ldr	r0, [r7, #20]
 8000d36:	f000 fb45 	bl	80013c4 <USBD_CtrlReceiveData>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	77fb      	strb	r3, [r7, #31]
                    break;
 8000d3e:	e034      	b.n	8000daa <hid_setupStage+0x1aa>
                    dev->CtrlData[0] = itf->IdleRate;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7c5a      	ldrb	r2, [r3, #17]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                            dev->CtrlData, sizeof(itf->IdleRate));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	33fc      	adds	r3, #252	; 0xfc
                    retval = USBD_CtrlSendData(dev,
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4619      	mov	r1, r3
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f000 fb08 	bl	8001368 <USBD_CtrlSendData>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	77fb      	strb	r3, [r7, #31]
                    break;
 8000d5c:	e025      	b.n	8000daa <hid_setupStage+0x1aa>
                    uint16_t idleRate_ms = HID_IDLE_RATE_INDEFINITE;
 8000d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d62:	837b      	strh	r3, [r7, #26]
                    uint8_t idleRate = dev->Setup.Value >> 8;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	88db      	ldrh	r3, [r3, #6]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	747b      	strb	r3, [r7, #17]
                    if (reportId == 0)
 8000d6e:	7cfb      	ldrb	r3, [r7, #19]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <hid_setupStage+0x17a>
                    {   itf->IdleRate = idleRate; }
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7c7a      	ldrb	r2, [r7, #17]
 8000d78:	745a      	strb	r2, [r3, #17]
                    if (idleRate > 0)
 8000d7a:	7c7b      	ldrb	r3, [r7, #17]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <hid_setupStage+0x18a>
                    {   idleRate_ms = 4 * itf->IdleRate; }
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7c5b      	ldrb	r3, [r3, #17]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	837b      	strh	r3, [r7, #26]
                    USBD_SAFE_CALLBACK(HID_APP(itf)->SetIdle,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <hid_setupStage+0x1a2>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	7cfa      	ldrb	r2, [r7, #19]
 8000d9c:	8b79      	ldrh	r1, [r7, #26]
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	4798      	blx	r3
                    retval = USBD_E_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	77fb      	strb	r3, [r7, #31]
                    break;
 8000da6:	e000      	b.n	8000daa <hid_setupStage+0x1aa>
                    break;
 8000da8:	bf00      	nop
            break;
 8000daa:	bf00      	nop
    }
    return retval;
 8000dac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	08004254 	.word	0x08004254

08000dbc <hid_dataStage>:
/**
 * @brief Passes the received set report to the application.
 * @param itf: reference of the HID interface
 */
static void hid_dataStage(USBD_HID_IfHandleType *itf)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]

    if (dev->Setup.Request == HID_REQ_SET_REPORT)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	795b      	ldrb	r3, [r3, #5]
 8000dce:	2b09      	cmp	r3, #9
 8000dd0:	d11b      	bne.n	8000e0a <hid_dataStage+0x4e>
    {
        itf->Request = dev->Setup.Value >> 8;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	88db      	ldrh	r3, [r3, #6]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	749a      	strb	r2, [r3, #18]
        USBD_SAFE_CALLBACK(HID_APP(itf)->SetReport, itf, itf->Request,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00c      	beq.n	8000e04 <hid_dataStage+0x48>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	691c      	ldr	r4, [r3, #16]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7c9b      	ldrb	r3, [r3, #18]
 8000df4:	b2d9      	uxtb	r1, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	895b      	ldrh	r3, [r3, #10]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	47a0      	blx	r4
                dev->CtrlData, dev->Setup.Length);
        itf->Request = 0;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	749a      	strb	r2, [r3, #18]
    }
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd90      	pop	{r4, r7, pc}

08000e12 <hid_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the HID interface
 * @param ep: reference to the endpoint structure
 */
static void hid_inData(USBD_HID_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(HID_APP(itf)->InReportSent, itf,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00c      	beq.n	8000e40 <hid_inData+0x2e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	6811      	ldr	r1, [r2, #0]
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	8892      	ldrh	r2, [r2, #4]
 8000e34:	4252      	negs	r2, r2
 8000e36:	440a      	add	r2, r1
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	4798      	blx	r3
            *(ep->Transfer.Data - ep->Transfer.Length));
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <USBD_HID_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_HID_MountInterface(USBD_HID_IfHandleType *itf, USBD_HandleType *dev)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]

    if (dev->IfCount < USBD_MAX_IF_COUNT)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d83a      	bhi.n	8000ed6 <USBD_HID_MountInterface+0x8e>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &hid_cbks;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <USBD_HID_MountInterface+0x98>)
 8000e6a:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	721a      	strb	r2, [r3, #8]

        {
            USBD_EpHandleType *ep;

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7c1b      	ldrb	r3, [r3, #16]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6838      	ldr	r0, [r7, #0]
 8000e80:	f7ff fdc3 	bl	8000a0a <USBD_EpAddr2Ref>
 8000e84:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_INTERRUPT;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2203      	movs	r2, #3
 8000e8a:	729a      	strb	r2, [r3, #10]
            ep->IfNum           = dev->IfCount;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	731a      	strb	r2, [r3, #12]
            ep->MaxPacketSize   = HID_APP(itf)->Report->Input.MaxSize;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	895a      	ldrh	r2, [r3, #10]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	811a      	strh	r2, [r3, #8]
            if (ep->MaxPacketSize > HID_EP_MPS)
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	891b      	ldrh	r3, [r3, #8]
 8000ea6:	2b40      	cmp	r3, #64	; 0x40
 8000ea8:	d902      	bls.n	8000eb0 <USBD_HID_MountInterface+0x68>
            {
                ep->MaxPacketSize = HID_EP_MPS;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2240      	movs	r2, #64	; 0x40
 8000eae:	811a      	strh	r2, [r3, #8]
                }
            }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	330a      	adds	r3, #10
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	08004268 	.word	0x08004268

08000ee4 <USBD_HID_ReportIn>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_HID_ReportIn(USBD_HID_IfHandleType *itf, void *data, uint16_t length)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval;
    USBD_HandleType *dev = itf->Base.Device;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	61bb      	str	r3, [r7, #24]
    uint8_t reportId = (uint8_t)dev->Setup.Value;
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	88db      	ldrh	r3, [r3, #6]
 8000efc:	75fb      	strb	r3, [r7, #23]

    /* If the function is invoked in the EP0 GetReport() callback context,
     * and the report ID matches, use EP0 to transfer the report */
    if ((itf->Request != 0) &&
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	7c9b      	ldrb	r3, [r3, #18]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d013      	beq.n	8000f30 <USBD_HID_ReportIn+0x4c>
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d004      	beq.n	8000f18 <USBD_HID_ReportIn+0x34>
        ((reportId == 0) || (reportId == ((uint8_t*)data)[0])))
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	7dfa      	ldrb	r2, [r7, #23]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d10b      	bne.n	8000f30 <USBD_HID_ReportIn+0x4c>
    {
        retval = USBD_CtrlSendData(dev, data, length);
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	69b8      	ldr	r0, [r7, #24]
 8000f20:	f000 fa22 	bl	8001368 <USBD_CtrlSendData>
 8000f24:	4603      	mov	r3, r0
 8000f26:	77fb      	strb	r3, [r7, #31]
        itf->Request = 0;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	749a      	strb	r2, [r3, #18]
 8000f2e:	e008      	b.n	8000f42 <USBD_HID_ReportIn+0x5e>
    }
    else
    {
        retval = USBD_EpSend(dev, itf->Config.InEpNum, data, length);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	7c19      	ldrb	r1, [r3, #16]
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	69b8      	ldr	r0, [r7, #24]
 8000f3a:	f000 fcad 	bl	8001898 <USBD_EpSend>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	77fb      	strb	r3, [r7, #31]
    }
    return retval;
 8000f42:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <USBD_Init>:
 * @brief This function initializes the USB device.
 * @param dev: USB Device handle reference
 * @param desc: Device properties reference
 */
void USBD_Init(USBD_HandleType *dev, const USBD_DescriptionType *desc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    /* Assign USBD Descriptors */
    dev->Desc = desc;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]

    /* Set Device initial State */
    dev->ConfigSelector = 0;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dev->Features.RemoteWakeup = 0;
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8000f6a:	f36f 0341 	bfc	r3, #1, #1
 8000f6e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    dev->Features.SelfPowered  = dev->Desc->Config.SelfPowered;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	799b      	ldrb	r3, [r3, #6]
 8000f78:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000f7c:	b2d9      	uxtb	r1, r3
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8000f84:	f361 0300 	bfi	r3, r1, #0, #1
 8000f88:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

    /* For FS device some buffer space can be saved by changing
     * EP0 MPS to 32/16/8
     * HS capable devices must keep this value at 64 */
    dev->EP.IN [0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2240      	movs	r2, #64	; 0x40
 8000f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    dev->EP.OUT[0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2240      	movs	r2, #64	; 0x40
 8000f98:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4

    /* Initialize low level driver with device configuration */
    USBD_PD_Init(dev, &dev->Desc->Config);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f001 fade 	bl	8002564 <USB_vDevInit>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <USBD_Connect>:
/**
 * @brief This function logically connects (attaches) the device to the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Connect(USBD_HandleType *dev)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    /* Start the low level driver */
    USBD_PD_Start(dev);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 fba9 	bl	8002710 <USB_vDevStart_IT>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <USBD_ResetCallback>:
 *         - Resets any previously active configuration
 * @param dev: USB Device handle reference
 * @param speed: The new device speed
 */
void USBD_ResetCallback(USBD_HandleType *dev, USB_SpeedType speed)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
    dev->Speed = speed;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	78fa      	ldrb	r2, [r7, #3]
 8000fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Reset any previous configuration */
    USBD_IfConfig(dev, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fdad 	bl	8001b3c <USBD_IfConfig>
        }
    }
#endif

    /* Open control endpoint to start data transfers */
    USBD_PD_CtrlEpOpen(dev);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 fbea 	bl	80027bc <USB_vCtrlEpOpen>
    dev->EP.OUT[0].State = USB_EP_STATE_IDLE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <USBD_SetAddress>:
 * @brief This function checks the SET_ADDRESS request's validity.
 * @param dev: USB Device handle reference: USB Device handle reference
 * @return OK if the request is accepted, INVALID otherwise
 */
static USBD_ReturnType USBD_SetAddress(USBD_HandleType *dev)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8001000:	2303      	movs	r3, #3
 8001002:	73fb      	strb	r3, [r7, #15]

    /* The request is only valid when not configured yet */
    if ((dev->Setup.Index    == 0) &&
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	891b      	ldrh	r3, [r3, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d114      	bne.n	8001036 <USBD_SetAddress+0x3e>
        (dev->Setup.Length   == 0) &&
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	895b      	ldrh	r3, [r3, #10]
    if ((dev->Setup.Index    == 0) &&
 8001010:	2b00      	cmp	r3, #0
 8001012:	d110      	bne.n	8001036 <USBD_SetAddress+0x3e>
        (dev->ConfigSelector == 0))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (dev->Setup.Length   == 0) &&
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10b      	bne.n	8001036 <USBD_SetAddress+0x3e>
    {
#if (USBD_SET_ADDRESS_IMMEDIATE == 1)
        USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	88db      	ldrh	r3, [r3, #6]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4619      	mov	r1, r3
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f001 fbad 	bl	800278c <USB_vSetAddress>
#endif
        /* Address is accepted, it will be applied
         * after this Ctrl transfer is complete */
        retval = USBD_E_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <USBD_SetConfig>:
 * @brief This function switches to the requested configuration.
 * @param dev: USB Device handle reference
 * @return OK if the configuration is available, INVALID otherwise
 */
static USBD_ReturnType USBD_SetConfig(USBD_HandleType *dev)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8001048:	2303      	movs	r3, #3
 800104a:	73fb      	strb	r3, [r7, #15]
    uint8_t cfgNum = (uint8_t)dev->Setup.Value;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	88db      	ldrh	r3, [r3, #6]
 8001050:	73bb      	strb	r3, [r7, #14]

    if (cfgNum <= USBD_MAX_CONFIGURATION_COUNT)
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d806      	bhi.n	8001066 <USBD_SetConfig+0x26>
    {
        USBD_IfConfig(dev, cfgNum);
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 fd6d 	bl	8001b3c <USBD_IfConfig>

        retval = USBD_E_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <USBD_GetConfig>:
 * @brief This function sends the current configuration index on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetConfig(USBD_HandleType *dev)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    dev->CtrlData[0] = dev->ConfigSelector;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    return USBD_CtrlSendData(dev, dev->CtrlData, sizeof(dev->ConfigSelector));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	33fc      	adds	r3, #252	; 0xfc
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f96b 	bl	8001368 <USBD_CtrlSendData>
 8001092:	4603      	mov	r3, r0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <USBD_GetStatus>:
 * @brief This function sends the device feature status on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetStatus(USBD_HandleType *dev)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    uint16_t *devStatus = (uint16_t*)dev->CtrlData;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	33fc      	adds	r3, #252	; 0xfc
 80010a8:	60fb      	str	r3, [r7, #12]
    *devStatus = dev->Features.w;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	801a      	strh	r2, [r3, #0]
    return USBD_CtrlSendData(dev, devStatus, sizeof(*devStatus));
 80010b2:	2202      	movs	r2, #2
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f956 	bl	8001368 <USBD_CtrlSendData>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <USBD_SetFeature>:
 * @brief This function enables the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_SetFeature(USBD_HandleType *dev)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80010ce:	2303      	movs	r3, #3
 80010d0:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	88db      	ldrh	r3, [r3, #6]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d108      	bne.n	80010ec <USBD_SetFeature+0x26>
    {
        dev->Features.RemoteWakeup = 1;
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <USBD_ClearFeature>:
 * @brief This function clears the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_ClearFeature(USBD_HandleType *dev)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8001102:	2303      	movs	r3, #3
 8001104:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	88db      	ldrh	r3, [r3, #6]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <USBD_ClearFeature+0x26>
    {
        dev->Features.RemoteWakeup = 0;
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8001114:	f36f 0341 	bfc	r3, #1, #1
 8001118:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <USBD_DevRequest>:
 * @brief This function handles standard device requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_DevRequest(USBD_HandleType *dev)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8001138:	2303      	movs	r3, #3
 800113a:	73fb      	strb	r3, [r7, #15]

    /* On device level only (the below) standard requests are supported */
    if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	791b      	ldrb	r3, [r3, #4]
 8001140:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d144      	bne.n	80011d4 <USBD_DevRequest+0xa4>
    {
        switch (dev->Setup.Request)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	795b      	ldrb	r3, [r3, #5]
 800114e:	2b09      	cmp	r3, #9
 8001150:	d842      	bhi.n	80011d8 <USBD_DevRequest+0xa8>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <USBD_DevRequest+0x28>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011b1 	.word	0x080011b1
 800115c:	080011c9 	.word	0x080011c9
 8001160:	080011d9 	.word	0x080011d9
 8001164:	080011bd 	.word	0x080011bd
 8001168:	080011d9 	.word	0x080011d9
 800116c:	0800118d 	.word	0x0800118d
 8001170:	08001181 	.word	0x08001181
 8001174:	080011d9 	.word	0x080011d9
 8001178:	080011a5 	.word	0x080011a5
 800117c:	08001199 	.word	0x08001199
        {
            case USB_REQ_GET_DESCRIPTOR:
                retval = USBD_GetDescriptor(dev);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fa9d 	bl	80016c0 <USBD_GetDescriptor>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
                break;
 800118a:	e026      	b.n	80011da <USBD_DevRequest+0xaa>

            case USB_REQ_SET_ADDRESS:
                retval = USBD_SetAddress(dev);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff33 	bl	8000ff8 <USBD_SetAddress>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
                break;
 8001196:	e020      	b.n	80011da <USBD_DevRequest+0xaa>

            case USB_REQ_SET_CONFIGURATION:
                retval = USBD_SetConfig(dev);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff51 	bl	8001040 <USBD_SetConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]
                break;
 80011a2:	e01a      	b.n	80011da <USBD_DevRequest+0xaa>

            case USB_REQ_GET_CONFIGURATION:
                retval = USBD_GetConfig(dev);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff63 	bl	8001070 <USBD_GetConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
                break;
 80011ae:	e014      	b.n	80011da <USBD_DevRequest+0xaa>

            case USB_REQ_GET_STATUS:
                retval = USBD_GetStatus(dev);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff73 	bl	800109c <USBD_GetStatus>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
                break;
 80011ba:	e00e      	b.n	80011da <USBD_DevRequest+0xaa>

            case USB_REQ_SET_FEATURE:
                retval = USBD_SetFeature(dev);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff82 	bl	80010c6 <USBD_SetFeature>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
                break;
 80011c6:	e008      	b.n	80011da <USBD_DevRequest+0xaa>

            case USB_REQ_CLEAR_FEATURE:
                retval = USBD_ClearFeature(dev);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff96 	bl	80010fa <USBD_ClearFeature>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
                break;
 80011d2:	e002      	b.n	80011da <USBD_DevRequest+0xaa>

            default:
                break;
        }
    }
 80011d4:	bf00      	nop
 80011d6:	e000      	b.n	80011da <USBD_DevRequest+0xaa>
                break;
 80011d8:	bf00      	nop
#endif /* (USBD_MS_OS_DESC_VERSION == 2) */
                break;
        }
    }
#endif /* (USBD_MS_OS_DESC_VERSION > 0) */
    return retval;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <USBD_IfClass_DataStage>:
 *        @ref USBD_ClassType::DataStage function.
 * @param itf: reference of the interface
 */
static inline void USBD_IfClass_DataStage(
        USBD_IfHandleType *itf)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->DataStage, itf);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <USBD_IfClass_DataStage+0x1c>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	4798      	blx	r3
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <USBD_CtrlSendError>:
/**
 * @brief This function indicates a failed control request by stalling EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendError(USBD_HandleType *dev)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    USBD_PD_EpSetStall(dev, 0x80);
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f001 fbf5 	bl	8002a02 <USB_vEpSetStall>
    dev->EP.IN [0].State = USB_EP_STATE_STALL;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2202      	movs	r2, #2
 800121c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    USBD_PD_EpSetStall(dev, 0x00);
 8001220:	2100      	movs	r1, #0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 fbed 	bl	8002a02 <USB_vEpSetStall>
    dev->EP.OUT[0].State = USB_EP_STATE_STALL;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2202      	movs	r2, #2
 800122c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <USBD_CtrlSendStatus>:
/**
 * @brief This function indicates a successful control data OUT stage by sending ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendStatus(USBD_HandleType *dev)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    dev->EP.IN[0].State = USB_EP_STATE_STATUS;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2205      	movs	r2, #5
 8001244:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8001248:	2300      	movs	r3, #0
 800124a:	2200      	movs	r2, #0
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f001 fc61 	bl	8002b16 <USB_vEpSend>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <USBD_CtrlReceiveStatus>:
/**
 * @brief This function indicates a successful control data IN stage by receiving ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlReceiveStatus(USBD_HandleType *dev)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    dev->EP.OUT[0].State = USB_EP_STATE_STATUS;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2205      	movs	r2, #5
 8001268:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    USBD_PD_EpReceive(dev, 0x00, NULL, 0);
 800126c:	2300      	movs	r3, #0
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 fc2b 	bl	8002ace <USB_vEpReceive>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <USBD_CtrlInCallback>:
 *         - Provide completion callback and OUT status stage if it was a data stage
 *         - Set device address if it was requested
 * @param dev: USB Device handle reference
 */
void USBD_CtrlInCallback(USBD_HandleType *dev)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    /* Last packet is MPS multiple, so send ZLP packet */
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	895b      	ldrh	r3, [r3, #10]
 8001292:	429a      	cmp	r2, r3
 8001294:	d219      	bcs.n	80012ca <USBD_CtrlInCallback+0x4a>
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d311      	bcc.n	80012ca <USBD_CtrlInCallback+0x4a>
        ((dev->EP.IN[0].Transfer.Length & (dev->EP.IN[0].MaxPacketSize - 1)) == 0))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ac:	461a      	mov	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4013      	ands	r3, r2
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <USBD_CtrlInCallback+0x4a>
    {
        USBD_PD_EpSend(dev, 0x80, NULL, 0);
 80012bc:	2300      	movs	r3, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f001 fc27 	bl	8002b16 <USB_vEpSend>
        {
            USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
        }
#endif
    }
}
 80012c8:	e024      	b.n	8001314 <USBD_CtrlInCallback+0x94>
        dev->EP.IN[0].State = USB_EP_STATE_IDLE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        if (dev->Setup.RequestType.Direction == USB_DIRECTION_IN)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	791b      	ldrb	r3, [r3, #4]
 80012d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d019      	beq.n	8001314 <USBD_CtrlInCallback+0x94>
            if ((dev->ConfigSelector != 0) &&
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d011      	beq.n	800130e <USBD_CtrlInCallback+0x8e>
                (dev->Setup.RequestType.Recipient == USB_REQ_RECIPIENT_INTERFACE))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	791b      	ldrb	r3, [r3, #4]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	b2db      	uxtb	r3, r3
            if ((dev->ConfigSelector != 0) &&
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d10a      	bne.n	800130e <USBD_CtrlInCallback+0x8e>
                USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	891b      	ldrh	r3, [r3, #8]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	330a      	adds	r3, #10
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff6b 	bl	80011e4 <USBD_IfClass_DataStage>
            USBD_CtrlReceiveStatus(dev);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffa4 	bl	800125c <USBD_CtrlReceiveStatus>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <USBD_CtrlOutCallback>:
 * @brief This function manages the end of a control OUT endpoint transfer:
 *         - Provide completion callback and IN status stage if it was a data stage
 * @param dev: USB Device handle reference
 */
void USBD_CtrlOutCallback(USBD_HandleType *dev)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    /* If the callback is from a Data stage */
    if ((dev->Setup.Length > 0) &&
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	895b      	ldrh	r3, [r3, #10]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d019      	beq.n	8001360 <USBD_CtrlOutCallback+0x44>
        (dev->Setup.RequestType.Direction == USB_DIRECTION_OUT))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001334:	b2db      	uxtb	r3, r3
    if ((dev->Setup.Length > 0) &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	d112      	bne.n	8001360 <USBD_CtrlOutCallback+0x44>
    {
        /* Standard requests have no OUT direction data stage -> must be IF related */
        if (dev->ConfigSelector != 0)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00a      	beq.n	800135a <USBD_CtrlOutCallback+0x3e>
        {
            /* If callback for received EP0 data */
            USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	891b      	ldrh	r3, [r3, #8]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	330a      	adds	r3, #10
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff45 	bl	80011e4 <USBD_IfClass_DataStage>
        }

        /* Proceed to Status stage */
        USBD_CtrlSendStatus(dev);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff6c 	bl	8001238 <USBD_CtrlSendStatus>
    }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <USBD_CtrlSendData>:
 * @param data: pointer to the data to send
 * @param len: length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlSendData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d018      	beq.n	80013ba <USBD_CtrlSendData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 800138e:	2b03      	cmp	r3, #3
 8001390:	d113      	bne.n	80013ba <USBD_CtrlSendData+0x52>
    {
        /* Don't send more bytes than requested */
        if (dev->Setup.Length < len)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	895b      	ldrh	r3, [r3, #10]
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	429a      	cmp	r2, r3
 800139a:	d902      	bls.n	80013a2 <USBD_CtrlSendData+0x3a>
        {
            len = dev->Setup.Length;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	895b      	ldrh	r3, [r3, #10]
 80013a0:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.IN[0].State = USB_EP_STATE_DATA;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2204      	movs	r2, #4
 80013a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        USBD_PD_EpSend(dev, 0x80, (const uint8_t*)data, len);
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f001 fbb0 	bl	8002b16 <USB_vEpSend>

        retval = USBD_E_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <USBD_CtrlReceiveData>:
 * @param data: pointer to the target buffer to receive to
 * @param len: maximum allowed length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlReceiveData(USBD_HandleType *dev, void *data, uint16_t len)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4613      	mov	r3, r2
 80013d0:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d118      	bne.n	8001416 <USBD_CtrlReceiveData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d113      	bne.n	8001416 <USBD_CtrlReceiveData+0x52>
    {
        /* Don't receive more bytes than requested */
        if (dev->Setup.Length < len)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	895b      	ldrh	r3, [r3, #10]
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d902      	bls.n	80013fe <USBD_CtrlReceiveData+0x3a>
        {
            len = dev->Setup.Length;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	895b      	ldrh	r3, [r3, #10]
 80013fc:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.OUT[0].State = USB_EP_STATE_DATA;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2204      	movs	r2, #4
 8001402:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        USBD_PD_EpReceive(dev, 0x00, (uint8_t*)data, len);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	2100      	movs	r1, #0
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f001 fb5e 	bl	8002ace <USB_vEpReceive>

        retval = USBD_E_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8001416:	7dfb      	ldrb	r3, [r7, #23]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <USBD_SetupCallback>:
 *        and performs the endpoint's status stage if no data stage is requested
 *        or the request wasn't accepted.
 * @param dev: USB Device handle reference
 */
void USBD_SetupCallback(USBD_HandleType *dev)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8001428:	2303      	movs	r3, #3
 800142a:	73fb      	strb	r3, [r7, #15]

    dev->EP.OUT[0].State = USB_EP_STATE_SETUP;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

    /* Route the request to the recipient */
    switch (dev->Setup.RequestType.Recipient)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	791b      	ldrb	r3, [r3, #4]
 8001438:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d012      	beq.n	8001468 <USBD_SetupCallback+0x48>
 8001442:	2b02      	cmp	r3, #2
 8001444:	dc16      	bgt.n	8001474 <USBD_SetupCallback+0x54>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <USBD_SetupCallback+0x30>
 800144a:	2b01      	cmp	r3, #1
 800144c:	d006      	beq.n	800145c <USBD_SetupCallback+0x3c>
        case USB_REQ_RECIPIENT_ENDPOINT:
            retval = USBD_EpRequest(dev);
            break;

        default:
            break;
 800144e:	e011      	b.n	8001474 <USBD_SetupCallback+0x54>
            retval = USBD_DevRequest(dev);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fe6d 	bl	8001130 <USBD_DevRequest>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]
            break;
 800145a:	e00c      	b.n	8001476 <USBD_SetupCallback+0x56>
            retval = USBD_IfRequest(dev);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fbe8 	bl	8001c32 <USBD_IfRequest>
 8001462:	4603      	mov	r3, r0
 8001464:	73fb      	strb	r3, [r7, #15]
            break;
 8001466:	e006      	b.n	8001476 <USBD_SetupCallback+0x56>
            retval = USBD_EpRequest(dev);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fa82 	bl	8001972 <USBD_EpRequest>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]
            break;
 8001472:	e000      	b.n	8001476 <USBD_SetupCallback+0x56>
            break;
 8001474:	bf00      	nop
    }

    /* If the request was rejected, send Request Error (EP0 STALL) */
    if (retval != USBD_E_OK)
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <USBD_SetupCallback+0x64>
    {
        USBD_CtrlSendError(dev);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fec3 	bl	8001208 <USBD_CtrlSendError>
    }
    else
    {
        /* Data stage starts in the requested direction */
    }
}
 8001482:	e006      	b.n	8001492 <USBD_SetupCallback+0x72>
    else if (dev->Setup.Length == 0)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	895b      	ldrh	r3, [r3, #10]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <USBD_SetupCallback+0x72>
        USBD_CtrlSendStatus(dev);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fed3 	bl	8001238 <USBD_CtrlSendStatus>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <USBD_EpAddr2Ref>:
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 80014a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da08      	bge.n	80014c0 <USBD_EpAddr2Ref+0x26>
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	3338      	adds	r3, #56	; 0x38
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	3304      	adds	r3, #4
 80014be:	e006      	b.n	80014ce <USBD_EpAddr2Ref+0x34>
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	3306      	adds	r3, #6
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	3338      	adds	r3, #56	; 0x38
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	3304      	adds	r3, #4
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <USBD_IfClass_GetDesc>:
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	460b      	mov	r3, r1
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	72fb      	strb	r3, [r7, #11]
    if (itf->Class->GetDescriptor != NULL)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <USBD_IfClass_GetDesc+0x2a>
        { return itf->Class->GetDescriptor(itf, ifNum, dest); }
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	7af9      	ldrb	r1, [r7, #11]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	4798      	blx	r3
 8001500:	4603      	mov	r3, r0
 8001502:	e000      	b.n	8001506 <USBD_IfClass_GetDesc+0x2c>
        { return 0; }
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <USBD_DeviceDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the device descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_DeviceDesc(USBD_HandleType *dev, uint8_t *data)
{
 8001510:	b4b0      	push	{r4, r5, r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
    USB_DeviceDescType *desc = (USB_DeviceDescType*)data;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	60fb      	str	r3, [r7, #12]

    memcpy(data, &usbd_deviceDesc, sizeof(USB_DeviceDescType));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <USBD_DeviceDesc+0x5c>)
 8001522:	461d      	mov	r5, r3
 8001524:	4614      	mov	r4, r2
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	6028      	str	r0, [r5, #0]
 800152a:	6069      	str	r1, [r5, #4]
 800152c:	60aa      	str	r2, [r5, #8]
 800152e:	60eb      	str	r3, [r5, #12]
 8001530:	8823      	ldrh	r3, [r4, #0]
 8001532:	822b      	strh	r3, [r5, #16]

    desc->bMaxPacketSize = dev->EP.OUT[0].MaxPacketSize;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800153a:	b2da      	uxtb	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	71da      	strb	r2, [r3, #7]
    desc->idVendor       = dev->Desc->Vendor.ID;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	8a1a      	ldrh	r2, [r3, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	811a      	strh	r2, [r3, #8]
    desc->idProduct      = dev->Desc->Product.ID;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	8b1a      	ldrh	r2, [r3, #24]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	815a      	strh	r2, [r3, #10]
    desc->bcdDevice      = dev->Desc->Product.Version.bcd;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	8b5a      	ldrh	r2, [r3, #26]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	819a      	strh	r2, [r3, #12]

    return sizeof(USB_DeviceDescType);
 800155e:	2312      	movs	r3, #18
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bcb0      	pop	{r4, r5, r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	0800428c 	.word	0x0800428c

08001570 <USBD_ConfigDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the configuration descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_ConfigDesc(USBD_HandleType *dev, uint8_t *data)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
    USB_ConfigDescType *desc = (USB_ConfigDescType*)data;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	60fb      	str	r3, [r7, #12]
    uint16_t wTotalLength = sizeof(USB_ConfigDescType);
 800157e:	2309      	movs	r3, #9
 8001580:	82fb      	strh	r3, [r7, #22]
    uint8_t ifNum;
    USBD_IfHandleType *itf = NULL;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]

    /* Get the individual interface descriptors */
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8001586:	2300      	movs	r3, #0
 8001588:	757b      	strb	r3, [r7, #21]
 800158a:	e021      	b.n	80015d0 <USBD_ConfigDesc+0x60>
    {
        /* Associated interfaces return the entire descriptor */
        if (dev->IF[ifNum] == itf) { continue; }
 800158c:	7d7b      	ldrb	r3, [r7, #21]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	330a      	adds	r3, #10
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	429a      	cmp	r2, r3
 800159c:	d014      	beq.n	80015c8 <USBD_ConfigDesc+0x58>

        itf = dev->IF[ifNum];
 800159e:	7d7b      	ldrb	r3, [r7, #21]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	330a      	adds	r3, #10
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	613b      	str	r3, [r7, #16]
        wTotalLength += USBD_IfClass_GetDesc(itf, ifNum, &data[wTotalLength]);
 80015ac:	8afb      	ldrh	r3, [r7, #22]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	441a      	add	r2, r3
 80015b2:	7d7b      	ldrb	r3, [r7, #21]
 80015b4:	4619      	mov	r1, r3
 80015b6:	6938      	ldr	r0, [r7, #16]
 80015b8:	f7ff ff8f 	bl	80014da <USBD_IfClass_GetDesc>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	8afb      	ldrh	r3, [r7, #22]
 80015c2:	4413      	add	r3, r2
 80015c4:	82fb      	strh	r3, [r7, #22]
 80015c6:	e000      	b.n	80015ca <USBD_ConfigDesc+0x5a>
        if (dev->IF[ifNum] == itf) { continue; }
 80015c8:	bf00      	nop
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 80015ca:	7d7b      	ldrb	r3, [r7, #21]
 80015cc:	3301      	adds	r3, #1
 80015ce:	757b      	strb	r3, [r7, #21]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80015d6:	7d7a      	ldrb	r2, [r7, #21]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d3d7      	bcc.n	800158c <USBD_ConfigDesc+0x1c>
    }

    /* Get the configuration descriptor */
    desc->bLength               = sizeof(USB_ConfigDescType);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2209      	movs	r2, #9
 80015e0:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType       = USB_DESC_TYPE_CONFIGURATION;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2202      	movs	r2, #2
 80015e6:	705a      	strb	r2, [r3, #1]
    desc->wTotalLength          = wTotalLength;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8afa      	ldrh	r2, [r7, #22]
 80015ec:	805a      	strh	r2, [r3, #2]
    desc->bNumInterfaces        = dev->IfCount;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	711a      	strb	r2, [r3, #4]
    desc->bConfigurationValue   = 1;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	715a      	strb	r2, [r3, #5]
    desc->iConfiguration        = USBD_ISTR_CONFIG;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	719a      	strb	r2, [r3, #6]
    desc->bmAttributes          = 0x80 | dev->Desc->Config.b;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	71da      	strb	r2, [r3, #7]
    desc->bMaxPower             = dev->Desc->Config.MaxCurrent_mA / 2;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	889b      	ldrh	r3, [r3, #4]
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	721a      	strb	r2, [r3, #8]

    return wTotalLength;
 8001624:	8afb      	ldrh	r3, [r7, #22]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <USBD_GetStringDesc>:
 * @param str: the input ASCII string
 * @param data: the target container for the string descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_GetStringDesc(const char *str, uint8_t *data)
{
 800162e:	b480      	push	{r7}
 8001630:	b087      	sub	sp, #28
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
    uint16_t *dst = (uint16_t*)&data[2];
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3302      	adds	r3, #2
 800163c:	617b      	str	r3, [r7, #20]
    data[0] = 2;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2202      	movs	r2, #2
 8001642:	701a      	strb	r2, [r3, #0]
    data[1] = USB_DESC_TYPE_STRING;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	701a      	strb	r2, [r3, #0]

    /* If ASCII, convert to Unicode */
    if (str[1] != 0)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3301      	adds	r3, #1
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d016      	beq.n	8001684 <USBD_GetStringDesc+0x56>
    {
        uint8_t  *src = (uint8_t*)str;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	613b      	str	r3, [r7, #16]
        while (*src != 0)
 800165a:	e00e      	b.n	800167a <USBD_GetStringDesc+0x4c>
        {
            *dst++ = (uint16_t)*src++;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	613a      	str	r2, [r7, #16]
 8001662:	7819      	ldrb	r1, [r3, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	1c9a      	adds	r2, r3, #2
 8001668:	617a      	str	r2, [r7, #20]
 800166a:	b28a      	uxth	r2, r1
 800166c:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3302      	adds	r3, #2
 8001674:	b2da      	uxtb	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ec      	bne.n	800165c <USBD_GetStringDesc+0x2e>
 8001682:	e014      	b.n	80016ae <USBD_GetStringDesc+0x80>
        }
    }
    else /* If Unicode already, just copy */
    {
        uint16_t *src = (uint16_t*)str;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	60fb      	str	r3, [r7, #12]
        while (*src != 0)
 8001688:	e00d      	b.n	80016a6 <USBD_GetStringDesc+0x78>
        {
            *dst++ = *src++;
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	1c93      	adds	r3, r2, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1c99      	adds	r1, r3, #2
 8001694:	6179      	str	r1, [r7, #20]
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	3302      	adds	r3, #2
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ed      	bne.n	800168a <USBD_GetStringDesc+0x5c>
        }
    }
    return data[0];
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <USBD_GetDescriptor>:
 * @brief This function collects and transfers the requested descriptor through EP0.
 * @param dev: USB Device handle reference
 * @return OK if the descriptor is provided, INVALID if not supported
 */
USBD_ReturnType USBD_GetDescriptor(USBD_HandleType *dev)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80016c8:	2303      	movs	r3, #3
 80016ca:	75fb      	strb	r3, [r7, #23]

    uint16_t len = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	82bb      	strh	r3, [r7, #20]
    uint8_t *data = dev->CtrlData;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	33fc      	adds	r3, #252	; 0xfc
 80016d4:	613b      	str	r3, [r7, #16]

    /* High byte identifies descriptor type */
    switch (dev->Setup.Value >> 8)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	88db      	ldrh	r3, [r3, #6]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d014      	beq.n	800170c <USBD_GetDescriptor+0x4c>
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	dc54      	bgt.n	8001790 <USBD_GetDescriptor+0xd0>
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d002      	beq.n	80016f0 <USBD_GetDescriptor+0x30>
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d007      	beq.n	80016fe <USBD_GetDescriptor+0x3e>
            break;
        }
#endif /* (USBD_LPM_SUPPORT == 1) || (USBD_MS_OS_DESC_VERSION == 2) */

        default:
            break;
 80016ee:	e04f      	b.n	8001790 <USBD_GetDescriptor+0xd0>
            len = USBD_DeviceDesc(dev, data);
 80016f0:	6939      	ldr	r1, [r7, #16]
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ff0c 	bl	8001510 <USBD_DeviceDesc>
 80016f8:	4603      	mov	r3, r0
 80016fa:	82bb      	strh	r3, [r7, #20]
            break;
 80016fc:	e049      	b.n	8001792 <USBD_GetDescriptor+0xd2>
            len = USBD_ConfigDesc(dev, data);
 80016fe:	6939      	ldr	r1, [r7, #16]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff35 	bl	8001570 <USBD_ConfigDesc>
 8001706:	4603      	mov	r3, r0
 8001708:	82bb      	strh	r3, [r7, #20]
            break;
 800170a:	e042      	b.n	8001792 <USBD_GetDescriptor+0xd2>
            switch (dev->Setup.Value & 0xFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	88db      	ldrh	r3, [r3, #6]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b40      	cmp	r3, #64	; 0x40
 8001714:	d023      	beq.n	800175e <USBD_GetDescriptor+0x9e>
 8001716:	2b40      	cmp	r3, #64	; 0x40
 8001718:	dc2b      	bgt.n	8001772 <USBD_GetDescriptor+0xb2>
 800171a:	2b20      	cmp	r3, #32
 800171c:	d015      	beq.n	800174a <USBD_GetDescriptor+0x8a>
 800171e:	2b20      	cmp	r3, #32
 8001720:	dc27      	bgt.n	8001772 <USBD_GetDescriptor+0xb2>
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <USBD_GetDescriptor+0x6c>
 8001726:	2b10      	cmp	r3, #16
 8001728:	d005      	beq.n	8001736 <USBD_GetDescriptor+0x76>
 800172a:	e022      	b.n	8001772 <USBD_GetDescriptor+0xb2>
                    data = (uint8_t*)&usbd_langIdDesc;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <USBD_GetDescriptor+0xf4>)
 800172e:	613b      	str	r3, [r7, #16]
                    len  = sizeof(usbd_langIdDesc);
 8001730:	2304      	movs	r3, #4
 8001732:	82bb      	strh	r3, [r7, #20]
                    break;
 8001734:	e02b      	b.n	800178e <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Vendor.Name, data);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ff75 	bl	800162e <USBD_GetStringDesc>
 8001744:	4603      	mov	r3, r0
 8001746:	82bb      	strh	r3, [r7, #20]
                    break;
 8001748:	e021      	b.n	800178e <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Product.Name, data);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	6939      	ldr	r1, [r7, #16]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff6b 	bl	800162e <USBD_GetStringDesc>
 8001758:	4603      	mov	r3, r0
 800175a:	82bb      	strh	r3, [r7, #20]
                    break;
 800175c:	e017      	b.n	800178e <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Config.Name, data);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6939      	ldr	r1, [r7, #16]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff61 	bl	800162e <USBD_GetStringDesc>
 800176c:	4603      	mov	r3, r0
 800176e:	82bb      	strh	r3, [r7, #20]
                    break;
 8001770:	e00d      	b.n	800178e <USBD_GetDescriptor+0xce>
                    const char* str = USBD_IfString(dev);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fa32 	bl	8001bdc <USBD_IfString>
 8001778:	60f8      	str	r0, [r7, #12]
                    if (str != NULL)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <USBD_GetDescriptor+0xcc>
                        len = USBD_GetStringDesc(str, data);
 8001780:	6939      	ldr	r1, [r7, #16]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f7ff ff53 	bl	800162e <USBD_GetStringDesc>
 8001788:	4603      	mov	r3, r0
 800178a:	82bb      	strh	r3, [r7, #20]
                    break;
 800178c:	bf00      	nop
            break;
 800178e:	e000      	b.n	8001792 <USBD_GetDescriptor+0xd2>
            break;
 8001790:	bf00      	nop
    }

    /* Transfer the non-null descriptor */
    if (len > 0)
 8001792:	8abb      	ldrh	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <USBD_GetDescriptor+0xe8>
    {
        retval = USBD_CtrlSendData(dev, data, len);
 8001798:	8abb      	ldrh	r3, [r7, #20]
 800179a:	461a      	mov	r2, r3
 800179c:	6939      	ldr	r1, [r7, #16]
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fde2 	bl	8001368 <USBD_CtrlSendData>
 80017a4:	4603      	mov	r3, r0
 80017a6:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	08004288 	.word	0x08004288

080017b8 <USBD_EpDesc>:
 * @param epAddr: endpoint address
 * @param data: the target container for the endpoint descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_EpDesc(USBD_HandleType *dev, uint8_t epAddr, uint8_t *data)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	460b      	mov	r3, r1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	72fb      	strb	r3, [r7, #11]
    USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	4619      	mov	r1, r3
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fe65 	bl	800149a <USBD_EpAddr2Ref>
 80017d0:	6178      	str	r0, [r7, #20]
    USB_EndpointDescType *desc = (USB_EndpointDescType*)data;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	613b      	str	r3, [r7, #16]

    desc->bLength           = sizeof(USB_EndpointDescType);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2207      	movs	r2, #7
 80017da:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType   = USB_DESC_TYPE_ENDPOINT;
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2205      	movs	r2, #5
 80017e0:	705a      	strb	r2, [r3, #1]
    desc->bEndpointAddress  = epAddr;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	7afa      	ldrb	r2, [r7, #11]
 80017e6:	709a      	strb	r2, [r3, #2]
    desc->bmAttributes      = ep->Type;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	7a9a      	ldrb	r2, [r3, #10]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	70da      	strb	r2, [r3, #3]
    desc->wMaxPacketSize    = ep->MaxPacketSize;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	891a      	ldrh	r2, [r3, #8]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	809a      	strh	r2, [r3, #4]
    desc->bInterval         = 1;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2201      	movs	r2, #1
 80017fc:	719a      	strb	r2, [r3, #6]

    return sizeof(USB_EndpointDescType);
 80017fe:	2307      	movs	r3, #7
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <USBD_EpAddr2Ref>:
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8001814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da08      	bge.n	800182e <USBD_EpAddr2Ref+0x26>
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	3338      	adds	r3, #56	; 0x38
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	3304      	adds	r3, #4
 800182c:	e006      	b.n	800183c <USBD_EpAddr2Ref+0x34>
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	3306      	adds	r3, #6
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	3338      	adds	r3, #56	; 0x38
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	3304      	adds	r3, #4
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <USBD_IfClass_InData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_InData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->InData, itf, ep);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <USBD_IfClass_InData+0x20>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <USBD_IfClass_OutData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_OutData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->OutData, itf, ep);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <USBD_IfClass_OutData+0x20>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	6839      	ldr	r1, [r7, #0]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <USBD_EpSend>:
 * @param len: length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpSend(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	461a      	mov	r2, r3
 80018a4:	460b      	mov	r3, r1
 80018a6:	72fb      	strb	r3, [r7, #11]
 80018a8:	4613      	mov	r3, r2
 80018aa:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 80018ac:	2302      	movs	r3, #2
 80018ae:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.IN[epAddr & 0xF];
 80018b0:	7afb      	ldrb	r3, [r7, #11]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	3338      	adds	r3, #56	; 0x38
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	3304      	adds	r3, #4
 80018c0:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	7adb      	ldrb	r3, [r3, #11]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d003      	beq.n	80018d2 <USBD_EpSend+0x3a>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d10a      	bne.n	80018e8 <USBD_EpSend+0x50>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2204      	movs	r2, #4
 80018d6:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpSend(dev, epAddr, (const uint8_t*)data, len);
 80018d8:	893b      	ldrh	r3, [r7, #8]
 80018da:	7af9      	ldrb	r1, [r7, #11]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f001 f919 	bl	8002b16 <USB_vEpSend>

        retval = USBD_E_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <USBD_EpInCallback>:
 *        of the completion of an IN endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB IN endpoint handle reference
 */
void USBD_EpInCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
    if (ep == &dev->EP.IN[0])
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	333c      	adds	r3, #60	; 0x3c
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d103      	bne.n	800190e <USBD_EpInCallback+0x1c>
    {
        USBD_CtrlInCallback(dev);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fcba 	bl	8001280 <USBD_CtrlInCallback>
    else
    {
        ep->State = USB_EP_STATE_IDLE;
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
    }
}
 800190c:	e00d      	b.n	800192a <USBD_EpInCallback+0x38>
        ep->State = USB_EP_STATE_IDLE;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	72da      	strb	r2, [r3, #11]
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	7b1b      	ldrb	r3, [r3, #12]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	330a      	adds	r3, #10
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff8f 	bl	8001848 <USBD_IfClass_InData>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <USBD_EpOutCallback>:
 *        of the completion of an OUT endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB OUT endpoint handle reference
 */
void USBD_EpOutCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
    ep->State = USB_EP_STATE_IDLE;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	72da      	strb	r2, [r3, #11]

    if (ep == &dev->EP.OUT[0])
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	339c      	adds	r3, #156	; 0x9c
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d103      	bne.n	8001954 <USBD_EpOutCallback+0x22>
    {
        USBD_CtrlOutCallback(dev);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fce5 	bl	800131c <USBD_CtrlOutCallback>
    }
    else
    {
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
    }
}
 8001952:	e00a      	b.n	800196a <USBD_EpOutCallback+0x38>
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	7b1b      	ldrb	r3, [r3, #12]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	330a      	adds	r3, #10
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	6839      	ldr	r1, [r7, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff83 	bl	8001870 <USBD_IfClass_OutData>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <USBD_EpRequest>:
 * @brief This function handles standard endpoint requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_EpRequest(USBD_HandleType *dev)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 800197a:	2303      	movs	r3, #3
 800197c:	75fb      	strb	r3, [r7, #23]
    uint8_t epAddr = (uint8_t)dev->Setup.Index, epNum = epAddr & 0xF;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	891b      	ldrh	r3, [r3, #8]
 8001982:	75bb      	strb	r3, [r7, #22]
 8001984:	7dbb      	ldrb	r3, [r7, #22]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	757b      	strb	r3, [r7, #21]

    if ((epNum >= USBD_MAX_EP_COUNT) ||
 800198c:	7d7b      	ldrb	r3, [r7, #21]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d87d      	bhi.n	8001a8e <USBD_EpRequest+0x11c>
 8001992:	7d7b      	ldrb	r3, [r7, #21]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d07a      	beq.n	8001a8e <USBD_EpRequest+0x11c>
        (epNum == 0) ||
        (dev->ConfigSelector == 0))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (epNum == 0) ||
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d075      	beq.n	8001a8e <USBD_EpRequest+0x11c>
    {
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	791b      	ldrb	r3, [r3, #4]
 80019a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d16e      	bne.n	8001a8e <USBD_EpRequest+0x11c>
    {
        USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 80019b0:	7dbb      	ldrb	r3, [r7, #22]
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff27 	bl	8001808 <USBD_EpAddr2Ref>
 80019ba:	6138      	str	r0, [r7, #16]

        switch (dev->Setup.Request)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	795b      	ldrb	r3, [r3, #5]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d006      	beq.n	80019d2 <USBD_EpRequest+0x60>
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	dc5d      	bgt.n	8001a84 <USBD_EpRequest+0x112>
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d046      	beq.n	8001a5a <USBD_EpRequest+0xe8>
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d013      	beq.n	80019f8 <USBD_EpRequest+0x86>
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
                break;
            }

            default:
                break;
 80019d0:	e058      	b.n	8001a84 <USBD_EpRequest+0x112>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	88db      	ldrh	r3, [r3, #6]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d156      	bne.n	8001a88 <USBD_EpRequest+0x116>
                    retval = USBD_E_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
                    if (ep->State != USB_EP_STATE_STALL)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	7adb      	ldrb	r3, [r3, #11]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d050      	beq.n	8001a88 <USBD_EpRequest+0x116>
                        USBD_PD_EpSetStall(dev, epAddr);
 80019e6:	7dbb      	ldrb	r3, [r7, #22]
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f001 f809 	bl	8002a02 <USB_vEpSetStall>
                        ep->State = USB_EP_STATE_STALL;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2202      	movs	r2, #2
 80019f4:	72da      	strb	r2, [r3, #11]
                break;
 80019f6:	e047      	b.n	8001a88 <USBD_EpRequest+0x116>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	88db      	ldrh	r3, [r3, #6]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d145      	bne.n	8001a8c <USBD_EpRequest+0x11a>
                    retval = USBD_E_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	75fb      	strb	r3, [r7, #23]
                    if (ep->State == USB_EP_STATE_STALL)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	7adb      	ldrb	r3, [r3, #11]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d13f      	bne.n	8001a8c <USBD_EpRequest+0x11a>
                        USBD_PD_EpClearStall(dev, epAddr);
 8001a0c:	7dbb      	ldrb	r3, [r7, #22]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f001 f82b 	bl	8002a6c <USB_vEpClearStall>
                        ep->State = USB_EP_STATE_IDLE;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	72da      	strb	r2, [r3, #11]
                        ep->Transfer.Length = 0;
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	809a      	strh	r2, [r3, #4]
                        if (epAddr != epNum)
 8001a22:	7dba      	ldrb	r2, [r7, #22]
 8001a24:	7d7b      	ldrb	r3, [r7, #21]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d00b      	beq.n	8001a42 <USBD_EpRequest+0xd0>
                            USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	7b1b      	ldrb	r3, [r3, #12]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	330a      	adds	r3, #10
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	6939      	ldr	r1, [r7, #16]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff04 	bl	8001848 <USBD_IfClass_InData>
                break;
 8001a40:	e024      	b.n	8001a8c <USBD_EpRequest+0x11a>
                            USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	7b1b      	ldrb	r3, [r3, #12]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	330a      	adds	r3, #10
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff0c 	bl	8001870 <USBD_IfClass_OutData>
                break;
 8001a58:	e018      	b.n	8001a8c <USBD_EpRequest+0x11a>
                uint16_t *epStatus = (uint16_t*)dev->CtrlData;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	33fc      	adds	r3, #252	; 0xfc
 8001a5e:	60fb      	str	r3, [r7, #12]
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	7adb      	ldrb	r3, [r3, #11]
                        1 << USB_FEATURE_EP_HALT : 0;
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	b29a      	uxth	r2, r3
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	801a      	strh	r2, [r3, #0]
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
 8001a74:	2202      	movs	r2, #2
 8001a76:	68f9      	ldr	r1, [r7, #12]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fc75 	bl	8001368 <USBD_CtrlSendData>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]
                break;
 8001a82:	e004      	b.n	8001a8e <USBD_EpRequest+0x11c>
                break;
 8001a84:	bf00      	nop
 8001a86:	e002      	b.n	8001a8e <USBD_EpRequest+0x11c>
                break;
 8001a88:	bf00      	nop
 8001a8a:	e000      	b.n	8001a8e <USBD_EpRequest+0x11c>
                break;
 8001a8c:	bf00      	nop
        /* Callouts for class or vendor specific
         * EP request processing not implemented
         * Interface level requests are promoted (and supported) instead */
    }

    return retval;
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <USBD_IfClass_GetString>:
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
    if (itf->Class->GetString == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <USBD_IfClass_GetString+0x1a>
    {   return (const char*)NULL; }
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e007      	b.n	8001ac2 <USBD_IfClass_GetString+0x2a>
    {   return itf->Class->GetString(itf, intNum); }
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	4611      	mov	r1, r2
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <USBD_IfClass_Init>:
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Init, itf);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <USBD_IfClass_Init+0x1c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <USBD_IfClass_Deinit>:
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Deinit, itf);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <USBD_IfClass_Deinit+0x1c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <USBD_IfClass_SetupStage>:
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
    if (itf->Class->SetupStage == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <USBD_IfClass_SetupStage+0x16>
    {   return USBD_E_INVALID; }
 8001b24:	2303      	movs	r3, #3
 8001b26:	e005      	b.n	8001b34 <USBD_IfClass_SetupStage+0x22>
    {   return itf->Class->SetupStage(itf); }
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
 8001b32:	4603      	mov	r3, r0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <USBD_IfConfig>:
 * @brief This function changes the active device configuration.
 * @param dev: USB Device handle reference
 * @param cfgNum: New configuration selector index
 */
void USBD_IfConfig(USBD_HandleType *dev, uint8_t cfgNum)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
    if (dev->ConfigSelector != cfgNum)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d03f      	beq.n	8001bd4 <USBD_IfConfig+0x98>
    {
        uint8_t ifNum;

        /* Clear any previously selected config */
        if (dev->ConfigSelector != 0)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01c      	beq.n	8001b98 <USBD_IfConfig+0x5c>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e013      	b.n	8001b8c <USBD_IfConfig+0x50>
            {
                USBD_IfClass_Deinit(dev->IF[ifNum]);
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	330a      	adds	r3, #10
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ffbc 	bl	8001aee <USBD_IfClass_Deinit>
                dev->IF[ifNum]->AltSelector = 0;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	721a      	strb	r2, [r3, #8]
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3e5      	bcc.n	8001b64 <USBD_IfConfig+0x28>
            }
        }

        /* Update configuration index */
        dev->ConfigSelector = cfgNum;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        /* Set the new selected valid config */
        if (dev->ConfigSelector != 0)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d014      	beq.n	8001bd4 <USBD_IfConfig+0x98>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e00b      	b.n	8001bc8 <USBD_IfConfig+0x8c>
            {
                USBD_IfClass_Init(dev->IF[ifNum]);
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	330a      	adds	r3, #10
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff84 	bl	8001aca <USBD_IfClass_Init>
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3ed      	bcc.n	8001bb0 <USBD_IfConfig+0x74>
            }
        }
    }
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <USBD_IfString>:
 *        which is selected by the setup request.
 * @param dev: USB Device handle reference
 * @return Reference to the interface's string, or NULL if not available
 */
const char* USBD_IfString(USBD_HandleType *dev)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    uint8_t ifNum  = ((uint8_t)dev->Setup.Value & 0xF) - USBD_ISTR_INTERFACES;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	88db      	ldrh	r3, [r3, #6]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	74fb      	strb	r3, [r7, #19]
    uint8_t intNum = ((uint8_t)dev->Setup.Value >> 4);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	88db      	ldrh	r3, [r3, #6]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	74bb      	strb	r3, [r7, #18]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	330a      	adds	r3, #10
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]
    const char* str = NULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

    if (ifNum < dev->IfCount)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c16:	7cfa      	ldrb	r2, [r7, #19]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d205      	bcs.n	8001c28 <USBD_IfString+0x4c>
    {
        str = USBD_IfClass_GetString(itf, intNum);
 8001c1c:	7cbb      	ldrb	r3, [r7, #18]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff ff39 	bl	8001a98 <USBD_IfClass_GetString>
 8001c26:	6178      	str	r0, [r7, #20]
    }

    return str;
 8001c28:	697b      	ldr	r3, [r7, #20]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <USBD_IfRequest>:
 * @brief Processes the interface request.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_IfRequest(USBD_HandleType *dev)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	75fb      	strb	r3, [r7, #23]
    uint8_t ifNum = (uint8_t)dev->Setup.Index;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	891b      	ldrh	r3, [r3, #8]
 8001c42:	75bb      	strb	r3, [r7, #22]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 8001c44:	7dbb      	ldrb	r3, [r7, #22]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	330a      	adds	r3, #10
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]

    if ((dev->ConfigSelector == 0) || (ifNum >= dev->IfCount))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d03e      	beq.n	8001cda <USBD_IfRequest+0xa8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c62:	7dba      	ldrb	r2, [r7, #22]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d238      	bcs.n	8001cda <USBD_IfRequest+0xa8>
    {
        /* Configured and valid indexed interfaces only */
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	791b      	ldrb	r3, [r3, #4]
 8001c6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d12a      	bne.n	8001ccc <USBD_IfRequest+0x9a>
    {
        switch (dev->Setup.Request)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	795b      	ldrb	r3, [r3, #5]
 8001c7a:	2b0a      	cmp	r3, #10
 8001c7c:	d002      	beq.n	8001c84 <USBD_IfRequest+0x52>
 8001c7e:	2b0b      	cmp	r3, #11
 8001c80:	d00a      	beq.n	8001c98 <USBD_IfRequest+0x66>
 8001c82:	e01d      	b.n	8001cc0 <USBD_IfRequest+0x8e>
        {
            /* Current alternate setting of the IF */
            case USB_REQ_GET_INTERFACE:
            {
                retval = USBD_CtrlSendData(dev,
                        &itf->AltSelector, sizeof(itf->AltSelector));
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	3308      	adds	r3, #8
                retval = USBD_CtrlSendData(dev,
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fb6b 	bl	8001368 <USBD_CtrlSendData>
 8001c92:	4603      	mov	r3, r0
 8001c94:	75fb      	strb	r3, [r7, #23]
                break;
 8001c96:	e020      	b.n	8001cda <USBD_IfRequest+0xa8>
            }

            /* Set alternate setting of the IF */
            case USB_REQ_SET_INTERFACE:
            {
                uint8_t altSel = (uint8_t)dev->Setup.Value;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	88db      	ldrh	r3, [r3, #6]
 8001c9c:	73fb      	strb	r3, [r7, #15]

                /* Check validity */
                if (itf->AltCount > altSel)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	7a5b      	ldrb	r3, [r3, #9]
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d217      	bcs.n	8001cd8 <USBD_IfRequest+0xa6>
                {
                    /* Deinit previous AS */
                    USBD_IfClass_Deinit(itf);
 8001ca8:	6938      	ldr	r0, [r7, #16]
 8001caa:	f7ff ff20 	bl	8001aee <USBD_IfClass_Deinit>

                    itf->AltSelector = altSel;
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	721a      	strb	r2, [r3, #8]

                    /* Init with new AS */
                    USBD_IfClass_Init(itf);
 8001cb4:	6938      	ldr	r0, [r7, #16]
 8001cb6:	f7ff ff08 	bl	8001aca <USBD_IfClass_Init>

                    retval = USBD_E_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]
                }
                break;
 8001cbe:	e00b      	b.n	8001cd8 <USBD_IfRequest+0xa6>
            }

            default:
            {
                /* forward the request to the IF */
                retval = USBD_IfClass_SetupStage(itf);
 8001cc0:	6938      	ldr	r0, [r7, #16]
 8001cc2:	f7ff ff26 	bl	8001b12 <USBD_IfClass_SetupStage>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	75fb      	strb	r3, [r7, #23]
                break;
 8001cca:	e006      	b.n	8001cda <USBD_IfRequest+0xa8>
        }
    }
    else
    {
        /* forward the request to the IF */
        retval = USBD_IfClass_SetupStage(itf);
 8001ccc:	6938      	ldr	r0, [r7, #16]
 8001cce:	f7ff ff20 	bl	8001b12 <USBD_IfClass_SetupStage>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
 8001cd6:	e000      	b.n	8001cda <USBD_IfRequest+0xa8>
                break;
 8001cd8:	bf00      	nop
    }

    return retval;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <USB_prvConnectCtrl>:
#define USB_TOTAL_FIFO_SIZE(HANDLE) 1280
#endif

/* Set the status of the DP pull-up resistor */
__STATIC_INLINE void USB_prvConnectCtrl(USB_HandleType * pxUSB, FunctionalState NewState)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
    USB_REG_BIT(pxUSB,DCTL,SDIS) = ~NewState;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	b2d9      	uxtb	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	b2d9      	uxtb	r1, r3
 8001d02:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8001d06:	f361 0341 	bfi	r3, r1, #1, #1
 8001d0a:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <USB_prvFlushTxFifo>:

/* Flush an IN FIFO */
__STATIC_INLINE void USB_prvFlushTxFifo(USB_HandleType * pxUSB, uint8_t FifoNumber)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
            ((uint32_t)FifoNumber << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	019a      	lsls	r2, r3, #6
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f042 0220 	orr.w	r2, r2, #32
 8001d32:	611a      	str	r2, [r3, #16]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <USB_prvFlushRxFifo>:

/* Flush global OUT FIFO */
__STATIC_INLINE void USB_prvFlushRxFifo(USB_HandleType * pxUSB)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_RXFFLSH;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	611a      	str	r2, [r3, #16]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <USB_prvClearEpInts>:

/* Clears all endpoint interrupt request flags */
static void USB_prvClearEpInts(USB_HandleType * pxUSB)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <USB_prvClearEpInts+0x60>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <USB_prvClearEpInts+0x16>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e000      	b.n	8001d74 <USB_prvClearEpInts+0x18>
 8001d72:	2304      	movs	r3, #4
 8001d74:	73bb      	strb	r3, [r7, #14]

    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	e014      	b.n	8001da6 <USB_prvClearEpInts+0x4a>
    {
        pxUSB->Inst->IEP[ucEpNum].DIEPINT.w = 0xFF;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	015b      	lsls	r3, r3, #5
 8001d84:	4413      	add	r3, r2
 8001d86:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	601a      	str	r2, [r3, #0]
        pxUSB->Inst->OEP[ucEpNum].DOEPINT.w = 0xFF;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	015b      	lsls	r3, r3, #5
 8001d96:	4413      	add	r3, r2
 8001d98:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	601a      	str	r2, [r3, #0]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3e6      	bcc.n	8001d7c <USB_prvClearEpInts+0x20>
    }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40040000 	.word	0x40040000

08001dc0 <USB_prvWriteFifo>:

/* Push packet data to IN FIFO */
static void USB_prvWriteFifo(USB_HandleType * pxUSB,
        uint8_t ucFIFOx, uint8_t * pucData, uint16_t usLength)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	72fb      	strb	r3, [r7, #11]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	813b      	strh	r3, [r7, #8]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	6893      	ldr	r3, [r2, #8]
 8001dda:	f36f 0300 	bfc	r3, #0, #1
 8001dde:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	3303      	adds	r3, #3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da00      	bge.n	8001dea <USB_prvWriteFifo+0x2a>
 8001de8:	3303      	adds	r3, #3
 8001dea:	109b      	asrs	r3, r3, #2
 8001dec:	82fb      	strh	r3, [r7, #22]
 8001dee:	e00e      	b.n	8001e0e <USB_prvWriteFifo+0x4e>
    {
        pxUSB->Inst->DFIFO[ucFIFOx].DR = *((__packed uint32_t *) pucData);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	68d9      	ldr	r1, [r3, #12]
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	031b      	lsls	r3, r3, #12
 8001dfe:	440b      	add	r3, r1
 8001e00:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8001e02:	8afb      	ldrh	r3, [r7, #22]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	82fb      	strh	r3, [r7, #22]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	8afb      	ldrh	r3, [r7, #22]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ed      	bne.n	8001df0 <USB_prvWriteFifo+0x30>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	6893      	ldr	r3, [r2, #8]
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6093      	str	r3, [r2, #8]
}
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <USB_prvReadFifo>:

/* Pop packet data from OUT FIFO */
static void USB_prvReadFifo(USB_HandleType * pxUSB,
        uint8_t * pucData, uint16_t usLength)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	6893      	ldr	r3, [r2, #8]
 8001e40:	f36f 0300 	bfc	r3, #0, #1
 8001e44:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	3303      	adds	r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da00      	bge.n	8001e50 <USB_prvReadFifo+0x24>
 8001e4e:	3303      	adds	r3, #3
 8001e50:	109b      	asrs	r3, r3, #2
 8001e52:	82fb      	strh	r3, [r7, #22]
 8001e54:	e00c      	b.n	8001e70 <USB_prvReadFifo+0x44>
    {
        *(__packed uint32_t *) pucData = pxUSB->Inst->DFIFO[0].DR;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8001e64:	8afb      	ldrh	r3, [r7, #22]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	82fb      	strh	r3, [r7, #22]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	8afb      	ldrh	r3, [r7, #22]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1ef      	bne.n	8001e56 <USB_prvReadFifo+0x2a>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	6893      	ldr	r3, [r2, #8]
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6093      	str	r3, [r2, #8]
}
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <USB_prvTransmitPacket>:

/* Handle IN EP transfer */
static void USB_prvTransmitPacket(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	3338      	adds	r3, #56	; 0x38
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	613b      	str	r3, [r7, #16]
    uint32_t ulFifoSpace = pxUSB->Inst->IEP[ucEpNum].DTXFSTS * sizeof(uint32_t);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	015b      	lsls	r3, r3, #5
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	60fb      	str	r3, [r7, #12]
    uint32_t ulEpFlag = 1 << ucEpNum;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	60bb      	str	r3, [r7, #8]

    /* If there is enough space in the FIFO for a packet, fill immediately */
    if (ulFifoSpace >= (uint32_t)pxEP->MaxPacketSize)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	891b      	ldrh	r3, [r3, #8]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d320      	bcc.n	8001f14 <USB_prvTransmitPacket+0x86>
    {
        uint16_t usPacketLength;

        /* Multi packet transfer */
        if (pxEP->Transfer.Progress > pxEP->MaxPacketSize)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	88da      	ldrh	r2, [r3, #6]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	891b      	ldrh	r3, [r3, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d903      	bls.n	8001ee6 <USB_prvTransmitPacket+0x58>
        {
            usPacketLength = pxEP->MaxPacketSize;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	891b      	ldrh	r3, [r3, #8]
 8001ee2:	82fb      	strh	r3, [r7, #22]
 8001ee4:	e002      	b.n	8001eec <USB_prvTransmitPacket+0x5e>
        }
        else
        {
            usPacketLength = pxEP->Transfer.Progress;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	88db      	ldrh	r3, [r3, #6]
 8001eea:	82fb      	strh	r3, [r7, #22]
        }

        /* Write a packet to the FIFO */
        USB_prvWriteFifo(pxUSB, ucEpNum, pxEP->Transfer.Data, usPacketLength);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	8afb      	ldrh	r3, [r7, #22]
 8001ef2:	78f9      	ldrb	r1, [r7, #3]
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff63 	bl	8001dc0 <USB_prvWriteFifo>
        pxEP->Transfer.Data += usPacketLength;
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	8afb      	ldrh	r3, [r7, #22]
 8001f00:	441a      	add	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usPacketLength;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	88da      	ldrh	r2, [r3, #6]
 8001f0a:	8afb      	ldrh	r3, [r7, #22]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	80da      	strh	r2, [r3, #6]
    }

    if (ucEpNum == 0)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d019      	beq.n	8001f4e <USB_prvTransmitPacket+0xc0>
    {
        /* Interrupt isn't used */
    }
    else if (pxEP->Transfer.Progress == 0)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	88db      	ldrh	r3, [r3, #6]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10b      	bne.n	8001f3a <USB_prvTransmitPacket+0xac>
    {
        /* Disable Tx FIFO interrupts when all data is written */
        CLEAR_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	400a      	ands	r2, r1
 8001f34:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    else
    {
        /* Enable Tx FIFO interrupts when more data is available */
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
    }
}
 8001f38:	e009      	b.n	8001f4e <USB_prvTransmitPacket+0xc0>
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <USB_prvEpSend>:

/* Internal handling of EP transmission */
static void USB_prvEpSend(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	3338      	adds	r3, #56	; 0x38
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	613b      	str	r3, [r7, #16]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3348      	adds	r3, #72	; 0x48
 8001f7c:	015b      	lsls	r3, r3, #5
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
    uint16_t usTransferSize = pxEP->Transfer.Progress;
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	88db      	ldrh	r3, [r3, #6]
 8001f86:	82fb      	strh	r3, [r7, #22]

    if (pxEP->Transfer.Progress == 0)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	88db      	ldrh	r3, [r3, #6]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d104      	bne.n	8001f9a <USB_prvEpSend+0x44>
    {
        /* 1 transfer with 0 length */
        pxDEP->DxEPTSIZ.w = 1 << USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	e056      	b.n	8002048 <USB_prvEpSend+0xf2>
    }
    /* EP0 has limited transfer size */
    else if ((ucEpNum == 0) && (pxEP->Transfer.Progress > pxEP->MaxPacketSize))
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d117      	bne.n	8001fd0 <USB_prvEpSend+0x7a>
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	88da      	ldrh	r2, [r3, #6]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	891b      	ldrh	r3, [r3, #8]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d911      	bls.n	8001fd0 <USB_prvEpSend+0x7a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	6913      	ldr	r3, [r2, #16]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	f361 43dc 	bfi	r3, r1, #19, #10
 8001fb6:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = usTransferSize = pxEP->MaxPacketSize;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	891b      	ldrh	r3, [r3, #8]
 8001fbc:	82fb      	strh	r3, [r7, #22]
 8001fbe:	8afa      	ldrh	r2, [r7, #22]
 8001fc0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001fc4:	68f9      	ldr	r1, [r7, #12]
 8001fc6:	690b      	ldr	r3, [r1, #16]
 8001fc8:	f362 0312 	bfi	r3, r2, #0, #19
 8001fcc:	610b      	str	r3, [r1, #16]
 8001fce:	e03b      	b.n	8002048 <USB_prvEpSend+0xf2>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	88db      	ldrh	r3, [r3, #6]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	891b      	ldrh	r3, [r3, #8]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	8912      	ldrh	r2, [r2, #8]
 8001fe2:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8001fe6:	817b      	strh	r3, [r7, #10]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8001fe8:	897b      	ldrh	r3, [r7, #10]
 8001fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fee:	b299      	uxth	r1, r3
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	6913      	ldr	r3, [r2, #16]
 8001ff4:	f361 43dc 	bfi	r3, r1, #19, #10
 8001ff8:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	88db      	ldrh	r3, [r3, #6]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002004:	68f9      	ldr	r1, [r7, #12]
 8002006:	690b      	ldr	r3, [r1, #16]
 8002008:	f362 0312 	bfi	r3, r2, #0, #19
 800200c:	610b      	str	r3, [r1, #16]

        if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	7a9b      	ldrb	r3, [r3, #10]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d118      	bne.n	8002048 <USB_prvEpSend+0xf2>
        {
            pxDEP->DxEPTSIZ.b.MULCNT = 1;
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	6913      	ldr	r3, [r2, #16]
 800201a:	2101      	movs	r1, #1
 800201c:	f361 735e 	bfi	r3, r1, #29, #2
 8002020:	6113      	str	r3, [r2, #16]

            /* If LSB of SOF frame number is one */
            if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <USB_prvEpSend+0xe8>
            {
                /* Set ODD frame */
                pxDEP->DxEPCTL.b.SODDFRM = 1;
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	6813      	ldr	r3, [r2, #0]
 8002036:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e004      	b.n	8002048 <USB_prvEpSend+0xf2>
            }
            else
            {
                /* Set DATA0 PID */
                pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002046:	6013      	str	r3, [r2, #0]
            }
        }
    }

#if (USB_OTG_DMA_SUPPORT != 0)
    if (USB_DMA_CONFIG(pxUSB) != 0)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d011      	beq.n	800207c <USB_prvEpSend+0x126>
    {
        /* Set DMA start address */
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	615a      	str	r2, [r3, #20]
        pxEP->Transfer.Data += usTransferSize;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	8afb      	ldrh	r3, [r7, #22]
 8002068:	441a      	add	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usTransferSize;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	88da      	ldrh	r2, [r3, #6]
 8002072:	8afb      	ldrh	r3, [r7, #22]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	b29a      	uxth	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	80da      	strh	r2, [r3, #6]
    }
#endif
    /* EP enable */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

    if ((pxEP->Transfer.Progress > 0) &&
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	88db      	ldrh	r3, [r3, #6]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <USB_prvEpSend+0x154>
        (USB_DMA_CONFIG(pxUSB) == 0))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800209a:	b2db      	uxtb	r3, r3
    if ((pxEP->Transfer.Progress > 0) &&
 800209c:	2b00      	cmp	r3, #0
 800209e:	d104      	bne.n	80020aa <USB_prvEpSend+0x154>
    {
        /* Push the nonzero packet to FIFO */
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	4619      	mov	r1, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fef2 	bl	8001e8e <USB_prvTransmitPacket>
    }
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <USB_prvEpReceive>:

/* Internal handling of EP reception */
static void USB_prvEpReceive(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b087      	sub	sp, #28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	3306      	adds	r3, #6
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	3358      	adds	r3, #88	; 0x58
 80020d6:	015b      	lsls	r3, r3, #5
 80020d8:	4413      	add	r3, r2
 80020da:	613b      	str	r3, [r7, #16]

    /* Zero Length Packet or EP0 with limited transfer size */
    if ((pxEP->Transfer.Progress == 0) || (ucEpNum == 0))
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	88db      	ldrh	r3, [r3, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <USB_prvEpReceive+0x38>
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d110      	bne.n	800210c <USB_prvEpReceive+0x5a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	6913      	ldr	r3, [r2, #16]
 80020ee:	2101      	movs	r1, #1
 80020f0:	f361 43dc 	bfi	r3, r1, #19, #10
 80020f4:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->MaxPacketSize;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	891b      	ldrh	r3, [r3, #8]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002100:	6939      	ldr	r1, [r7, #16]
 8002102:	690b      	ldr	r3, [r1, #16]
 8002104:	f362 0312 	bfi	r3, r2, #0, #19
 8002108:	610b      	str	r3, [r1, #16]
 800210a:	e01e      	b.n	800214a <USB_prvEpReceive+0x98>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	88db      	ldrh	r3, [r3, #6]
 8002110:	461a      	mov	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	891b      	ldrh	r3, [r3, #8]
 8002116:	4413      	add	r3, r2
 8002118:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	8912      	ldrh	r2, [r2, #8]
 800211e:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8002122:	81fb      	strh	r3, [r7, #14]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8002124:	89fb      	ldrh	r3, [r7, #14]
 8002126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212a:	b299      	uxth	r1, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	6913      	ldr	r3, [r2, #16]
 8002130:	f361 43dc 	bfi	r3, r1, #19, #10
 8002134:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	88db      	ldrh	r3, [r3, #6]
 800213a:	461a      	mov	r2, r3
 800213c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002140:	6939      	ldr	r1, [r7, #16]
 8002142:	690b      	ldr	r3, [r1, #16]
 8002144:	f362 0312 	bfi	r3, r2, #0, #19
 8002148:	610b      	str	r3, [r1, #16]
    }

#if (USB_OTG_DMA_SUPPORT != 0)
    if (USB_DMA_CONFIG(pxUSB) != 0)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <USB_prvEpReceive+0xb2>
    {
        /* Set DMA start address */
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	615a      	str	r2, [r3, #20]
    }
#endif

    /* Set DATA PID parity */
    if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	7a9b      	ldrb	r3, [r3, #10]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d112      	bne.n	8002192 <USB_prvEpReceive+0xe0>
    {
        /* If LSB of SOF frame number is one */
        if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <USB_prvEpReceive+0xd6>
        {
            /* Set ODD frame */
            pxDEP->DxEPCTL.b.SODDFRM = 1;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e004      	b.n	8002192 <USB_prvEpReceive+0xe0>
        }
        else
        {
            /* Set DATA0 PID */
            pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6013      	str	r3, [r2, #0]
        }
    }

    /* EP transfer request */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <USB_prvPrepareSetup>:

/* Set up EP0 to receive control data */
static void USB_prvPrepareSetup(USB_HandleType * pxUSB)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    /* Setup: 1 transfer with 8 byte data */
    pxUSB->Inst->OEP[0].DOEPTSIZ.w =
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <USB_prvPrepareSetup+0x48>)
 80021ba:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
          ( 1      << USB_OTG_DOEPTSIZ_PKTCNT_Pos)
        | ((3 * 8) << USB_OTG_DOEPTSIZ_XFRSIZ_Pos)
        | ( 3      << USB_OTG_DOEPTSIZ_STUPCNT_Pos);

#if (USB_OTG_DMA_SUPPORT != 0)
    if (USB_DMA_CONFIG(pxUSB) != 0)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <USB_prvPrepareSetup+0x3a>
    {
        pxUSB->Inst->OEP[0].DOEPDMA   = (uint32_t)&pxUSB->Setup;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	1d1a      	adds	r2, r3, #4
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
        pxUSB->Inst->OEP[0].DOEPCTL.w = USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 80021e2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    }
#endif
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	60080018 	.word	0x60080018

080021f8 <USB_prvInEpEventHandler>:

/* Handle events of a given IN endpoint */
static void USB_prvInEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3348      	adds	r3, #72	; 0x48
 8002210:	015b      	lsls	r3, r3, #5
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

    /* TXFE enable bit is extracted from common register */
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
            << USB_OTG_DIEPINT_TXFE_Pos) & USB_OTG_DIEPINT_TXFE;
 8002224:	01db      	lsls	r3, r3, #7
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	613b      	str	r3, [r7, #16]

    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	689a      	ldr	r2, [r3, #8]
            (pxUSB->Inst->DIEPMSK.w | ulEpTXFE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	430b      	orrs	r3, r1
    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w = USB_OTG_DIEPINT_TOC | USB_OTG_DIEPINT_ITTXFE
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	225a      	movs	r2, #90	; 0x5a
 8002244:	609a      	str	r2, [r3, #8]
            | USB_OTG_DIEPINT_INEPNE | USB_OTG_DIEPINT_EPDISD;

    /* Fill empty Tx FIFO with available data */
    if ((ulEpFlags & USB_OTG_DIEPINT_TXFE) != 0)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <USB_prvInEpEventHandler+0x62>
    {
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fe1a 	bl	8001e8e <USB_prvTransmitPacket>
    }
    /* Transfer completed */
    if ((ulEpFlags & USB_OTG_DIEPINT_XFRC) != 0)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02d      	beq.n	80022c0 <USB_prvInEpEventHandler+0xc8>
    {
        USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	3338      	adds	r3, #56	; 0x38
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	60bb      	str	r3, [r7, #8]

        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DIEPINT_XFRC;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2201      	movs	r2, #1
 8002276:	609a      	str	r2, [r3, #8]

        if (ucEpNum > 0)
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <USB_prvInEpEventHandler+0x90>
        {
            /* Transmission complete */
            USB_vDataInCallback(pxUSB, pxEP);
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fb36 	bl	80018f2 <USBD_EpInCallback>
                /* Transfer next packet */
                USB_prvEpSend(pxUSB, 0);
            }
        }
    }
}
 8002286:	e01b      	b.n	80022c0 <USB_prvInEpEventHandler+0xc8>
            if (pxEP->Transfer.Progress == 0)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	88db      	ldrh	r3, [r3, #6]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d113      	bne.n	80022b8 <USB_prvInEpEventHandler+0xc0>
                USB_vDataInCallback(pxUSB, pxEP);
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fb2d 	bl	80018f2 <USBD_EpInCallback>
                if ((USB_DMA_CONFIG(pxUSB) != 0) &&
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <USB_prvInEpEventHandler+0xc8>
                    (pxEP->Transfer.Length == 0))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	889b      	ldrh	r3, [r3, #4]
                if ((USB_DMA_CONFIG(pxUSB) != 0) &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <USB_prvInEpEventHandler+0xc8>
                    USB_prvPrepareSetup(pxUSB);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff7b 	bl	80021ac <USB_prvPrepareSetup>
}
 80022b6:	e003      	b.n	80022c0 <USB_prvInEpEventHandler+0xc8>
                USB_prvEpSend(pxUSB, 0);
 80022b8:	2100      	movs	r1, #0
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fe4b 	bl	8001f56 <USB_prvEpSend>
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <USB_prvOutEpEventHandler>:

/* Handle events of a given OUT endpoint */
static void USB_prvOutEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	3358      	adds	r3, #88	; 0x58
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	4413      	add	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
    uint32_t ulEpFlags = pxDEP->DxEPINT.w & pxUSB->Inst->DOEPMSK.w;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w =
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2230      	movs	r2, #48	; 0x30
 80022f6:	609a      	str	r2, [r3, #8]
            USB_OTG_DOEPINT_OTEPSPR |
#endif
            USB_OTG_DOEPINT_OTEPDIS;

    /* Setup stage complete */
    if ((ulEpFlags & USB_OTG_DOEPINT_STUP) != 0)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <USB_prvOutEpEventHandler+0x48>
    {
        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_STUP;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2208      	movs	r2, #8
 8002306:	609a      	str	r2, [r3, #8]

        /* Process SETUP Packet */
        USB_vSetupCallback(pxUSB);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff f889 	bl	8001420 <USBD_SetupCallback>
        {
            /* EP0 packetization requires software handling */
            USB_prvEpReceive(pxUSB, 0);
        }
    }
}
 800230e:	e048      	b.n	80023a2 <USB_prvOutEpEventHandler+0xda>
    else if ((ulEpFlags & USB_OTG_DOEPINT_XFRC) != 0)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d043      	beq.n	80023a2 <USB_prvOutEpEventHandler+0xda>
        USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	3306      	adds	r3, #6
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	3338      	adds	r3, #56	; 0x38
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	3304      	adds	r3, #4
 8002328:	60fb      	str	r3, [r7, #12]
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_XFRC;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2201      	movs	r2, #1
 800232e:	609a      	str	r2, [r3, #8]
        if (USB_DMA_CONFIG(pxUSB) != 0)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01e      	beq.n	800237e <USB_prvOutEpEventHandler+0xb6>
                    pxEP->MaxPacketSize - pxDEP->DxEPTSIZ.b.XFRSIZ;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	891a      	ldrh	r2, [r3, #8]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	b29b      	uxth	r3, r3
            uint16_t usTransferSize =
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	817b      	strh	r3, [r7, #10]
            pxEP->Transfer.Length += usTransferSize;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	889a      	ldrh	r2, [r3, #4]
 8002356:	897b      	ldrh	r3, [r7, #10]
 8002358:	4413      	add	r3, r2
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	809a      	strh	r2, [r3, #4]
            pxEP->Transfer.Data += usTransferSize;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	441a      	add	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]
            if ((ucEpNum + pxEP->Transfer.Length) == 0)
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	8892      	ldrh	r2, [r2, #4]
 8002372:	4413      	add	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <USB_prvOutEpEventHandler+0xb6>
                USB_prvPrepareSetup(pxUSB);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff17 	bl	80021ac <USB_prvPrepareSetup>
        if ((ucEpNum > 0) || (pxEP->Transfer.Progress == pxEP->Transfer.Length))
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <USB_prvOutEpEventHandler+0xc8>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	88da      	ldrh	r2, [r3, #6]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	889b      	ldrh	r3, [r3, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d104      	bne.n	800239a <USB_prvOutEpEventHandler+0xd2>
            USB_vDataOutCallback(pxUSB, pxEP);
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff facd 	bl	8001932 <USBD_EpOutCallback>
}
 8002398:	e003      	b.n	80023a2 <USB_prvOutEpEventHandler+0xda>
            USB_prvEpReceive(pxUSB, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fe88 	bl	80020b2 <USB_prvEpReceive>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <USB_prvCtrlEpOpen>:

/* Opens EP0 bidirectional dedicated control endpoint. */
static void USB_prvCtrlEpOpen(USB_HandleType * pxUSB)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
    /* Activate Endpoint 0 interrupts */
    SET_BIT(pxUSB->Inst->DAINTMSK.w,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 80023c2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
            (1 << (0 + USB_OTG_DAINTMSK_IEPM_Pos)) |
            (1 << (0 + USB_OTG_DAINTMSK_OEPM_Pos)));

    /* Check if currently inactive */
    if (pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP == 0)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 80023ce:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d12e      	bne.n	8002436 <USB_prvCtrlEpOpen+0x8c>
    {
        pxUSB->Inst->IEP[0].DIEPCTL.b.MPSIZ  = pxUSB->EP.IN[0].MaxPacketSize;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	460b      	mov	r3, r1
 80023e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e8:	b299      	uxth	r1, r3
 80023ea:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80023ee:	f361 030a 	bfi	r3, r1, #0, #11
 80023f2:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80023fe:	f36f 4393 	bfc	r3, #18, #2
 8002402:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.TXFNUM = 0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800240e:	f36f 5399 	bfc	r3, #22, #4
 8002412:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.SD0PID_SEVNFRM = 1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP = 1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800242e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002432:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
    }
    /* Check if currently inactive */
    if (pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP == 0)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 800243e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d126      	bne.n	8002496 <USB_prvCtrlEpOpen+0xec>
    {
        pxUSB->Inst->OEP[0].DOEPCTL.b.MPSIZ  = pxUSB->EP.OUT[0].MaxPacketSize;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	460b      	mov	r3, r1
 8002454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002458:	b299      	uxth	r1, r3
 800245a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800245e:	f361 030a 	bfi	r3, r1, #0, #11
 8002462:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800246e:	f36f 4393 	bfc	r3, #18, #2
 8002472:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.SD0PID_SEVNFRM = 1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP = 1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800248e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002492:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    }

    /* prepare receive SETUP packet */
    USB_prvPrepareSetup(pxUSB);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fe88 	bl	80021ac <USB_prvPrepareSetup>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <USB_prvReset>:
}
#endif

/* Resets the USB OTG core */
static void USB_prvReset(USB_HandleType * pxUSB)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    if (USB_REG_BIT(pxUSB,GRSTCTL,AHBIDL) != 0)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <USB_prvReset+0x24>
    {
        USB_REG_BIT(pxUSB,GRSTCTL,CSRST) = 1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	6913      	ldr	r3, [r2, #16]
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6113      	str	r3, [r2, #16]
    }
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <USB_prvPhyInit>:

/* Initializes the selected PHY for the USB */
static void USB_prvPhyInit(USB_HandleType * pxUSB, USB_PHYType ePHY)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
#ifdef USB_OTG_HS
    if (IS_USB_OTG_HS(pxUSB->Inst) && (ePHY != USB_PHY_EMBEDDED_FS))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <USB_prvPhyInit+0x88>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d124      	bne.n	8002534 <USB_prvPhyInit+0x60>
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d021      	beq.n	8002534 <USB_prvPhyInit+0x60>
        }
        else
#endif
        {
            /* ULPI HS PHY */
            RCC_vClockEnable(RCC_POS_OTG_HS_ULPI);
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <USB_prvPhyInit+0x8c>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <USB_prvPhyInit+0x8c>)
 80024fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <USB_prvPhyInit+0x8c>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]

            USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002512:	f36f 4310 	bfc	r3, #16, #1
 8002516:	6393      	str	r3, [r2, #56]	; 0x38

            CLEAR_BIT(pxUSB->Inst->GUSBCFG.w,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68d2      	ldr	r2, [r2, #12]
 8002522:	f423 03e4 	bic.w	r3, r3, #7471104	; 0x720000
 8002526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800252a:	60d3      	str	r3, [r2, #12]
                USB_OTG_GUSBCFG_TSDPS  | USB_OTG_GUSBCFG_ULPIFSLS |
                USB_OTG_GUSBCFG_PHYSEL |
                USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
        }

        USB_prvReset(pxUSB);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffb9 	bl	80024a4 <USB_prvReset>
 8002532:	e00f      	b.n	8002554 <USB_prvPhyInit+0x80>
    }
    else
#endif /* USB_OTG_HS */
    {
        /* Select FS Embedded PHY */
        USB_REG_BIT(pxUSB, GUSBCFG, PHYSEL) = 1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68d3      	ldr	r3, [r2, #12]
 800253a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253e:	60d3      	str	r3, [r2, #12]
        USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 1;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254a:	6393      	str	r3, [r2, #56]	; 0x38

        USB_prvReset(pxUSB);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ffa9 	bl	80024a4 <USB_prvReset>
    }
}
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40040000 	.word	0x40040000
 8002560:	40023800 	.word	0x40023800

08002564 <USB_vDevInit>:
 * @brief Initializes the USB OTG peripheral using the setup configuration
 * @param pxUSB: pointer to the USB handle structure
 * @param pxConfig: USB setup configuration
 */
void USB_vDevInit(USB_HandleType * pxUSB, const USB_InitType * pxConfig)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
    /* Enable peripheral clock */
#ifdef USB_OTG_HS
    if (IS_USB_OTG_HS(pxUSB->Inst))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4a64      	ldr	r2, [pc, #400]	; (8002704 <USB_vDevInit+0x1a0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d10e      	bne.n	8002596 <USB_vDevInit+0x32>
    {
        RCC_vClockEnable(RCC_POS_OTG_HS);
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	4b62      	ldr	r3, [pc, #392]	; (8002708 <USB_vDevInit+0x1a4>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4a61      	ldr	r2, [pc, #388]	; (8002708 <USB_vDevInit+0x1a4>)
 8002582:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002586:	6313      	str	r3, [r2, #48]	; 0x30
 8002588:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <USB_vDevInit+0x1a4>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	e013      	b.n	80025be <USB_vDevInit+0x5a>
    }
    else
#endif
    {
        RCC_vClockEnable(RCC_POS_OTG_FS);
 8002596:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <USB_vDevInit+0x1a4>)
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	4a5b      	ldr	r2, [pc, #364]	; (8002708 <USB_vDevInit+0x1a4>)
 800259c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a0:	6353      	str	r3, [r2, #52]	; 0x34
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b58      	ldr	r3, [pc, #352]	; (8002708 <USB_vDevInit+0x1a4>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a57      	ldr	r2, [pc, #348]	; (8002708 <USB_vDevInit+0x1a4>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b55      	ldr	r3, [pc, #340]	; (8002708 <USB_vDevInit+0x1a4>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    }

    /* Initialize handle variables */
    pxUSB->EP.OUT[0].MaxPacketSize =
    pxUSB->EP.IN [0].MaxPacketSize = USBD_EP0_MAX_PACKET_SIZE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    pxUSB->EP.OUT[0].MaxPacketSize =
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    pxUSB->EP.OUT[0].Type =
    pxUSB->EP.IN [0].Type = USB_EP_TYPE_CONTROL;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    pxUSB->EP.OUT[0].Type =
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2203      	movs	r2, #3
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Disable interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	6893      	ldr	r3, [r2, #8]
 80025f4:	f36f 0300 	bfc	r3, #0, #1
 80025f8:	6093      	str	r3, [r2, #8]

    /* Initialize dependencies (pins, IRQ lines) */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepInit, pxUSB);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <USB_vDevInit+0xa6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3

    /* Initialize selected PHY */
    USB_prvPhyInit(pxUSB, pxConfig->PHY);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	79db      	ldrb	r3, [r3, #7]
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff5f 	bl	80024d4 <USB_prvPhyInit>

#if (USB_OTG_DMA_SUPPORT != 0)
    /* Set dedicated DMA */
    if (pxConfig->DMA != DISABLE)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	7a1b      	ldrb	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <USB_vDevInit+0xca>
    {
        SET_BIT(pxUSB->Inst->GAHBCFG.w,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f042 0226 	orr.w	r2, r2, #38	; 0x26
 800262c:	609a      	str	r2, [r3, #8]
    }
#endif

    {
        uint8_t ucEpNum;
        uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a34      	ldr	r2, [pc, #208]	; (8002704 <USB_vDevInit+0x1a0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <USB_vDevInit+0xd8>
 8002638:	2306      	movs	r3, #6
 800263a:	e000      	b.n	800263e <USB_vDevInit+0xda>
 800263c:	2304      	movs	r3, #4
 800263e:	75bb      	strb	r3, [r7, #22]

        /* Set Device Mode */
        MODIFY_REG(pxUSB->Inst->GUSBCFG.w,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002652:	60da      	str	r2, [r3, #12]
                USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD,
                USB_OTG_GUSBCFG_FDMOD);

        /* Immediate soft disconnect */
        USB_REG_BIT(pxUSB,DCTL,SDIS) = 1;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            SET_BIT(pxUSB->Inst->GOTGCTL.w,
                    USB_OTG_GOTGCTL_BVALOEN | USB_OTG_GOTGCTL_BVALOVAL);
        }
#else
        {
            USB_REG_BIT(pxUSB,GCCFG,NOVBUSSENS) = 1;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800266a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800266e:	6393      	str	r3, [r2, #56]	; 0x38
        }
#endif

        /* Restart the Phy Clock */
        pxUSB->Inst->PCGCCTL.w = 0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00

#ifdef USB_OTG_HS
        /* HS PHY interfaces */
        if (pxConfig->PHY != USB_PHY_EMBEDDED_FS)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	79db      	ldrb	r3, [r3, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <USB_vDevInit+0x130>
        {
            pxUSB->Inst->DCFG.b.DSPD = 0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800268a:	f36f 0301 	bfc	r3, #0, #2
 800268e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8002692:	e007      	b.n	80026a4 <USB_vDevInit+0x140>
        }
        else
#endif
        {
            /* Internal FS Phy */
            pxUSB->Inst->DCFG.b.DSPD = 3;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800269c:	f043 0303 	orr.w	r3, r3, #3
 80026a0:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        }

        /* Init endpoints */
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]
 80026a8:	e00f      	b.n	80026ca <USB_vDevInit+0x166>
        {
            USB_vEpClose(pxUSB, ucEpNum);
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f928 	bl	8002904 <USB_vEpClose>
            USB_vEpClose(pxUSB, 0x80 | ucEpNum);
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f920 	bl	8002904 <USB_vEpClose>
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	3301      	adds	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
 80026ca:	7dfa      	ldrb	r2, [r7, #23]
 80026cc:	7dbb      	ldrb	r3, [r7, #22]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3eb      	bcc.n	80026aa <USB_vDevInit+0x146>
        }
        USB_REG_BIT(pxUSB,DIEPMSK,TXFURM) = 0;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 80026da:	f36f 2308 	bfc	r3, #8, #1
 80026de:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810

#if (USB_OTG_DMA_SUPPORT != 0)
        if (USB_DMA_CONFIG(pxUSB) != 0)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <USB_vDevInit+0x198>
        {
            /*Set threshold parameters */
            pxUSB->Inst->DTHRCTL.w = (
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <USB_vDevInit+0x1a8>)
 80026f8:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
            SET_BIT(pxUSB->Inst->GLPMCFG.w,
                USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
        }
#endif
    }
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40040000 	.word	0x40040000
 8002708:	40023800 	.word	0x40023800
 800270c:	00810103 	.word	0x00810103

08002710 <USB_vDevStart_IT>:
/**
 * @brief Starts the USB device operation
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevStart_IT(USB_HandleType * pxUSB)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    uint32_t ulGINTMSK;

    /* Clear any pending interrupts except SRQ */
    pxUSB->Inst->GINTSTS.w  = ~USB_OTG_GINTSTS_SRQINT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002720:	615a      	str	r2, [r3, #20]
    USB_prvClearEpInts(pxUSB);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fb1a 	bl	8001d5c <USB_prvClearEpInts>

    /* Enable interrupts matching to the Device mode ONLY */
    ulGINTMSK = USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <USB_vDevStart_IT+0x78>)
 800272a:	60fb      	str	r3, [r7, #12]
                USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_WUIM   |
                USB_OTG_GINTMSK_RXFLVLM;

    /* When DMA is used, Rx data isn't read by IRQHandler */
    if (USB_DMA_CONFIG(pxUSB) != 0)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <USB_vDevStart_IT+0x34>
    {
        CLEAR_BIT(ulGINTMSK, USB_OTG_GINTMSK_RXFLVLM);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0310 	bic.w	r3, r3, #16
 8002742:	60fb      	str	r3, [r7, #12]
        SET_BIT(ulGINTMSK, USB_OTG_GINTMSK_LPMINTM);
    }
#endif

    /* Apply interrupts selection */
    pxUSB->Inst->GINTMSK.w = ulGINTMSK;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	619a      	str	r2, [r3, #24]

    /* Also configure device endpoint interrupts */
    pxUSB->Inst->DIEPMSK.w = USB_OTG_DIEPMSK_XFRCM
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	220b      	movs	r2, #11
 8002752:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
            | USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_EPDM;
    pxUSB->Inst->DOEPMSK.w = USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_STUPM
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	222b      	movs	r2, #43	; 0x2b
 800275c:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
#ifdef USB_OTG_DOEPMSK_OTEPSPRM
            | USB_OTG_DOEPMSK_OTEPSPRM
#endif
            | USB_OTG_DOEPMSK_EPDM;
    pxUSB->Inst->DAINTMSK.w = 0;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

    USB_prvConnectCtrl(pxUSB, ENABLE);
 800276a:	2101      	movs	r1, #1
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fab9 	bl	8001ce4 <USB_prvConnectCtrl>

    /* Enable global interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	6893      	ldr	r3, [r2, #8]
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6093      	str	r3, [r2, #8]
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	800c3810 	.word	0x800c3810

0800278c <USB_vSetAddress>:
 * @brief Sets the USB device address
 * @param pxUSB: pointer to the USB handle structure
 * @param ucAddress: new device address
 */
void USB_vSetAddress(USB_HandleType * pxUSB, uint8_t ucAddress)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->DCFG.b.DAD = ucAddress;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a2:	b2d9      	uxtb	r1, r3
 80027a4:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80027a8:	f361 130a 	bfi	r3, r1, #4, #7
 80027ac:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <USB_vCtrlEpOpen>:
/**
 * @brief Sets endpoint buffers and opens the default control endpoint.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vCtrlEpOpen(USB_HandleType * pxUSB)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    /* Allocate FIFO space for all used endpoints based on MPS */
    USB_vAllocateEPs(pxUSB);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fb27 	bl	8002e18 <USB_vAllocateEPs>

    /* Open EP0 */
    USB_prvCtrlEpOpen(pxUSB);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fded 	bl	80023aa <USB_prvCtrlEpOpen>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <USB_vEpOpen>:
void USB_vEpOpen(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        USB_EndPointType    eType,
        uint16_t            usMaxPacketSize)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	70fb      	strb	r3, [r7, #3]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70bb      	strb	r3, [r7, #2]
 80027ee:	4613      	mov	r3, r2
 80027f0:	803b      	strh	r3, [r7, #0]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 80027f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da08      	bge.n	800280c <USB_vEpOpen+0x34>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	3348      	adds	r3, #72	; 0x48
 8002806:	015b      	lsls	r3, r3, #5
 8002808:	4413      	add	r3, r2
 800280a:	e005      	b.n	8002818 <USB_vEpOpen+0x40>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	3358      	adds	r3, #88	; 0x58
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	4413      	add	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 800281a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da08      	bge.n	8002834 <USB_vEpOpen+0x5c>
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	3338      	adds	r3, #56	; 0x38
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	e006      	b.n	8002842 <USB_vEpOpen+0x6a>
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	3306      	adds	r3, #6
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	3338      	adds	r3, #56	; 0x38
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	3304      	adds	r3, #4
 8002842:	613b      	str	r3, [r7, #16]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	73fb      	strb	r3, [r7, #15]

    pxEP->MaxPacketSize = usMaxPacketSize;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	883a      	ldrh	r2, [r7, #0]
 8002850:	811a      	strh	r2, [r3, #8]
    pxEP->Type = eType;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	78ba      	ldrb	r2, [r7, #2]
 8002856:	729a      	strb	r2, [r3, #10]

    /* Activate Endpoint interrupts */
    if (ucEpAddress > 0x7F)
 8002858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800285c:	2b00      	cmp	r3, #0
 800285e:	da0e      	bge.n	800287e <USB_vEpOpen+0xa6>
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4619      	mov	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	430a      	orrs	r2, r1
 8002878:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 800287c:	e00e      	b.n	800289c <USB_vEpOpen+0xc4>
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));
    }
    else
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	3310      	adds	r3, #16
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	4619      	mov	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	430a      	orrs	r2, r1
 8002898:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* Check if currently inactive */
    if (pxDEP->DxEPCTL.b.USBAEP == 0)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d126      	bne.n	80028f8 <USB_vEpOpen+0x120>
    {
        pxDEP->DxEPCTL.b.MPSIZ  = pxEP->MaxPacketSize;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	891b      	ldrh	r3, [r3, #8]
 80028ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b2:	b299      	uxth	r1, r3
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	6813      	ldr	r3, [r2, #0]
 80028b8:	f361 030a 	bfi	r3, r1, #0, #11
 80028bc:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.EPTYP  = pxEP->Type;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	7a9b      	ldrb	r3, [r3, #10]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	b2d9      	uxtb	r1, r3
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	f361 4393 	bfi	r3, r1, #18, #2
 80028d0:	6013      	str	r3, [r2, #0]

        /* Only valid for IN EP, the field is reserved for OUT EPs */
        pxDEP->DxEPCTL.b.TXFNUM = ucEpNum;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	b2d9      	uxtb	r1, r3
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	6813      	ldr	r3, [r2, #0]
 80028de:	f361 5399 	bfi	r3, r1, #22, #4
 80028e2:	6013      	str	r3, [r2, #0]

        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.USBAEP = 1;
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	6013      	str	r3, [r2, #0]
    }
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <USB_vEpClose>:
 * @brief Closes an active endpoint (EP0 shall not be closed).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClose(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8002910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002914:	2b00      	cmp	r3, #0
 8002916:	da08      	bge.n	800292a <USB_vEpClose+0x26>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	015b      	lsls	r3, r3, #5
 8002926:	4413      	add	r3, r2
 8002928:	e005      	b.n	8002936 <USB_vEpClose+0x32>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	3358      	adds	r3, #88	; 0x58
 8002932:	015b      	lsls	r3, r3, #5
 8002934:	4413      	add	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	72fb      	strb	r3, [r7, #11]

    /* Deactivate Endpoint */
    if (ucEpAddress > 0x7F)
 8002940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da23      	bge.n	8002990 <USB_vEpClose+0x8c>
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8002950:	7afb      	ldrb	r3, [r7, #11]
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	400a      	ands	r2, r1
 8002962:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_IEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800296e:	7afb      	ldrb	r3, [r7, #11]
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	400a      	ands	r2, r1
 8002980:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));

        /* Flush dedicated FIFO */
        USB_prvFlushTxFifo(pxUSB, ucEpNum);
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff f9c6 	bl	8001d1a <USB_prvFlushTxFifo>
 800298e:	e01f      	b.n	80029d0 <USB_vEpClose+0xcc>
    }
    else
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	3310      	adds	r3, #16
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	400a      	ands	r2, r1
 80029ac:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_OEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80029b8:	7afb      	ldrb	r3, [r7, #11]
 80029ba:	3310      	adds	r3, #16
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	400a      	ands	r2, r1
 80029cc:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* If a transfer is ongoing, interrupt with NACK */
    if (pxDEP->DxEPCTL.b.EPENA != 0)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <USB_vEpClose+0xe4>
    {
        pxDEP->DxEPCTL.w = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e002      	b.n	80029ee <USB_vEpClose+0xea>
    }
    else
    {
        pxDEP->DxEPCTL.w = 0;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    }

    pxDEP->DxEPTSIZ.w = 0;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
    pxDEP->DxEPINT.w  = 0xFF;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	609a      	str	r2, [r3, #8]
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <USB_vEpSetStall>:
 * @brief Set a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpSetStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8002a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	da08      	bge.n	8002a28 <USB_vEpSetStall+0x26>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	3348      	adds	r3, #72	; 0x48
 8002a22:	015b      	lsls	r3, r3, #5
 8002a24:	4413      	add	r3, r2
 8002a26:	e005      	b.n	8002a34 <USB_vEpSetStall+0x32>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	3358      	adds	r3, #88	; 0x58
 8002a30:	015b      	lsls	r3, r3, #5
 8002a32:	4413      	add	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

    if (pxDEP->DxEPCTL.b.EPENA == 0)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <USB_vEpSetStall+0x4c>
    {
        pxDEP->DxEPCTL.b.EPDIS = 0;
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	f36f 739e 	bfc	r3, #30, #1
 8002a4c:	6013      	str	r3, [r2, #0]
    }
    pxDEP->DxEPCTL.b.STALL = 1;
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	6813      	ldr	r3, [r2, #0]
 8002a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a56:	6013      	str	r3, [r2, #0]

    /* STALL-ed EP must still be able to receive SETUP */
    if (ucEpAddress == 0)
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <USB_vEpSetStall+0x62>
    {
        USB_prvPrepareSetup(pxUSB);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fba4 	bl	80021ac <USB_prvPrepareSetup>
    }
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <USB_vEpClearStall>:
 * @brief Clear a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpClearStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8002a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da08      	bge.n	8002a92 <USB_vEpClearStall+0x26>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3348      	adds	r3, #72	; 0x48
 8002a8c:	015b      	lsls	r3, r3, #5
 8002a8e:	4413      	add	r3, r2
 8002a90:	e005      	b.n	8002a9e <USB_vEpClearStall+0x32>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	3358      	adds	r3, #88	; 0x58
 8002a9a:	015b      	lsls	r3, r3, #5
 8002a9c:	4413      	add	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    pxDEP->DxEPCTL.b.STALL = 0;
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	f36f 5355 	bfc	r3, #21, #1
 8002aa8:	6013      	str	r3, [r2, #0]

    /* INTERRUPT || BULK -> set DATA0 PID */
    if (pxDEP->DxEPCTL.b.EPTYP >= USB_EP_TYPE_BULK)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c3 4381 	ubfx	r3, r3, #18, #2
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d904      	bls.n	8002ac2 <USB_vEpClearStall+0x56>
    {
        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	6813      	ldr	r3, [r2, #0]
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6013      	str	r3, [r2, #0]
    }
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <USB_vEpReceive>:
void USB_vEpReceive(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        uint8_t *           pucData,
        uint16_t            usLength)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	460b      	mov	r3, r1
 8002adc:	72fb      	strb	r3, [r7, #11]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpAddress];
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	3306      	adds	r3, #6
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	3338      	adds	r3, #56	; 0x38
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4413      	add	r3, r2
 8002aee:	3304      	adds	r3, #4
 8002af0:	617b      	str	r3, [r7, #20]

    /* setup transfer */
    pxEP->Transfer.Data       = pucData;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	893a      	ldrh	r2, [r7, #8]
 8002afc:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = 0;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	809a      	strh	r2, [r3, #4]

    USB_prvEpReceive(pxUSB, ucEpAddress);
 8002b04:	7afb      	ldrb	r3, [r7, #11]
 8002b06:	4619      	mov	r1, r3
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff fad2 	bl	80020b2 <USB_prvEpReceive>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <USB_vEpSend>:
void USB_vEpSend(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        const uint8_t *     pucData,
        uint16_t            usLength)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	461a      	mov	r2, r3
 8002b22:	460b      	mov	r3, r1
 8002b24:	72fb      	strb	r3, [r7, #11]
 8002b26:	4613      	mov	r3, r2
 8002b28:	813b      	strh	r3, [r7, #8]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	75fb      	strb	r3, [r7, #23]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	3338      	adds	r3, #56	; 0x38
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	613b      	str	r3, [r7, #16]

    /* setup and start the transfer */
    pxEP->Transfer.Data       = (uint8_t*)pucData;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	893a      	ldrh	r2, [r7, #8]
 8002b4a:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = usLength;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	893a      	ldrh	r2, [r7, #8]
 8002b50:	809a      	strh	r2, [r3, #4]

    USB_prvEpSend(pxUSB, ucEpNum);
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	4619      	mov	r1, r3
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff f9fd 	bl	8001f56 <USB_prvEpSend>
}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <USB_vDevIRQHandler>:
 * @brief USB interrupt handler that provides event-driven peripheral management
 *        and handle callbacks.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevIRQHandler(USB_HandleType * pxUSB)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    uint32_t ulGINT = pxUSB->Inst->GINTSTS.w & pxUSB->Inst->GINTMSK.w;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61fb      	str	r3, [r7, #28]

    if (ulGINT != 0)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8143 	beq.w	8002e0a <USB_vDevIRQHandler+0x2a6>
            struct {
                uint16_t IEPINT;
                uint16_t OEPINT;
            }b;
            uint32_t w;
        }xDAINT = { .w = pxUSB->Inst->DAINT.w & pxUSB->Inst->DAINTMSK.w };
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

        /* Rx FIFO level reached */
        if ((ulGINT & USB_OTG_GINTSTS_RXFLVL) != 0)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03d      	beq.n	8002c1e <USB_vDevIRQHandler+0xba>
        {
            uint32_t ulGRXSTSP  = pxUSB->Inst->GRXSTSP.w;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	61bb      	str	r3, [r7, #24]
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
                                            >> USB_OTG_GRXSTSP_BCNT_Pos;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	b29b      	uxth	r3, r3
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
 8002bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb4:	82fb      	strh	r3, [r7, #22]
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
                                            >> USB_OTG_GRXSTSP_EPNUM_Pos;
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	b2db      	uxtb	r3, r3
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	757b      	strb	r3, [r7, #21]
            USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8002bc0:	7d7b      	ldrb	r3, [r7, #21]
 8002bc2:	3306      	adds	r3, #6
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	3338      	adds	r3, #56	; 0x38
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	613b      	str	r3, [r7, #16]

            switch (ulGRXSTSP & USB_OTG_GRXSTSP_PKTSTS_Msk)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 8002bd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bda:	d003      	beq.n	8002be4 <USB_vDevIRQHandler+0x80>
 8002bdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002be0:	d015      	beq.n	8002c0e <USB_vDevIRQHandler+0xaa>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
                            sizeof(pxUSB->Setup));
                    break;

                default:
                    break;
 8002be2:	e01d      	b.n	8002c20 <USB_vDevIRQHandler+0xbc>
                    USB_prvReadFifo(pxUSB, pxEP->Transfer.Data, usDataCount);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	8afa      	ldrh	r2, [r7, #22]
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff f91d 	bl	8001e2c <USB_prvReadFifo>
                    pxEP->Transfer.Length += usDataCount;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	889a      	ldrh	r2, [r3, #4]
 8002bf6:	8afb      	ldrh	r3, [r7, #22]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	809a      	strh	r2, [r3, #4]
                    pxEP->Transfer.Data += usDataCount;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	8afb      	ldrh	r3, [r7, #22]
 8002c06:	441a      	add	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	601a      	str	r2, [r3, #0]
                    break;
 8002c0c:	e008      	b.n	8002c20 <USB_vDevIRQHandler+0xbc>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2208      	movs	r2, #8
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff f908 	bl	8001e2c <USB_prvReadFifo>
                    break;
 8002c1c:	e000      	b.n	8002c20 <USB_vDevIRQHandler+0xbc>
            }
        }
 8002c1e:	bf00      	nop

        /* OUT endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_OEPINT) != 0)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01a      	beq.n	8002c60 <USB_vDevIRQHandler+0xfc>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c30:	e013      	b.n	8002c5a <USB_vDevIRQHandler+0xf6>
            {
                if ((xDAINT.b.OEPINT & 1) != 0)
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <USB_vDevIRQHandler+0xe4>
                {
                    USB_prvOutEpEventHandler(pxUSB, ucEpNum);
 8002c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fb40 	bl	80022c8 <USB_prvOutEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 8002c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c52:	89fb      	ldrh	r3, [r7, #14]
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	81fb      	strh	r3, [r7, #14]
 8002c5a:	89fb      	ldrh	r3, [r7, #14]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e8      	bne.n	8002c32 <USB_vDevIRQHandler+0xce>
                }
            }
        }

        /* IN endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_IEPINT) != 0)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01a      	beq.n	8002ca0 <USB_vDevIRQHandler+0x13c>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c70:	e013      	b.n	8002c9a <USB_vDevIRQHandler+0x136>
            {
                if ((xDAINT.b.IEPINT & 1) != 0)
 8002c72:	89bb      	ldrh	r3, [r7, #12]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <USB_vDevIRQHandler+0x124>
                {
                    USB_prvInEpEventHandler(pxUSB, ucEpNum);
 8002c7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fab8 	bl	80021f8 <USB_prvInEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 8002c88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c92:	89bb      	ldrh	r3, [r7, #12]
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	81bb      	strh	r3, [r7, #12]
 8002c9a:	89bb      	ldrh	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e8      	bne.n	8002c72 <USB_vDevIRQHandler+0x10e>
                }
            }
        }

        /* Handle Reset Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBRST) != 0)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01e      	beq.n	8002ce8 <USB_vDevIRQHandler+0x184>
        {
            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, USBRST);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cb2:	615a      	str	r2, [r3, #20]

            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            /* Stop any ongoing Remote Wakeup signaling and EP0 transfers */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8002cc4:	f36f 0300 	bfc	r3, #0, #1
 8002cc8:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            USB_prvFlushRxFifo(pxUSB);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff f837 	bl	8001d40 <USB_prvFlushRxFifo>
            USB_prvFlushTxFifo(pxUSB, 0);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff f820 	bl	8001d1a <USB_prvFlushTxFifo>

            /* Clear EP interrupt flags */
            USB_prvClearEpInts(pxUSB);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff f83e 	bl	8001d5c <USB_prvClearEpInts>

            /* Set default address (0) */
            USB_vSetAddress(pxUSB, 0);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff fd52 	bl	800278c <USB_vSetAddress>
        }

        /* Handle Enumeration done Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_ENUMDNE) != 0)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d03f      	beq.n	8002d72 <USB_vDevIRQHandler+0x20e>
        {
            USB_SpeedType eSpeed = USB_SPEED_FULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, ENUMDNE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d00:	615a      	str	r2, [r3, #20]

            /* Clear global IN NAK */
            USB_REG_BIT(pxUSB,DCTL,CGINAK) = 1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804

#ifdef USB_OTG_HS
            /* High speed enumerated */
            if (pxUSB->Inst->DSTS.b.ENUMSPD == 0)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002d1a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <USB_vDevIRQHandler+0x1d6>
            {
                eSpeed = USB_SPEED_HIGH;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                pxUSB->Inst->GUSBCFG.b.TRDT = 9;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	68d3      	ldr	r3, [r2, #12]
 8002d30:	2109      	movs	r1, #9
 8002d32:	f361 238d 	bfi	r3, r1, #10, #4
 8002d36:	60d3      	str	r3, [r2, #12]
 8002d38:	e015      	b.n	8002d66 <USB_vDevIRQHandler+0x202>
            {
                /* Full speed enumeration */
                uint32_t ulTRDT;

                /* Get most suitable value depending on AHB frequency */
                ulTRDT = 224000000 / RCC_ulClockFreq_Hz(HCLK);
 8002d3a:	f001 f9ab 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a34      	ldr	r2, [pc, #208]	; (8002e14 <USB_vDevIRQHandler+0x2b0>)
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	623b      	str	r3, [r7, #32]
                if (ulTRDT < 6)
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	2b05      	cmp	r3, #5
 8002d4c:	d801      	bhi.n	8002d52 <USB_vDevIRQHandler+0x1ee>
                {
                    ulTRDT = 6;
 8002d4e:	2306      	movs	r3, #6
 8002d50:	623b      	str	r3, [r7, #32]
                }
                pxUSB->Inst->GUSBCFG.b.TRDT = ulTRDT;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	b2d9      	uxtb	r1, r3
 8002d5e:	68d3      	ldr	r3, [r2, #12]
 8002d60:	f361 238d 	bfi	r3, r1, #10, #4
 8002d64:	60d3      	str	r3, [r2, #12]
            }

            /* Notify device handler */
            USB_vResetCallback(pxUSB, eSpeed);
 8002d66:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fe f92a 	bl	8000fc6 <USBD_ResetCallback>
        }

        /* Handle Resume Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_WKUINT) != 0)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da18      	bge.n	8002daa <USB_vDevIRQHandler+0x246>
        {
            /* Stop any ongoing Remote Wakeup signaling */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8002d80:	f36f 0300 	bfc	r3, #0, #1
 8002d84:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804

            USB_FLAG_CLEAR(pxUSB, WKUINT);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d90:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Resume, pxUSB);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <USB_vDevIRQHandler+0x23e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3

            /* LPM state is changed after Resume callback
             * -> possible to determine exited suspend level */
            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
        }
#endif

        /* Handle Suspend Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBSUSP) != 0)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d019      	beq.n	8002de8 <USB_vDevIRQHandler+0x284>
        {
            USB_FLAG_CLEAR(pxUSB, USBSUSP);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dbc:	615a      	str	r2, [r3, #20]

            if (USB_REG_BIT(pxUSB,DSTS,SUSPSTS) != 0)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002dc6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <USB_vDevIRQHandler+0x284>
            {
                /* Set the target Link State */
                pxUSB->LinkState = USB_LINK_STATE_SUSPEND;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <USB_vDevIRQHandler+0x284>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
            }
        }

        /* Handle SOF Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_SOF) != 0)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <USB_vDevIRQHandler+0x2a6>
        {
            USB_FLAG_CLEAR(pxUSB, SOF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2208      	movs	r2, #8
 8002df8:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.SOF, pxUSB);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <USB_vDevIRQHandler+0x2a6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
        }
    }
}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	0d59f800 	.word	0x0d59f800

08002e18 <USB_vAllocateEPs>:
 * @brief Configure peripheral FIFO allocation for endpoints
 *        after device initialization and before starting the USB operation.
 * @param pxUSB: pointer to the USB handle structure
 */
__weak void USB_vAllocateEPs(USB_HandleType * pxUSB)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    XPD_ReturnType eResult = XPD_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	74fb      	strb	r3, [r7, #19]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <USB_vAllocateEPs+0x12c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <USB_vAllocateEPs+0x1a>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e000      	b.n	8002e34 <USB_vAllocateEPs+0x1c>
 8002e32:	2304      	movs	r3, #4
 8002e34:	74bb      	strb	r3, [r7, #18]
    uint32_t ulMinFifoSizeVal = 16;
 8002e36:	2310      	movs	r3, #16
 8002e38:	60fb      	str	r3, [r7, #12]
    uint32_t ulFifoSize = ulMinFifoSizeVal * sizeof(uint32_t);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
    uint32_t ulFifoOffset;
    uint32_t ulFifoLimit = USB_TOTAL_FIFO_SIZE(pxUSB);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a3f      	ldr	r2, [pc, #252]	; (8002f44 <USB_vAllocateEPs+0x12c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d102      	bne.n	8002e50 <USB_vAllocateEPs+0x38>
 8002e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4e:	e001      	b.n	8002e54 <USB_vAllocateEPs+0x3c>
 8002e50:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002e54:	60bb      	str	r3, [r7, #8]

    /* Configure the global Receive FIFO based on the largest requested OUT EP size */
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	77fb      	strb	r3, [r7, #31]
 8002e5a:	e015      	b.n	8002e88 <USB_vAllocateEPs+0x70>
    {
        if (pxUSB->EP.OUT[ucEpNum].MaxPacketSize > ulFifoSize)
 8002e5c:	7ffb      	ldrb	r3, [r7, #31]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	330a      	adds	r3, #10
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d207      	bcs.n	8002e82 <USB_vAllocateEPs+0x6a>
        {
            ulFifoSize = pxUSB->EP.OUT[ucEpNum].MaxPacketSize;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	330a      	adds	r3, #10
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	3301      	adds	r3, #1
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	7ffa      	ldrb	r2, [r7, #31]
 8002e8a:	7cbb      	ldrb	r3, [r7, #18]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d3e5      	bcc.n	8002e5c <USB_vAllocateEPs+0x44>
        }
    }

    /* FIFO sizes are in words */
    ulFifoSize = (ulFifoSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	3303      	adds	r3, #3
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]

    /* Global RX FIFO according to trial and error, thanks to defective documentation */
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
            + (ulFifoSize + 1)  /* each packet gets status info as well */
            + (ucEpCount * 2)   /* transfer complete status is also stored with the last packet */
 8002e98:	7cbb      	ldrb	r3, [r7, #18]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4413      	add	r3, r2
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
 8002ea2:	330f      	adds	r3, #15
 8002ea4:	617b      	str	r3, [r7, #20]
            + 1;                /* for Global OUT NAK */
    pxUSB->Inst->GRXFSIZ = ulFifoOffset;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

    /* EP0 TX FIFO */
    ulFifoSize = (pxUSB->EP.IN[0].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	61bb      	str	r3, [r7, #24]
    if (ulFifoSize < ulMinFifoSizeVal)
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d201      	bcs.n	8002ec6 <USB_vAllocateEPs+0xae>
    {   ulFifoSize = ulMinFifoSizeVal; }
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]

    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	0419      	lsls	r1, r3, #16
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	430a      	orrs	r2, r1
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
            (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);

    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e022      	b.n	8002f20 <USB_vAllocateEPs+0x108>
    {
        /* Increase offset with the FIFO size */
        ulFifoOffset += ulFifoSize;
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	4413      	add	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

        /* FIFO sizes are in words */
        ulFifoSize = (pxUSB->EP.IN[ucEpNum].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	3303      	adds	r3, #3
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if (ulFifoSize < ulMinFifoSizeVal)
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d201      	bcs.n	8002f02 <USB_vAllocateEPs+0xea>
        {   ulFifoSize = ulMinFifoSizeVal; }
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	61bb      	str	r3, [r7, #24]

        /* EPx TX FIFOs */
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	0418      	lsls	r0, r3, #16
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68d9      	ldr	r1, [r3, #12]
 8002f0a:	7ffb      	ldrb	r3, [r7, #31]
 8002f0c:	3b01      	subs	r3, #1
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4302      	orrs	r2, r0
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 8002f12:	3340      	adds	r3, #64	; 0x40
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	605a      	str	r2, [r3, #4]
    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 8002f1a:	7ffb      	ldrb	r3, [r7, #31]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	7ffa      	ldrb	r2, [r7, #31]
 8002f22:	7cbb      	ldrb	r3, [r7, #18]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d3d8      	bcc.n	8002eda <USB_vAllocateEPs+0xc2>
                (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);
    }

    /* Total FIFO use shouldn't exceed available size */
    if (ulFifoLimit < (ulFifoOffset + ulFifoSize))
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d201      	bcs.n	8002f38 <USB_vAllocateEPs+0x120>
    {
        eResult = XPD_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	74fb      	strb	r3, [r7, #19]
    }

    (void) eResult;
}
 8002f38:	bf00      	nop
 8002f3a:	3724      	adds	r7, #36	; 0x24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40040000 	.word	0x40040000

08002f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <HAL_Init+0x40>)
 8002f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_Init+0x40>)
 8002f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_Init+0x40>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f70:	2003      	movs	r0, #3
 8002f72:	f000 f94f 	bl	8003214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f000 f808 	bl	8002f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f7c:	f7fd fc68 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00

08002f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0x54>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_InitTick+0x58>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f975 	bl	800329a <HAL_SYSTICK_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00e      	b.n	8002fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	d80a      	bhi.n	8002fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	f000 f92f 	bl	800322a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fcc:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <HAL_InitTick+0x5c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000034 	.word	0x20000034
 8002fe4:	2000003c 	.word	0x2000003c
 8002fe8:	20000038 	.word	0x20000038

08002fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_IncTick+0x20>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_IncTick+0x24>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_IncTick+0x24>)
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000003c 	.word	0x2000003c
 8003010:	20000468 	.word	0x20000468

08003014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return uwTick;
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_GetTick+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000468 	.word	0x20000468

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db12      	blt.n	8003104 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	490a      	ldr	r1, [pc, #40]	; (8003110 <__NVIC_DisableIRQ+0x44>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	3320      	adds	r3, #32
 80030f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030f8:	f3bf 8f4f 	dsb	sy
}
 80030fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030fe:	f3bf 8f6f 	isb	sy
}
 8003102:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	; (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e0:	d301      	bcc.n	80031e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00f      	b.n	8003206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <SysTick_Config+0x40>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ee:	210f      	movs	r1, #15
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	f7ff ff8e 	bl	8003114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <SysTick_Config+0x40>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fe:	4b04      	ldr	r3, [pc, #16]	; (8003210 <SysTick_Config+0x40>)
 8003200:	2207      	movs	r2, #7
 8003202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	e000e010 	.word	0xe000e010

08003214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff05 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800323c:	f7ff ff1a 	bl	8003074 <__NVIC_GetPriorityGrouping>
 8003240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	f7ff ff8e 	bl	8003168 <NVIC_EncodePriority>
 800324c:	4602      	mov	r2, r0
 800324e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff5d 	bl	8003114 <__NVIC_SetPriority>
}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff0d 	bl	8003090 <__NVIC_EnableIRQ>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff1d 	bl	80030cc <__NVIC_DisableIRQ>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ff94 	bl	80031d0 <SysTick_Config>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e16b      	b.n	80035a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d0:	2201      	movs	r2, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	f040 815a 	bne.w	80035a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d005      	beq.n	8003306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003302:	2b02      	cmp	r3, #2
 8003304:	d130      	bne.n	8003368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 0201 	and.w	r2, r3, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d017      	beq.n	80033a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	2203      	movs	r2, #3
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d123      	bne.n	80033f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	08da      	lsrs	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3208      	adds	r2, #8
 80033f2:	69b9      	ldr	r1, [r7, #24]
 80033f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0203 	and.w	r2, r3, #3
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80b4 	beq.w	80035a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <HAL_GPIO_Init+0x30c>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	4a5f      	ldr	r2, [pc, #380]	; (80035c0 <HAL_GPIO_Init+0x30c>)
 8003444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003448:	6453      	str	r3, [r2, #68]	; 0x44
 800344a:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <HAL_GPIO_Init+0x30c>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003456:	4a5b      	ldr	r2, [pc, #364]	; (80035c4 <HAL_GPIO_Init+0x310>)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3302      	adds	r3, #2
 800345e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a52      	ldr	r2, [pc, #328]	; (80035c8 <HAL_GPIO_Init+0x314>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d02b      	beq.n	80034da <HAL_GPIO_Init+0x226>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a51      	ldr	r2, [pc, #324]	; (80035cc <HAL_GPIO_Init+0x318>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d025      	beq.n	80034d6 <HAL_GPIO_Init+0x222>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a50      	ldr	r2, [pc, #320]	; (80035d0 <HAL_GPIO_Init+0x31c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01f      	beq.n	80034d2 <HAL_GPIO_Init+0x21e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a4f      	ldr	r2, [pc, #316]	; (80035d4 <HAL_GPIO_Init+0x320>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d019      	beq.n	80034ce <HAL_GPIO_Init+0x21a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a4e      	ldr	r2, [pc, #312]	; (80035d8 <HAL_GPIO_Init+0x324>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_GPIO_Init+0x216>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4d      	ldr	r2, [pc, #308]	; (80035dc <HAL_GPIO_Init+0x328>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00d      	beq.n	80034c6 <HAL_GPIO_Init+0x212>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4c      	ldr	r2, [pc, #304]	; (80035e0 <HAL_GPIO_Init+0x32c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d007      	beq.n	80034c2 <HAL_GPIO_Init+0x20e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <HAL_GPIO_Init+0x330>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <HAL_GPIO_Init+0x20a>
 80034ba:	2307      	movs	r3, #7
 80034bc:	e00e      	b.n	80034dc <HAL_GPIO_Init+0x228>
 80034be:	2308      	movs	r3, #8
 80034c0:	e00c      	b.n	80034dc <HAL_GPIO_Init+0x228>
 80034c2:	2306      	movs	r3, #6
 80034c4:	e00a      	b.n	80034dc <HAL_GPIO_Init+0x228>
 80034c6:	2305      	movs	r3, #5
 80034c8:	e008      	b.n	80034dc <HAL_GPIO_Init+0x228>
 80034ca:	2304      	movs	r3, #4
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x228>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e004      	b.n	80034dc <HAL_GPIO_Init+0x228>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_Init+0x228>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_GPIO_Init+0x228>
 80034da:	2300      	movs	r3, #0
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	f002 0203 	and.w	r2, r2, #3
 80034e2:	0092      	lsls	r2, r2, #2
 80034e4:	4093      	lsls	r3, r2
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ec:	4935      	ldr	r1, [pc, #212]	; (80035c4 <HAL_GPIO_Init+0x310>)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034fa:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_GPIO_Init+0x334>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800351e:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <HAL_GPIO_Init+0x334>)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_GPIO_Init+0x334>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003548:	4a27      	ldr	r2, [pc, #156]	; (80035e8 <HAL_GPIO_Init+0x334>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_GPIO_Init+0x334>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003572:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_GPIO_Init+0x334>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_GPIO_Init+0x334>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800359c:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <HAL_GPIO_Init+0x334>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3301      	adds	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b0f      	cmp	r3, #15
 80035ac:	f67f ae90 	bls.w	80032d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3724      	adds	r7, #36	; 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40013800 	.word	0x40013800
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40020400 	.word	0x40020400
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40020c00 	.word	0x40020c00
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40021400 	.word	0x40021400
 80035e0:	40021800 	.word	0x40021800
 80035e4:	40021c00 	.word	0x40021c00
 80035e8:	40013c00 	.word	0x40013c00

080035ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e0cd      	b.n	80037a4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003608:	2201      	movs	r2, #1
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	429a      	cmp	r2, r3
 8003620:	f040 80bd 	bne.w	800379e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003624:	4a65      	ldr	r2, [pc, #404]	; (80037bc <HAL_GPIO_DeInit+0x1d0>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003630:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a5d      	ldr	r2, [pc, #372]	; (80037c0 <HAL_GPIO_DeInit+0x1d4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02b      	beq.n	80036a6 <HAL_GPIO_DeInit+0xba>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a5c      	ldr	r2, [pc, #368]	; (80037c4 <HAL_GPIO_DeInit+0x1d8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d025      	beq.n	80036a2 <HAL_GPIO_DeInit+0xb6>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a5b      	ldr	r2, [pc, #364]	; (80037c8 <HAL_GPIO_DeInit+0x1dc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <HAL_GPIO_DeInit+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_GPIO_DeInit+0x1e0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d019      	beq.n	800369a <HAL_GPIO_DeInit+0xae>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a59      	ldr	r2, [pc, #356]	; (80037d0 <HAL_GPIO_DeInit+0x1e4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_GPIO_DeInit+0xaa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_GPIO_DeInit+0x1e8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00d      	beq.n	8003692 <HAL_GPIO_DeInit+0xa6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a57      	ldr	r2, [pc, #348]	; (80037d8 <HAL_GPIO_DeInit+0x1ec>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <HAL_GPIO_DeInit+0xa2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a56      	ldr	r2, [pc, #344]	; (80037dc <HAL_GPIO_DeInit+0x1f0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_GPIO_DeInit+0x9e>
 8003686:	2307      	movs	r3, #7
 8003688:	e00e      	b.n	80036a8 <HAL_GPIO_DeInit+0xbc>
 800368a:	2308      	movs	r3, #8
 800368c:	e00c      	b.n	80036a8 <HAL_GPIO_DeInit+0xbc>
 800368e:	2306      	movs	r3, #6
 8003690:	e00a      	b.n	80036a8 <HAL_GPIO_DeInit+0xbc>
 8003692:	2305      	movs	r3, #5
 8003694:	e008      	b.n	80036a8 <HAL_GPIO_DeInit+0xbc>
 8003696:	2304      	movs	r3, #4
 8003698:	e006      	b.n	80036a8 <HAL_GPIO_DeInit+0xbc>
 800369a:	2303      	movs	r3, #3
 800369c:	e004      	b.n	80036a8 <HAL_GPIO_DeInit+0xbc>
 800369e:	2302      	movs	r3, #2
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_DeInit+0xbc>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_GPIO_DeInit+0xbc>
 80036a6:	2300      	movs	r3, #0
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	f002 0203 	and.w	r2, r2, #3
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	4093      	lsls	r3, r2
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d132      	bne.n	800371e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80036b8:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <HAL_GPIO_DeInit+0x1f4>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	43db      	mvns	r3, r3
 80036c0:	4947      	ldr	r1, [pc, #284]	; (80037e0 <HAL_GPIO_DeInit+0x1f4>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80036c6:	4b46      	ldr	r3, [pc, #280]	; (80037e0 <HAL_GPIO_DeInit+0x1f4>)
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	4944      	ldr	r1, [pc, #272]	; (80037e0 <HAL_GPIO_DeInit+0x1f4>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80036d4:	4b42      	ldr	r3, [pc, #264]	; (80037e0 <HAL_GPIO_DeInit+0x1f4>)
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43db      	mvns	r3, r3
 80036dc:	4940      	ldr	r1, [pc, #256]	; (80037e0 <HAL_GPIO_DeInit+0x1f4>)
 80036de:	4013      	ands	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80036e2:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <HAL_GPIO_DeInit+0x1f4>)
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	493d      	ldr	r1, [pc, #244]	; (80037e0 <HAL_GPIO_DeInit+0x1f4>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	220f      	movs	r2, #15
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003700:	4a2e      	ldr	r2, [pc, #184]	; (80037bc <HAL_GPIO_DeInit+0x1d0>)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	43da      	mvns	r2, r3
 8003710:	482a      	ldr	r0, [pc, #168]	; (80037bc <HAL_GPIO_DeInit+0x1d0>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	400a      	ands	r2, r1
 8003718:	3302      	adds	r3, #2
 800371a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	2103      	movs	r1, #3
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	401a      	ands	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	08da      	lsrs	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3208      	adds	r2, #8
 800373c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	220f      	movs	r2, #15
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	08d2      	lsrs	r2, r2, #3
 8003754:	4019      	ands	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3208      	adds	r2, #8
 800375a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2103      	movs	r1, #3
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	401a      	ands	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	2101      	movs	r1, #1
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	401a      	ands	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2103      	movs	r1, #3
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	401a      	ands	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	f67f af2e 	bls.w	8003608 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40020000 	.word	0x40020000
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	40020c00 	.word	0x40020c00
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40021400 	.word	0x40021400
 80037d8:	40021800 	.word	0x40021800
 80037dc:	40021c00 	.word	0x40021c00
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037fa:	4a05      	ldr	r2, [pc, #20]	; (8003810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd f802 	bl	800080c <HAL_GPIO_EXTI_Callback>
  }
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40013c00 	.word	0x40013c00

08003814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e264      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d075      	beq.n	800391e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003832:	4ba3      	ldr	r3, [pc, #652]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d00c      	beq.n	8003858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383e:	4ba0      	ldr	r3, [pc, #640]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003846:	2b08      	cmp	r3, #8
 8003848:	d112      	bne.n	8003870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b9d      	ldr	r3, [pc, #628]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003856:	d10b      	bne.n	8003870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	4b99      	ldr	r3, [pc, #612]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d05b      	beq.n	800391c <HAL_RCC_OscConfig+0x108>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d157      	bne.n	800391c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e23f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d106      	bne.n	8003888 <HAL_RCC_OscConfig+0x74>
 800387a:	4b91      	ldr	r3, [pc, #580]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a90      	ldr	r2, [pc, #576]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e01d      	b.n	80038c4 <HAL_RCC_OscConfig+0xb0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x98>
 8003892:	4b8b      	ldr	r3, [pc, #556]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a8a      	ldr	r2, [pc, #552]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b88      	ldr	r3, [pc, #544]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a87      	ldr	r2, [pc, #540]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0xb0>
 80038ac:	4b84      	ldr	r3, [pc, #528]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a83      	ldr	r2, [pc, #524]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a80      	ldr	r2, [pc, #512]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d013      	beq.n	80038f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7ff fba2 	bl	8003014 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7ff fb9e 	bl	8003014 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e204      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0xc0>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7ff fb8e 	bl	8003014 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fc:	f7ff fb8a 	bl	8003014 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1f0      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	4b6c      	ldr	r3, [pc, #432]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0xe8>
 800391a:	e000      	b.n	800391e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d063      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003936:	4b62      	ldr	r3, [pc, #392]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393e:	2b08      	cmp	r3, #8
 8003940:	d11c      	bne.n	800397c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b5f      	ldr	r3, [pc, #380]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d116      	bne.n	800397c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	4b5c      	ldr	r3, [pc, #368]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_RCC_OscConfig+0x152>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e1c4      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003966:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4952      	ldr	r1, [pc, #328]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	e03a      	b.n	80039f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d020      	beq.n	80039c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003984:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_RCC_OscConfig+0x2b0>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7ff fb43 	bl	8003014 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003992:	f7ff fb3f 	bl	8003014 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e1a5      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b43      	ldr	r3, [pc, #268]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4940      	ldr	r1, [pc, #256]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]
 80039c4:	e015      	b.n	80039f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_OscConfig+0x2b0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7ff fb22 	bl	8003014 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d4:	f7ff fb1e 	bl	8003014 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e184      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d030      	beq.n	8003a60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCC_OscConfig+0x2b4>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7ff fb02 	bl	8003014 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a14:	f7ff fafe 	bl	8003014 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e164      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a26:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x200>
 8003a32:	e015      	b.n	8003a60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCC_OscConfig+0x2b4>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3a:	f7ff faeb 	bl	8003014 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a42:	f7ff fae7 	bl	8003014 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e14d      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80a0 	beq.w	8003bae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_OscConfig+0x2b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d121      	bne.n	8003aee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_RCC_OscConfig+0x2b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a07      	ldr	r2, [pc, #28]	; (8003acc <HAL_RCC_OscConfig+0x2b8>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7ff faad 	bl	8003014 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e011      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2ce>
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	42470000 	.word	0x42470000
 8003ac8:	42470e80 	.word	0x42470e80
 8003acc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7ff faa0 	bl	8003014 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e106      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b85      	ldr	r3, [pc, #532]	; (8003cf8 <HAL_RCC_OscConfig+0x4e4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d106      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
 8003af6:	4b81      	ldr	r3, [pc, #516]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a80      	ldr	r2, [pc, #512]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	e01c      	b.n	8003b3e <HAL_RCC_OscConfig+0x32a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d10c      	bne.n	8003b26 <HAL_RCC_OscConfig+0x312>
 8003b0c:	4b7b      	ldr	r3, [pc, #492]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	4a7a      	ldr	r2, [pc, #488]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
 8003b18:	4b78      	ldr	r3, [pc, #480]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a77      	ldr	r2, [pc, #476]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	e00b      	b.n	8003b3e <HAL_RCC_OscConfig+0x32a>
 8003b26:	4b75      	ldr	r3, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a74      	ldr	r2, [pc, #464]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
 8003b32:	4b72      	ldr	r3, [pc, #456]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a71      	ldr	r2, [pc, #452]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d015      	beq.n	8003b72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7ff fa65 	bl	8003014 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7ff fa61 	bl	8003014 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e0c5      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ee      	beq.n	8003b4e <HAL_RCC_OscConfig+0x33a>
 8003b70:	e014      	b.n	8003b9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b72:	f7ff fa4f 	bl	8003014 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7ff fa4b 	bl	8003014 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0af      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b90:	4b5a      	ldr	r3, [pc, #360]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ee      	bne.n	8003b7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba2:	4b56      	ldr	r3, [pc, #344]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	4a55      	ldr	r2, [pc, #340]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 809b 	beq.w	8003cee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb8:	4b50      	ldr	r3, [pc, #320]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d05c      	beq.n	8003c7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d141      	bne.n	8003c50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bcc:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <HAL_RCC_OscConfig+0x4ec>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7ff fa1f 	bl	8003014 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bda:	f7ff fa1b 	bl	8003014 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e081      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bec:	4b43      	ldr	r3, [pc, #268]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	019b      	lsls	r3, r3, #6
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	3b01      	subs	r3, #1
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	4937      	ldr	r1, [pc, #220]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c22:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <HAL_RCC_OscConfig+0x4ec>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7ff f9f4 	bl	8003014 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c30:	f7ff f9f0 	bl	8003014 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e056      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x41c>
 8003c4e:	e04e      	b.n	8003cee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c50:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_RCC_OscConfig+0x4ec>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7ff f9dd 	bl	8003014 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7ff f9d9 	bl	8003014 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e03f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c70:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x44a>
 8003c7c:	e037      	b.n	8003cee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e032      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <HAL_RCC_OscConfig+0x4e8>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d028      	beq.n	8003cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d121      	bne.n	8003cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d11a      	bne.n	8003cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cba:	4013      	ands	r3, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cc0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d111      	bne.n	8003cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	42470060 	.word	0x42470060

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0cc      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d90c      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b65      	ldr	r3, [pc, #404]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b63      	ldr	r3, [pc, #396]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0b8      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d58:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a58      	ldr	r2, [pc, #352]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a52      	ldr	r2, [pc, #328]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b50      	ldr	r3, [pc, #320]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	494d      	ldr	r1, [pc, #308]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d044      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d119      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e07f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e06f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e067      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de2:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 0203 	bic.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4934      	ldr	r1, [pc, #208]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df4:	f7ff f90e 	bl	8003014 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfc:	f7ff f90a 	bl	8003014 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 020c 	and.w	r2, r3, #12
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d1eb      	bne.n	8003dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d20c      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e032      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4916      	ldr	r1, [pc, #88]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	490e      	ldr	r1, [pc, #56]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e8a:	f000 f821 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	490a      	ldr	r1, [pc, #40]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	5ccb      	ldrb	r3, [r1, r3]
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff f86e 	bl	8002f8c <HAL_InitTick>

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023c00 	.word	0x40023c00
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	08004224 	.word	0x08004224
 8003ec8:	20000034 	.word	0x20000034
 8003ecc:	20000038 	.word	0x20000038

08003ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee8:	4b67      	ldr	r3, [pc, #412]	; (8004088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d00d      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x40>
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	f200 80bd 	bhi.w	8004074 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x34>
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f02:	e0b7      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b61      	ldr	r3, [pc, #388]	; (800408c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f06:	60bb      	str	r3, [r7, #8]
       break;
 8003f08:	e0b7      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f0a:	4b61      	ldr	r3, [pc, #388]	; (8004090 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f0c:	60bb      	str	r3, [r7, #8]
      break;
 8003f0e:	e0b4      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f10:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f1a:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d04d      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f26:	4b58      	ldr	r3, [pc, #352]	; (8004088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	ea02 0800 	and.w	r8, r2, r0
 8003f3e:	ea03 0901 	and.w	r9, r3, r1
 8003f42:	4640      	mov	r0, r8
 8003f44:	4649      	mov	r1, r9
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	014b      	lsls	r3, r1, #5
 8003f50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f54:	0142      	lsls	r2, r0, #5
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	ebb0 0008 	subs.w	r0, r0, r8
 8003f5e:	eb61 0109 	sbc.w	r1, r1, r9
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	018b      	lsls	r3, r1, #6
 8003f6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f70:	0182      	lsls	r2, r0, #6
 8003f72:	1a12      	subs	r2, r2, r0
 8003f74:	eb63 0301 	sbc.w	r3, r3, r1
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	00d9      	lsls	r1, r3, #3
 8003f82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f86:	00d0      	lsls	r0, r2, #3
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	eb12 0208 	adds.w	r2, r2, r8
 8003f90:	eb43 0309 	adc.w	r3, r3, r9
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	0259      	lsls	r1, r3, #9
 8003f9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fa2:	0250      	lsls	r0, r2, #9
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	f7fc f908 	bl	80001c8 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e04a      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	099b      	lsrs	r3, r3, #6
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fd2:	f04f 0100 	mov.w	r1, #0
 8003fd6:	ea02 0400 	and.w	r4, r2, r0
 8003fda:	ea03 0501 	and.w	r5, r3, r1
 8003fde:	4620      	mov	r0, r4
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	014b      	lsls	r3, r1, #5
 8003fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ff0:	0142      	lsls	r2, r0, #5
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	1b00      	subs	r0, r0, r4
 8003ff8:	eb61 0105 	sbc.w	r1, r1, r5
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	018b      	lsls	r3, r1, #6
 8004006:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800400a:	0182      	lsls	r2, r0, #6
 800400c:	1a12      	subs	r2, r2, r0
 800400e:	eb63 0301 	sbc.w	r3, r3, r1
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	00d9      	lsls	r1, r3, #3
 800401c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004020:	00d0      	lsls	r0, r2, #3
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	1912      	adds	r2, r2, r4
 8004028:	eb45 0303 	adc.w	r3, r5, r3
 800402c:	f04f 0000 	mov.w	r0, #0
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	0299      	lsls	r1, r3, #10
 8004036:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800403a:	0290      	lsls	r0, r2, #10
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4610      	mov	r0, r2
 8004042:	4619      	mov	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	461a      	mov	r2, r3
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	f7fc f8bc 	bl	80001c8 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4613      	mov	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	60bb      	str	r3, [r7, #8]
      break;
 8004072:	e002      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004076:	60bb      	str	r3, [r7, #8]
      break;
 8004078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800407a:	68bb      	ldr	r3, [r7, #8]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800
 800408c:	00f42400 	.word	0x00f42400
 8004090:	007a1200 	.word	0x007a1200

08004094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20000034 	.word	0x20000034

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4d0d      	ldr	r5, [pc, #52]	; (80040e4 <__libc_init_array+0x38>)
 80040b0:	4c0d      	ldr	r4, [pc, #52]	; (80040e8 <__libc_init_array+0x3c>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	2600      	movs	r6, #0
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	; (80040ec <__libc_init_array+0x40>)
 80040be:	4c0c      	ldr	r4, [pc, #48]	; (80040f0 <__libc_init_array+0x44>)
 80040c0:	f000 f820 	bl	8004104 <_init>
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	080042a8 	.word	0x080042a8
 80040e8:	080042a8 	.word	0x080042a8
 80040ec:	080042a8 	.word	0x080042a8
 80040f0:	080042ac 	.word	0x080042ac

080040f4 <memset>:
 80040f4:	4402      	add	r2, r0
 80040f6:	4603      	mov	r3, r0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d100      	bne.n	80040fe <memset+0xa>
 80040fc:	4770      	bx	lr
 80040fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004102:	e7f9      	b.n	80040f8 <memset+0x4>

08004104 <_init>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr

08004110 <_fini>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr
