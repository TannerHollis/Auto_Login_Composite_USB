
Auto_Login_Composite_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000208  080e0000  080e0000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000661c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001e4  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006988  08006988  00030208  2**0
                  CONTENTS
  5 .ARM          00000008  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08006990  08006990  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08006994  08006994  00016994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000040  20000000  08006998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000fa0  20000040  080069d8  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000fe0  080069d8  00020fe0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f4cc  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cc8  00000000  00000000  0006f704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  000743d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee0  00000000  00000000  00075408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ee2  00000000  00000000  000762e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016967  00000000  00000000  0009a1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccf7b  00000000  00000000  000b0b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017daac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040a8  00000000  00000000  0017db00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800678c 	.word	0x0800678c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	0800678c 	.word	0x0800678c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <console_if_open>:
    .App = &console_app,
    .Base.AltCount = 1,
}, *const console_if = &_console_if;

static void console_if_open(void* itf, USBD_CDC_LineCodingType * lc)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
#if (STDOUT_BUFFER_SIZE > 0)
    console_if_IN.head = console_if_IN.tail = 0;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <console_if_open+0x34>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	809a      	strh	r2, [r3, #4]
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <console_if_open+0x34>)
 80004d2:	889a      	ldrh	r2, [r3, #4]
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <console_if_open+0x34>)
 80004d6:	805a      	strh	r2, [r3, #2]
#endif
#if (STDIN_BUFFER_SIZE > 0)
    console_if_OUT.head = console_if_OUT.tail = 0;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <console_if_open+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	80da      	strh	r2, [r3, #6]
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <console_if_open+0x38>)
 80004e0:	88da      	ldrh	r2, [r3, #6]
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <console_if_open+0x38>)
 80004e4:	809a      	strh	r2, [r3, #4]
    console_if_recv();
 80004e6:	f000 f91b 	bl	8000720 <console_if_recv>
#endif
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000480 	.word	0x20000480
 80004f8:	20000074 	.word	0x20000074

080004fc <console_if_in_cmplt>:

#if (STDOUT_BUFFER_SIZE > 0)
static void console_if_in_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	4613      	mov	r3, r2
 8000508:	80fb      	strh	r3, [r7, #6]
    if (console_if_IN.tail < console_in_size)
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <console_if_in_cmplt+0x40>)
 800050c:	889b      	ldrh	r3, [r3, #4]
 800050e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000512:	4293      	cmp	r3, r2
 8000514:	d207      	bcs.n	8000526 <console_if_in_cmplt+0x2a>
        console_if_IN.tail += length;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <console_if_in_cmplt+0x40>)
 8000518:	889a      	ldrh	r2, [r3, #4]
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	4413      	add	r3, r2
 800051e:	b29a      	uxth	r2, r3
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <console_if_in_cmplt+0x40>)
 8000522:	809a      	strh	r2, [r3, #4]
 8000524:	e004      	b.n	8000530 <console_if_in_cmplt+0x34>
    else
        console_if_IN.tail = length - 1;
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	3b01      	subs	r3, #1
 800052a:	b29a      	uxth	r2, r3
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <console_if_in_cmplt+0x40>)
 800052e:	809a      	strh	r2, [r3, #4]
    console_if_send();
 8000530:	f000 f806 	bl	8000540 <console_if_send>
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000480 	.word	0x20000480

08000540 <console_if_send>:

static void console_if_send(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <console_if_send+0x6c>)
 8000548:	885b      	ldrh	r3, [r3, #2]
 800054a:	807b      	strh	r3, [r7, #2]
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <console_if_send+0x6c>)
 800054e:	889b      	ldrh	r3, [r3, #4]
 8000550:	803b      	strh	r3, [r7, #0]
    uint16_t start = tail + 1, length;
 8000552:	883b      	ldrh	r3, [r7, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	80fb      	strh	r3, [r7, #6]

    if (tail <= head)
 8000558:	883a      	ldrh	r2, [r7, #0]
 800055a:	887b      	ldrh	r3, [r7, #2]
 800055c:	429a      	cmp	r2, r3
 800055e:	d804      	bhi.n	800056a <console_if_send+0x2a>
    {
        length = head - tail;
 8000560:	887a      	ldrh	r2, [r7, #2]
 8000562:	883b      	ldrh	r3, [r7, #0]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	80bb      	strh	r3, [r7, #4]
 8000568:	e00f      	b.n	800058a <console_if_send+0x4a>
    }
    else if (tail < console_in_size)
 800056a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800056e:	883b      	ldrh	r3, [r7, #0]
 8000570:	4293      	cmp	r3, r2
 8000572:	d205      	bcs.n	8000580 <console_if_send+0x40>
    {
        length = console_in_size - tail;
 8000574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000578:	883b      	ldrh	r3, [r7, #0]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	e004      	b.n	800058a <console_if_send+0x4a>
    }
    else
    {
        length = head + 1;
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	3301      	adds	r3, #1
 8000584:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d008      	beq.n	80005a2 <console_if_send+0x62>
    {
        USBD_CDC_Transmit(console_if,
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <console_if_send+0x70>)
                &console_if_IN.buffer[start], length);
 8000592:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Transmit(console_if,
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <console_if_send+0x6c>)
 8000596:	4413      	add	r3, r2
 8000598:	3306      	adds	r3, #6
 800059a:	88ba      	ldrh	r2, [r7, #4]
 800059c:	4619      	mov	r1, r3
 800059e:	f001 fc49 	bl	8001e34 <USBD_CDC_Transmit>
    }
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000480 	.word	0x20000480
 80005b0:	20000000 	.word	0x20000000

080005b4 <_write>:

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	61fb      	str	r3, [r7, #28]
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 80005c6:	4b41      	ldr	r3, [pc, #260]	; (80006cc <_write+0x118>)
 80005c8:	885b      	ldrh	r3, [r3, #2]
 80005ca:	82fb      	strh	r3, [r7, #22]
 80005cc:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <_write+0x118>)
 80005ce:	889b      	ldrh	r3, [r3, #4]
 80005d0:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80005d2:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <_write+0x11c>)
 80005d4:	7e9b      	ldrb	r3, [r3, #26]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d104      	bne.n	80005e4 <_write+0x30>
    {
        errno = -EIO;
 80005da:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <_write+0x120>)
 80005dc:	f06f 0204 	mvn.w	r2, #4
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e06d      	b.n	80006c0 <_write+0x10c>
    }
    else if (((tail > head) ?
            (tail - head - 1) : (console_in_size - (head - tail))) < len)
 80005e4:	8aba      	ldrh	r2, [r7, #20]
 80005e6:	8afb      	ldrh	r3, [r7, #22]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d904      	bls.n	80005f6 <_write+0x42>
 80005ec:	8aba      	ldrh	r2, [r7, #20]
 80005ee:	8afb      	ldrh	r3, [r7, #22]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	3b01      	subs	r3, #1
 80005f4:	e006      	b.n	8000604 <_write+0x50>
 80005f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fa:	4619      	mov	r1, r3
 80005fc:	8afa      	ldrh	r2, [r7, #22]
 80005fe:	8abb      	ldrh	r3, [r7, #20]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	1acb      	subs	r3, r1, r3
    else if (((tail > head) ?
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4293      	cmp	r3, r2
 8000608:	da04      	bge.n	8000614 <_write+0x60>
    {
        errno = -ENOMEM;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <_write+0x120>)
 800060c:	f06f 020b 	mvn.w	r2, #11
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	e055      	b.n	80006c0 <_write+0x10c>
    }
    else
    {
        uint16_t len1, len2 = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	833b      	strh	r3, [r7, #24]

        if (tail > head)
 8000618:	8aba      	ldrh	r2, [r7, #20]
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	429a      	cmp	r2, r3
 800061e:	d90c      	bls.n	800063a <_write+0x86>
        {
            /* continuous */
            len1 = tail - head - 1;
 8000620:	8aba      	ldrh	r2, [r7, #20]
 8000622:	8afb      	ldrh	r3, [r7, #22]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b01      	subs	r3, #1
 800062a:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 800062c:	8b7b      	ldrh	r3, [r7, #26]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	da1c      	bge.n	800066e <_write+0xba>
                len1 = len;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	837b      	strh	r3, [r7, #26]
 8000638:	e019      	b.n	800066e <_write+0xba>
        }
        else
        {
            /* two chunks */
            len1 = console_in_size - head;
 800063a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 8000644:	8b7b      	ldrh	r3, [r7, #26]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dc02      	bgt.n	8000652 <_write+0x9e>
                len1 = len;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	837b      	strh	r3, [r7, #26]
 8000650:	e00d      	b.n	800066e <_write+0xba>
            else if (len < (len1 + tail))
 8000652:	8b7a      	ldrh	r2, [r7, #26]
 8000654:	8abb      	ldrh	r3, [r7, #20]
 8000656:	4413      	add	r3, r2
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	429a      	cmp	r2, r3
 800065c:	da05      	bge.n	800066a <_write+0xb6>
                len2 = len - len1;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	b29a      	uxth	r2, r3
 8000662:	8b7b      	ldrh	r3, [r7, #26]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	833b      	strh	r3, [r7, #24]
 8000668:	e001      	b.n	800066e <_write+0xba>
            else
                len2 = tail;
 800066a:	8abb      	ldrh	r3, [r7, #20]
 800066c:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current head */
        memcpy(&console_if_IN.buffer[head + 1], ptr, len1);
 800066e:	8afb      	ldrh	r3, [r7, #22]
 8000670:	3301      	adds	r3, #1
 8000672:	4a16      	ldr	r2, [pc, #88]	; (80006cc <_write+0x118>)
 8000674:	4413      	add	r3, r2
 8000676:	3306      	adds	r3, #6
 8000678:	8b7a      	ldrh	r2, [r7, #26]
 800067a:	68b9      	ldr	r1, [r7, #8]
 800067c:	4618      	mov	r0, r3
 800067e:	f006 f86f 	bl	8006760 <memcpy>
        console_if_IN.head += len1;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <_write+0x118>)
 8000684:	885a      	ldrh	r2, [r3, #2]
 8000686:	8b7b      	ldrh	r3, [r7, #26]
 8000688:	4413      	add	r3, r2
 800068a:	b29a      	uxth	r2, r3
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <_write+0x118>)
 800068e:	805a      	strh	r2, [r3, #2]
        ptr += len1;
 8000690:	8b7b      	ldrh	r3, [r7, #26]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	4413      	add	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 8000698:	8b3b      	ldrh	r3, [r7, #24]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00a      	beq.n	80006b4 <_write+0x100>
        {
            memcpy(&console_if_IN.buffer[0], ptr, len2);
 800069e:	8b3b      	ldrh	r3, [r7, #24]
 80006a0:	461a      	mov	r2, r3
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <_write+0x124>)
 80006a6:	f006 f85b 	bl	8006760 <memcpy>
            console_if_IN.head = len2 - 1;
 80006aa:	8b3b      	ldrh	r3, [r7, #24]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <_write+0x118>)
 80006b2:	805a      	strh	r2, [r3, #2]
        }

        retval = len1 + len2;
 80006b4:	8b7a      	ldrh	r2, [r7, #26]
 80006b6:	8b3b      	ldrh	r3, [r7, #24]
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
        console_if_send();
 80006bc:	f7ff ff40 	bl	8000540 <console_if_send>
    }
    return retval;
 80006c0:	69fb      	ldr	r3, [r7, #28]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000480 	.word	0x20000480
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000fdc 	.word	0x20000fdc
 80006d8:	20000486 	.word	0x20000486

080006dc <console_if_out_cmplt>:
#endif

#if (STDIN_BUFFER_SIZE > 0)
static void console_if_out_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	4613      	mov	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]
    if (console_if_OUT.head < console_out_size)
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <console_if_out_cmplt+0x40>)
 80006ec:	889b      	ldrh	r3, [r3, #4]
 80006ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d207      	bcs.n	8000706 <console_if_out_cmplt+0x2a>
        console_if_OUT.head += length;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <console_if_out_cmplt+0x40>)
 80006f8:	889a      	ldrh	r2, [r3, #4]
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	4413      	add	r3, r2
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <console_if_out_cmplt+0x40>)
 8000702:	809a      	strh	r2, [r3, #4]
 8000704:	e004      	b.n	8000710 <console_if_out_cmplt+0x34>
    else
        console_if_OUT.head = length - 1;
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	3b01      	subs	r3, #1
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <console_if_out_cmplt+0x40>)
 800070e:	809a      	strh	r2, [r3, #4]
    console_if_recv();
 8000710:	f000 f806 	bl	8000720 <console_if_recv>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000074 	.word	0x20000074

08000720 <console_if_recv>:

static void console_if_recv(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <console_if_recv+0x6c>)
 8000728:	88db      	ldrh	r3, [r3, #6]
 800072a:	807b      	strh	r3, [r7, #2]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <console_if_recv+0x6c>)
 800072e:	889b      	ldrh	r3, [r3, #4]
 8000730:	803b      	strh	r3, [r7, #0]
    uint16_t start = head + 1, length;
 8000732:	883b      	ldrh	r3, [r7, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	80fb      	strh	r3, [r7, #6]

    if (tail > head)
 8000738:	887a      	ldrh	r2, [r7, #2]
 800073a:	883b      	ldrh	r3, [r7, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d906      	bls.n	800074e <console_if_recv+0x2e>
    {
        length = tail - head - 1;
 8000740:	887a      	ldrh	r2, [r7, #2]
 8000742:	883b      	ldrh	r3, [r7, #0]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b29b      	uxth	r3, r3
 8000748:	3b01      	subs	r3, #1
 800074a:	80bb      	strh	r3, [r7, #4]
 800074c:	e00e      	b.n	800076c <console_if_recv+0x4c>
    }
    else if (head < console_out_size)
 800074e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000752:	883b      	ldrh	r3, [r7, #0]
 8000754:	4293      	cmp	r3, r2
 8000756:	d205      	bcs.n	8000764 <console_if_recv+0x44>
    {
        length = console_out_size - head;
 8000758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800075c:	883b      	ldrh	r3, [r7, #0]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	80bb      	strh	r3, [r7, #4]
 8000762:	e003      	b.n	800076c <console_if_recv+0x4c>
    }
    else
    {
        length = tail;
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 800076c:	88bb      	ldrh	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d008      	beq.n	8000784 <console_if_recv+0x64>
    {
        USBD_CDC_Receive(console_if,
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <console_if_recv+0x70>)
                &console_if_OUT.buffer[start], length);
 8000774:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Receive(console_if,
 8000776:	3308      	adds	r3, #8
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <console_if_recv+0x6c>)
 800077a:	4413      	add	r3, r2
 800077c:	88ba      	ldrh	r2, [r7, #4]
 800077e:	4619      	mov	r1, r3
 8000780:	f001 fb6c 	bl	8001e5c <USBD_CDC_Receive>
    }
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000074 	.word	0x20000074
 8000790:	20000000 	.word	0x20000000

08000794 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	61fb      	str	r3, [r7, #28]
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 80007a6:	4b36      	ldr	r3, [pc, #216]	; (8000880 <_read+0xec>)
 80007a8:	88db      	ldrh	r3, [r3, #6]
 80007aa:	82fb      	strh	r3, [r7, #22]
 80007ac:	4b34      	ldr	r3, [pc, #208]	; (8000880 <_read+0xec>)
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <_read+0xf0>)
 80007b4:	7e9b      	ldrb	r3, [r3, #26]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d104      	bne.n	80007c4 <_read+0x30>
    {
        errno = -EIO;
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <_read+0xf4>)
 80007bc:	f06f 0204 	mvn.w	r2, #4
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e057      	b.n	8000874 <_read+0xe0>
    }
    else
    {
        uint16_t len1, len2 = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	833b      	strh	r3, [r7, #24]

        if (tail <= head)
 80007c8:	8afa      	ldrh	r2, [r7, #22]
 80007ca:	8abb      	ldrh	r3, [r7, #20]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d80a      	bhi.n	80007e6 <_read+0x52>
        {
            /* continuous */
            len1 = head - tail;
 80007d0:	8aba      	ldrh	r2, [r7, #20]
 80007d2:	8afb      	ldrh	r3, [r7, #22]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 80007d8:	8b7b      	ldrh	r3, [r7, #26]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	da1d      	bge.n	800081c <_read+0x88>
                len1 = len;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	837b      	strh	r3, [r7, #26]
 80007e4:	e01a      	b.n	800081c <_read+0x88>
        }
        else
        {
            /* two chunks */
            len1 = console_out_size - tail;
 80007e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ea:	8afb      	ldrh	r3, [r7, #22]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 80007f0:	8b7b      	ldrh	r3, [r7, #26]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dc02      	bgt.n	80007fe <_read+0x6a>
                len1 = len;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	837b      	strh	r3, [r7, #26]
 80007fc:	e00e      	b.n	800081c <_read+0x88>
            else if (len < (len1 + head + 1))
 80007fe:	8b7a      	ldrh	r2, [r7, #26]
 8000800:	8abb      	ldrh	r3, [r7, #20]
 8000802:	4413      	add	r3, r2
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	dc05      	bgt.n	8000816 <_read+0x82>
                len2 = len - len1;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	b29a      	uxth	r2, r3
 800080e:	8b7b      	ldrh	r3, [r7, #26]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	833b      	strh	r3, [r7, #24]
 8000814:	e002      	b.n	800081c <_read+0x88>
            else
                len2 = head + 1;
 8000816:	8abb      	ldrh	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current tail */
        memcpy(ptr, &console_if_OUT.buffer[tail + 1], len1);
 800081c:	8afb      	ldrh	r3, [r7, #22]
 800081e:	3301      	adds	r3, #1
 8000820:	3308      	adds	r3, #8
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <_read+0xec>)
 8000824:	4413      	add	r3, r2
 8000826:	8b7a      	ldrh	r2, [r7, #26]
 8000828:	4619      	mov	r1, r3
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f005 ff98 	bl	8006760 <memcpy>
        console_if_OUT.tail += len1;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <_read+0xec>)
 8000832:	88da      	ldrh	r2, [r3, #6]
 8000834:	8b7b      	ldrh	r3, [r7, #26]
 8000836:	4413      	add	r3, r2
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <_read+0xec>)
 800083c:	80da      	strh	r2, [r3, #6]
        ptr += len1;
 800083e:	8b7b      	ldrh	r3, [r7, #26]
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	4413      	add	r3, r2
 8000844:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 8000846:	8b3b      	ldrh	r3, [r7, #24]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00a      	beq.n	8000862 <_read+0xce>
        {
            memcpy(ptr, &console_if_OUT.buffer[0], len2);
 800084c:	8b3b      	ldrh	r3, [r7, #24]
 800084e:	461a      	mov	r2, r3
 8000850:	490e      	ldr	r1, [pc, #56]	; (800088c <_read+0xf8>)
 8000852:	68b8      	ldr	r0, [r7, #8]
 8000854:	f005 ff84 	bl	8006760 <memcpy>
            console_if_OUT.tail = len2 - 1;
 8000858:	8b3b      	ldrh	r3, [r7, #24]
 800085a:	3b01      	subs	r3, #1
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <_read+0xec>)
 8000860:	80da      	strh	r2, [r3, #6]
        }

        retval = len1 + len2;
 8000862:	8b7a      	ldrh	r2, [r7, #26]
 8000864:	8b3b      	ldrh	r3, [r7, #24]
 8000866:	4413      	add	r3, r2
 8000868:	61fb      	str	r3, [r7, #28]
        if (retval > 0)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dd01      	ble.n	8000874 <_read+0xe0>
            console_if_recv();
 8000870:	f7ff ff56 	bl	8000720 <console_if_recv>
    }
    return retval;
 8000874:	69fb      	ldr	r3, [r7, #28]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000074 	.word	0x20000074
 8000884:	20000000 	.word	0x20000000
 8000888:	20000fdc 	.word	0x20000fdc
 800088c:	2000007c 	.word	0x2000007c

08000890 <read_ready>:
#endif

uint8_t read_ready(){
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
	uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <read_ready+0x50>)
 8000898:	88db      	ldrh	r3, [r3, #6]
 800089a:	80fb      	strh	r3, [r7, #6]
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <read_ready+0x50>)
 800089e:	889b      	ldrh	r3, [r3, #4]
 80008a0:	80bb      	strh	r3, [r7, #4]
	if(tail > head){
 80008a2:	88fa      	ldrh	r2, [r7, #6]
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d90c      	bls.n	80008c4 <read_ready+0x34>
		return (console_out_size - tail) + head == RX_BYTE_LEN;
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	461a      	mov	r2, r3
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	1ad2      	subs	r2, r2, r3
 80008b4:	88bb      	ldrh	r3, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	2b86      	cmp	r3, #134	; 0x86
 80008ba:	bf0c      	ite	eq
 80008bc:	2301      	moveq	r3, #1
 80008be:	2300      	movne	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	e007      	b.n	80008d4 <read_ready+0x44>
	}
	else{
		return head - tail == RX_BYTE_LEN;
 80008c4:	88ba      	ldrh	r2, [r7, #4]
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b86      	cmp	r3, #134	; 0x86
 80008cc:	bf0c      	ite	eq
 80008ce:	2301      	moveq	r3, #1
 80008d0:	2300      	movne	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
	}
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	20000074 	.word	0x20000074

080008e4 <Flash_Write_Data>:

#include "flash_memory.h"
#include "stm32xxxx.h"

uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint8_t *Data, uint16_t numberofbytes)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80008f6:	f004 f8a3 	bl	8004a40 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f000 f86c 	bl	80009d8 <GetSector>
 8000900:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofbytes;
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800090a:	69f8      	ldr	r0, [r7, #28]
 800090c:	f000 f864 	bl	80009d8 <GetSector>
 8000910:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000912:	4b20      	ldr	r3, [pc, #128]	; (8000994 <Flash_Write_Data+0xb0>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <Flash_Write_Data+0xb0>)
 800091a:	2202      	movs	r2, #2
 800091c:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800091e:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <Flash_Write_Data+0xb0>)
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	3301      	adds	r3, #1
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <Flash_Write_Data+0xb0>)
 800092e:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4817      	ldr	r0, [pc, #92]	; (8000994 <Flash_Write_Data+0xb0>)
 8000938:	f004 f9f0 	bl	8004d1c <HAL_FLASHEx_Erase>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01c      	beq.n	800097c <Flash_Write_Data+0x98>
	  {
		  return HAL_FLASH_GetError();
 8000942:	f004 f8af 	bl	8004aa4 <HAL_FLASH_GetError>
 8000946:	4603      	mov	r3, r0
 8000948:	e01f      	b.n	800098a <Flash_Write_Data+0xa6>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		while (sofar < numberofbytes)
		{
			 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, StartSectorAddress, Data[sofar]) == HAL_OK)
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	68f9      	ldr	r1, [r7, #12]
 800095a:	2000      	movs	r0, #0
 800095c:	f004 f81c 	bl	8004998 <HAL_FLASH_Program>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d106      	bne.n	8000974 <Flash_Write_Data+0x90>
			 {
				 StartSectorAddress += 1;  // use StartPageAddress += 2 for half word and 8 for double word
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3301      	adds	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
				 sofar++;
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	3301      	adds	r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
 8000972:	e003      	b.n	800097c <Flash_Write_Data+0x98>
			 }
			 else
			 {
			   /* Error occurred while writing data in Flash memory*/
				 return HAL_FLASH_GetError();
 8000974:	f004 f896 	bl	8004aa4 <HAL_FLASH_GetError>
 8000978:	4603      	mov	r3, r0
 800097a:	e006      	b.n	800098a <Flash_Write_Data+0xa6>
		while (sofar < numberofbytes)
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000980:	429a      	cmp	r2, r3
 8000982:	dbe2      	blt.n	800094a <Flash_Write_Data+0x66>
			 }
		}

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8000984:	f004 f87e 	bl	8004a84 <HAL_FLASH_Lock>

	  return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000005c 	.word	0x2000005c

08000998 <Flash_Read_Data>:

void Flash_Read_Data (uint32_t StartSectorAddress, uint8_t *RxBuf, uint16_t numberofbytes)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	4613      	mov	r3, r2
 80009a4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint8_t *)StartSectorAddress;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	701a      	strb	r2, [r3, #0]
		StartSectorAddress += 1;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
		if (!(numberofbytes--)) break;
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	80fa      	strh	r2, [r7, #6]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d000      	beq.n	80009c8 <Flash_Read_Data+0x30>
		*RxBuf = *(__IO uint8_t *)StartSectorAddress;
 80009c6:	e7ee      	b.n	80009a6 <Flash_Read_Data+0xe>
		if (!(numberofbytes--)) break;
 80009c8:	bf00      	nop
	}
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <GetSector>:

uint32_t GetSector(uint32_t Address)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a44      	ldr	r2, [pc, #272]	; (8000af8 <GetSector+0x120>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d806      	bhi.n	80009fa <GetSector+0x22>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80009f2:	d302      	bcc.n	80009fa <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	e077      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a3f      	ldr	r2, [pc, #252]	; (8000afc <GetSector+0x124>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d806      	bhi.n	8000a10 <GetSector+0x38>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a3e      	ldr	r2, [pc, #248]	; (8000b00 <GetSector+0x128>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d302      	bcc.n	8000a10 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	e06c      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a3c      	ldr	r2, [pc, #240]	; (8000b04 <GetSector+0x12c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d806      	bhi.n	8000a26 <GetSector+0x4e>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3b      	ldr	r2, [pc, #236]	; (8000b08 <GetSector+0x130>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d302      	bcc.n	8000a26 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e061      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <GetSector+0x134>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d206      	bcs.n	8000a3c <GetSector+0x64>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a37      	ldr	r2, [pc, #220]	; (8000b10 <GetSector+0x138>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d302      	bcc.n	8000a3c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000a36:	2303      	movs	r3, #3
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e056      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a35      	ldr	r2, [pc, #212]	; (8000b14 <GetSector+0x13c>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d206      	bcs.n	8000a52 <GetSector+0x7a>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <GetSector+0x134>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d902      	bls.n	8000a52 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	e04b      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a30      	ldr	r2, [pc, #192]	; (8000b18 <GetSector+0x140>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d206      	bcs.n	8000a68 <GetSector+0x90>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <GetSector+0x13c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d902      	bls.n	8000a68 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000a62:	2305      	movs	r3, #5
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e040      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <GetSector+0x144>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d206      	bcs.n	8000a7e <GetSector+0xa6>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a29      	ldr	r2, [pc, #164]	; (8000b18 <GetSector+0x140>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d902      	bls.n	8000a7e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000a78:	2306      	movs	r3, #6
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e035      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a27      	ldr	r2, [pc, #156]	; (8000b20 <GetSector+0x148>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d206      	bcs.n	8000a94 <GetSector+0xbc>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <GetSector+0x144>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d902      	bls.n	8000a94 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e02a      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <GetSector+0x14c>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d206      	bcs.n	8000aaa <GetSector+0xd2>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <GetSector+0x148>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d902      	bls.n	8000aaa <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e01f      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <GetSector+0x150>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d206      	bcs.n	8000ac0 <GetSector+0xe8>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <GetSector+0x14c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d902      	bls.n	8000ac0 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8000aba:	2309      	movs	r3, #9
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e014      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <GetSector+0x154>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d806      	bhi.n	8000ad6 <GetSector+0xfe>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <GetSector+0x150>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d902      	bls.n	8000ad6 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e009      	b.n	8000aea <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <GetSector+0x158>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d805      	bhi.n	8000aea <GetSector+0x112>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <GetSector+0x15c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d901      	bls.n	8000aea <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 8000ae6:	230b      	movs	r3, #11
 8000ae8:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	08003ffe 	.word	0x08003ffe
 8000afc:	08007ffe 	.word	0x08007ffe
 8000b00:	08004000 	.word	0x08004000
 8000b04:	0800bffe 	.word	0x0800bffe
 8000b08:	08008000 	.word	0x08008000
 8000b0c:	0800ffff 	.word	0x0800ffff
 8000b10:	0800c000 	.word	0x0800c000
 8000b14:	0801ffff 	.word	0x0801ffff
 8000b18:	0803ffff 	.word	0x0803ffff
 8000b1c:	0805ffff 	.word	0x0805ffff
 8000b20:	0807ffff 	.word	0x0807ffff
 8000b24:	0809ffff 	.word	0x0809ffff
 8000b28:	080bffff 	.word	0x080bffff
 8000b2c:	080dfffe 	.word	0x080dfffe
 8000b30:	080ffffe 	.word	0x080ffffe
 8000b34:	080dffff 	.word	0x080dffff

08000b38 <HAL_USB_OTG_FS_MspInit>:

#include <xpd_usb.h>
#include <usb_device.h>

void HAL_USB_OTG_FS_MspInit(void* handle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000b40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b52:	230a      	movs	r3, #10
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_USB_OTG_FS_MspInit+0x44>)
 8000b5e:	f004 f9ff 	bl	8004f60 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2043      	movs	r0, #67	; 0x43
 8000b68:	f003 fed1 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b6c:	2043      	movs	r0, #67	; 0x43
 8000b6e:	f003 feea 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40020000 	.word	0x40020000

08000b80 <HAL_USB_OTG_FS_MspDeInit>:

void HAL_USB_OTG_FS_MspDeInit(void* handle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11 | GPIO_PIN_12);
 8000b88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <HAL_USB_OTG_FS_MspDeInit+0x20>)
 8000b8e:	f004 fb83 	bl	8005298 <HAL_GPIO_DeInit>

    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8000b92:	2043      	movs	r0, #67	; 0x43
 8000b94:	f003 fee5 	bl	8004962 <HAL_NVIC_DisableIRQ>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_USBD_Setup>:

void HAL_USBD_Setup(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    USB_INST2HANDLE(UsbDevice, USB_OTG_FS);
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_USBD_Setup+0x28>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bb0:	60da      	str	r2, [r3, #12]
    UsbDevice->Callbacks.DepInit = HAL_USB_OTG_FS_MspInit;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_USBD_Setup+0x28>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_USBD_Setup+0x2c>)
 8000bb8:	611a      	str	r2, [r3, #16]
    UsbDevice->Callbacks.DepDeinit = HAL_USB_OTG_FS_MspDeInit;
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HAL_USBD_Setup+0x28>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_USBD_Setup+0x30>)
 8000bc0:	615a      	str	r2, [r3, #20]
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	080068e4 	.word	0x080068e4
 8000bd0:	08000b39 	.word	0x08000b39
 8000bd4:	08000b81 	.word	0x08000b81

08000bd8 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void);

void OTG_FS_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    USB_vIRQHandler(UsbDevice);
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <OTG_FS_IRQHandler+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fb0d 	bl	8004200 <USB_vDevIRQHandler>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	080068e4 	.word	0x080068e4

08000bf0 <type_login>:

extern LoginTypeDef logins[LOGINS];

extern USBD_ReturnType USBD_HID_ReportIn(USBD_HID_IfHandleType *itf, void *data, uint16_t length);

void type_login(uint8_t n){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	//Send username
	if(*logins[n].en_username == 1){
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4a47      	ldr	r2, [pc, #284]	; (8000d1c <type_login+0x12c>)
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	4413      	add	r3, r2
 8000c02:	3308      	adds	r3, #8
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d13d      	bne.n	8000c88 <type_login+0x98>
		for(uint16_t i = 0; i < ENTRY_LEN / 2; i++){
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	81fb      	strh	r3, [r7, #14]
 8000c10:	e030      	b.n	8000c74 <type_login+0x84>
			if(logins[n].username[i*2] == 2 && logins[n].username[i*2 + 1] == 255){
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4a41      	ldr	r2, [pc, #260]	; (8000d1c <type_login+0x12c>)
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	4413      	add	r3, r2
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	89fa      	ldrh	r2, [r7, #14]
 8000c1e:	0052      	lsls	r2, r2, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d10b      	bne.n	8000c40 <type_login+0x50>
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4a3c      	ldr	r2, [pc, #240]	; (8000d1c <type_login+0x12c>)
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	4413      	add	r3, r2
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	3301      	adds	r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d01d      	beq.n	8000c7c <type_login+0x8c>
				break;
			}
			send_key(logins[n].username[i*2], logins[n].username[i*2 + 1], 1);
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4a36      	ldr	r2, [pc, #216]	; (8000d1c <type_login+0x12c>)
 8000c44:	011b      	lsls	r3, r3, #4
 8000c46:	4413      	add	r3, r2
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	89fa      	ldrh	r2, [r7, #14]
 8000c4c:	0052      	lsls	r2, r2, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	7818      	ldrb	r0, [r3, #0]
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <type_login+0x12c>)
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	4413      	add	r3, r2
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	3301      	adds	r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2201      	movs	r2, #1
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f000 f859 	bl	8000d20 <send_key>
		for(uint16_t i = 0; i < ENTRY_LEN / 2; i++){
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	3301      	adds	r3, #1
 8000c72:	81fb      	strh	r3, [r7, #14]
 8000c74:	89fb      	ldrh	r3, [r7, #14]
 8000c76:	2b1f      	cmp	r3, #31
 8000c78:	d9cb      	bls.n	8000c12 <type_login+0x22>
 8000c7a:	e000      	b.n	8000c7e <type_login+0x8e>
				break;
 8000c7c:	bf00      	nop
		}

		//Send Tab for next entry
		send_key(0x00, 0x2b, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	212b      	movs	r1, #43	; 0x2b
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f84c 	bl	8000d20 <send_key>
	}

	//Send password
	if(*logins[n].en_password == 1){
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <type_login+0x12c>)
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	330c      	adds	r3, #12
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d13c      	bne.n	8000d14 <type_login+0x124>
		for(uint16_t i = 0; i < ENTRY_LEN / 2; i++){
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	81bb      	strh	r3, [r7, #12]
 8000c9e:	e034      	b.n	8000d0a <type_login+0x11a>
			if(logins[n].password[i*2] == 2 && logins[n].password[i*2 + 1] == 255){
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <type_login+0x12c>)
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3304      	adds	r3, #4
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	89ba      	ldrh	r2, [r7, #12]
 8000cae:	0052      	lsls	r2, r2, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d10c      	bne.n	8000cd2 <type_login+0xe2>
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <type_login+0x12c>)
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	89bb      	ldrh	r3, [r7, #12]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2bff      	cmp	r3, #255	; 0xff
 8000cd0:	d01f      	beq.n	8000d12 <type_login+0x122>
				break;
			}
			send_key(logins[n].password[i*2], logins[n].password[i*2 + 1], 1);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <type_login+0x12c>)
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	3304      	adds	r3, #4
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	89ba      	ldrh	r2, [r7, #12]
 8000ce0:	0052      	lsls	r2, r2, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	7818      	ldrb	r0, [r3, #0]
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <type_login+0x12c>)
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	4413      	add	r3, r2
 8000cee:	3304      	adds	r3, #4
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	89bb      	ldrh	r3, [r7, #12]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f000 f80e 	bl	8000d20 <send_key>
		for(uint16_t i = 0; i < ENTRY_LEN / 2; i++){
 8000d04:	89bb      	ldrh	r3, [r7, #12]
 8000d06:	3301      	adds	r3, #1
 8000d08:	81bb      	strh	r3, [r7, #12]
 8000d0a:	89bb      	ldrh	r3, [r7, #12]
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	d9c7      	bls.n	8000ca0 <type_login+0xb0>
		}
	}
}
 8000d10:	e000      	b.n	8000d14 <type_login+0x124>
				break;
 8000d12:	bf00      	nop
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000990 	.word	0x20000990

08000d20 <send_key>:

void send_key(uint8_t mod, uint8_t key, uint16_t delay){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	80bb      	strh	r3, [r7, #4]
	//Send Key & Mod
	keyboard.KEYCODE1 = key;
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <send_key+0x60>)
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	7093      	strb	r3, [r2, #2]
	keyboard.MODIFIER = mod;
 8000d38:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <send_key+0x60>)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	7013      	strb	r3, [r2, #0]
	USBD_HID_ReportIn(keyboard_if, &keyboard, sizeof(keyboard));
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <send_key+0x64>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2208      	movs	r2, #8
 8000d44:	490e      	ldr	r1, [pc, #56]	; (8000d80 <send_key+0x60>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fb1a 	bl	8002380 <USBD_HID_ReportIn>
	HAL_Delay(delay);
 8000d4c:	88bb      	ldrh	r3, [r7, #4]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fcba 	bl	80046c8 <HAL_Delay>

	//Send Nothing
	keyboard.KEYCODE1 = 0x00;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <send_key+0x60>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	709a      	strb	r2, [r3, #2]
	keyboard.MODIFIER = 0x00;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <send_key+0x60>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	USBD_HID_ReportIn(keyboard_if, &keyboard, sizeof(keyboard));
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <send_key+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2208      	movs	r2, #8
 8000d66:	4906      	ldr	r1, [pc, #24]	; (8000d80 <send_key+0x60>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fb09 	bl	8002380 <USBD_HID_ReportIn>
	HAL_Delay(delay);
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fca9 	bl	80046c8 <HAL_Delay>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000888 	.word	0x20000888
 8000d84:	080068ac 	.word	0x080068ac

08000d88 <Logins_Init>:
uint8_t passwords[LOGINS][ENTRY_LEN];

uint8_t en_usernames[LOGINS];
uint8_t en_passwords[LOGINS];

void Logins_Init(){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < LOGINS; i++){
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	e027      	b.n	8000de4 <Logins_Init+0x5c>
		logins[i].username = &usernames[i];
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	0192      	lsls	r2, r2, #6
 8000d9a:	4917      	ldr	r1, [pc, #92]	; (8000df8 <Logins_Init+0x70>)
 8000d9c:	440a      	add	r2, r1
 8000d9e:	4917      	ldr	r1, [pc, #92]	; (8000dfc <Logins_Init+0x74>)
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	440b      	add	r3, r1
 8000da4:	601a      	str	r2, [r3, #0]
		logins[i].password = &passwords[i];
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	0192      	lsls	r2, r2, #6
 8000dac:	4914      	ldr	r1, [pc, #80]	; (8000e00 <Logins_Init+0x78>)
 8000dae:	440a      	add	r2, r1
 8000db0:	4912      	ldr	r1, [pc, #72]	; (8000dfc <Logins_Init+0x74>)
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	3304      	adds	r3, #4
 8000db8:	601a      	str	r2, [r3, #0]

		logins[i].en_username = &en_usernames[i];
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4911      	ldr	r1, [pc, #68]	; (8000e04 <Logins_Init+0x7c>)
 8000dc0:	440a      	add	r2, r1
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <Logins_Init+0x74>)
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3308      	adds	r3, #8
 8000dca:	601a      	str	r2, [r3, #0]
		logins[i].en_password = &en_passwords[i];
 8000dcc:	79fa      	ldrb	r2, [r7, #7]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	490d      	ldr	r1, [pc, #52]	; (8000e08 <Logins_Init+0x80>)
 8000dd2:	440a      	add	r2, r1
 8000dd4:	4909      	ldr	r1, [pc, #36]	; (8000dfc <Logins_Init+0x74>)
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	440b      	add	r3, r1
 8000dda:	330c      	adds	r3, #12
 8000ddc:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < LOGINS; i++){
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	3301      	adds	r3, #1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d9d4      	bls.n	8000d94 <Logins_Init+0xc>
	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	20000890 	.word	0x20000890
 8000dfc:	20000990 	.word	0x20000990
 8000e00:	200009d8 	.word	0x200009d8
 8000e04:	200009d4 	.word	0x200009d4
 8000e08:	200009d0 	.word	0x200009d0

08000e0c <Set_Login>:

void Set_Login(uint8_t *Buf){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	uint8_t id = Buf[BYTE_ID];
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < ENTRY_LEN; i++){
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e01e      	b.n	8000e5e <Set_Login+0x52>
		usernames[id][i] = Buf[BYTE_USERNAME + i];
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	3304      	adds	r3, #4
 8000e24:	461a      	mov	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	1899      	adds	r1, r3, r2
 8000e2a:	7bba      	ldrb	r2, [r7, #14]
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	7808      	ldrb	r0, [r1, #0]
 8000e30:	4915      	ldr	r1, [pc, #84]	; (8000e88 <Set_Login+0x7c>)
 8000e32:	0192      	lsls	r2, r2, #6
 8000e34:	440a      	add	r2, r1
 8000e36:	4413      	add	r3, r2
 8000e38:	4602      	mov	r2, r0
 8000e3a:	701a      	strb	r2, [r3, #0]
		passwords[id][i] = Buf[BYTE_PASSWORD + i];
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	3344      	adds	r3, #68	; 0x44
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	1899      	adds	r1, r3, r2
 8000e46:	7bba      	ldrb	r2, [r7, #14]
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	7808      	ldrb	r0, [r1, #0]
 8000e4c:	490f      	ldr	r1, [pc, #60]	; (8000e8c <Set_Login+0x80>)
 8000e4e:	0192      	lsls	r2, r2, #6
 8000e50:	440a      	add	r2, r1
 8000e52:	4413      	add	r3, r2
 8000e54:	4602      	mov	r2, r0
 8000e56:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < ENTRY_LEN; i++){
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b3f      	cmp	r3, #63	; 0x3f
 8000e62:	d9dd      	bls.n	8000e20 <Set_Login+0x14>
	}
	en_usernames[id] = Buf[BYTE_EN_USERNAME];
 8000e64:	7bbb      	ldrb	r3, [r7, #14]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	f892 1084 	ldrb.w	r1, [r2, #132]	; 0x84
 8000e6c:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <Set_Login+0x84>)
 8000e6e:	54d1      	strb	r1, [r2, r3]
	en_passwords[id] = Buf[BYTE_EN_PASSWORD];
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	f892 1085 	ldrb.w	r1, [r2, #133]	; 0x85
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <Set_Login+0x88>)
 8000e7a:	54d1      	strb	r1, [r2, r3]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	20000890 	.word	0x20000890
 8000e8c:	200009d8 	.word	0x200009d8
 8000e90:	200009d4 	.word	0x200009d4
 8000e94:	200009d0 	.word	0x200009d0

08000e98 <Get_Logins>:

void Get_Logins(){
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	466b      	mov	r3, sp
 8000ea0:	461d      	mov	r5, r3
	uint16_t buffer_len = (ENTRY_LEN * 2 + 2) * LOGINS;
 8000ea2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000ea6:	81bb      	strh	r3, [r7, #12]
	uint8_t Buf[buffer_len];
 8000ea8:	89bc      	ldrh	r4, [r7, #12]
 8000eaa:	4623      	mov	r3, r4
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	b2a0      	uxth	r0, r4
 8000eb2:	f04f 0100 	mov.w	r1, #0
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	00cb      	lsls	r3, r1, #3
 8000ec0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ec4:	00c2      	lsls	r2, r0, #3
 8000ec6:	b2a0      	uxth	r0, r4
 8000ec8:	f04f 0100 	mov.w	r1, #0
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	00cb      	lsls	r3, r1, #3
 8000ed6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000eda:	00c2      	lsls	r2, r0, #3
 8000edc:	4623      	mov	r3, r4
 8000ede:	3307      	adds	r3, #7
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ee8:	466b      	mov	r3, sp
 8000eea:	3300      	adds	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
	Flash_Read_Data(&flash_data, Buf, buffer_len);
 8000eee:	482d      	ldr	r0, [pc, #180]	; (8000fa4 <Get_Logins+0x10c>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	89ba      	ldrh	r2, [r7, #12]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fd4f 	bl	8000998 <Flash_Read_Data>
	for(uint8_t i = 0; i < LOGINS; i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	73bb      	strb	r3, [r7, #14]
 8000efe:	e048      	b.n	8000f92 <Get_Logins+0xfa>
		for(uint8_t j = 0; j < ENTRY_LEN; j++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e027      	b.n	8000f56 <Get_Logins+0xbe>
			usernames[i][j] = Buf[i * (ENTRY_LEN * 2 + 2) + j];
 8000f06:	7bba      	ldrb	r2, [r7, #14]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	019b      	lsls	r3, r3, #6
 8000f0c:	4413      	add	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	461a      	mov	r2, r3
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	18d1      	adds	r1, r2, r3
 8000f16:	7bba      	ldrb	r2, [r7, #14]
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	5c40      	ldrb	r0, [r0, r1]
 8000f1e:	4922      	ldr	r1, [pc, #136]	; (8000fa8 <Get_Logins+0x110>)
 8000f20:	0192      	lsls	r2, r2, #6
 8000f22:	440a      	add	r2, r1
 8000f24:	4413      	add	r3, r2
 8000f26:	4602      	mov	r2, r0
 8000f28:	701a      	strb	r2, [r3, #0]
			passwords[i][j] = Buf[i * (ENTRY_LEN * 2 + 2) + ENTRY_LEN + j];
 8000f2a:	7bba      	ldrb	r2, [r7, #14]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	019b      	lsls	r3, r3, #6
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	18d1      	adds	r1, r2, r3
 8000f3c:	7bba      	ldrb	r2, [r7, #14]
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	5c40      	ldrb	r0, [r0, r1]
 8000f44:	4919      	ldr	r1, [pc, #100]	; (8000fac <Get_Logins+0x114>)
 8000f46:	0192      	lsls	r2, r2, #6
 8000f48:	440a      	add	r2, r1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < ENTRY_LEN; j++){
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	3301      	adds	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b3f      	cmp	r3, #63	; 0x3f
 8000f5a:	d9d4      	bls.n	8000f06 <Get_Logins+0x6e>
		}
		en_usernames[i] = Buf[i * (ENTRY_LEN * 2 + 2) + ENTRY_LEN * 2];
 8000f5c:	7bba      	ldrb	r2, [r7, #14]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	5c89      	ldrb	r1, [r1, r2]
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <Get_Logins+0x118>)
 8000f72:	54d1      	strb	r1, [r2, r3]
		en_passwords[i] = Buf[i * (ENTRY_LEN * 2 + 2) + ENTRY_LEN * 2 + 1];
 8000f74:	7bba      	ldrb	r2, [r7, #14]
 8000f76:	4613      	mov	r3, r2
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	f103 0281 	add.w	r2, r3, #129	; 0x81
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	5c89      	ldrb	r1, [r1, r2]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <Get_Logins+0x11c>)
 8000f8a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < LOGINS; i++){
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73bb      	strb	r3, [r7, #14]
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d9b3      	bls.n	8000f00 <Get_Logins+0x68>
 8000f98:	46ad      	mov	sp, r5
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	080e0000 	.word	0x080e0000
 8000fa8:	20000890 	.word	0x20000890
 8000fac:	200009d8 	.word	0x200009d8
 8000fb0:	200009d4 	.word	0x200009d4
 8000fb4:	200009d0 	.word	0x200009d0

08000fb8 <Set_Logins>:

void Set_Logins(){
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	466b      	mov	r3, sp
 8000fc0:	461d      	mov	r5, r3
	uint16_t buffer_len = (ENTRY_LEN * 2 + 2) * LOGINS;
 8000fc2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000fc6:	81bb      	strh	r3, [r7, #12]
	uint8_t Buf[buffer_len];
 8000fc8:	89bc      	ldrh	r4, [r7, #12]
 8000fca:	4623      	mov	r3, r4
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	b2a0      	uxth	r0, r4
 8000fd2:	f04f 0100 	mov.w	r1, #0
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	00cb      	lsls	r3, r1, #3
 8000fe0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fe4:	00c2      	lsls	r2, r0, #3
 8000fe6:	b2a0      	uxth	r0, r4
 8000fe8:	f04f 0100 	mov.w	r1, #0
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	00cb      	lsls	r3, r1, #3
 8000ff6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ffa:	00c2      	lsls	r2, r0, #3
 8000ffc:	4623      	mov	r3, r4
 8000ffe:	3307      	adds	r3, #7
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	ebad 0d03 	sub.w	sp, sp, r3
 8001008:	466b      	mov	r3, sp
 800100a:	3300      	adds	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < LOGINS; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
 8001012:	e044      	b.n	800109e <Set_Logins+0xe6>
		for(uint8_t j = 0; j < ENTRY_LEN; j++){
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e025      	b.n	8001066 <Set_Logins+0xae>
			Buf[i * (ENTRY_LEN * 2 + 2) + j] = usernames[i][j];
 800101a:	7bb8      	ldrb	r0, [r7, #14]
 800101c:	7bf9      	ldrb	r1, [r7, #15]
 800101e:	7bba      	ldrb	r2, [r7, #14]
 8001020:	4613      	mov	r3, r2
 8001022:	019b      	lsls	r3, r3, #6
 8001024:	4413      	add	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	461a      	mov	r2, r3
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	4413      	add	r3, r2
 800102e:	4c23      	ldr	r4, [pc, #140]	; (80010bc <Set_Logins+0x104>)
 8001030:	0182      	lsls	r2, r0, #6
 8001032:	4422      	add	r2, r4
 8001034:	440a      	add	r2, r1
 8001036:	7811      	ldrb	r1, [r2, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	54d1      	strb	r1, [r2, r3]
			Buf[i * (ENTRY_LEN * 2 + 2) + ENTRY_LEN + j] = passwords[i][j];
 800103c:	7bb8      	ldrb	r0, [r7, #14]
 800103e:	7bf9      	ldrb	r1, [r7, #15]
 8001040:	7bba      	ldrb	r2, [r7, #14]
 8001042:	4613      	mov	r3, r2
 8001044:	019b      	lsls	r3, r3, #6
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	4413      	add	r3, r2
 8001052:	4c1b      	ldr	r4, [pc, #108]	; (80010c0 <Set_Logins+0x108>)
 8001054:	0182      	lsls	r2, r0, #6
 8001056:	4422      	add	r2, r4
 8001058:	440a      	add	r2, r1
 800105a:	7811      	ldrb	r1, [r2, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < ENTRY_LEN; j++){
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	3301      	adds	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b3f      	cmp	r3, #63	; 0x3f
 800106a:	d9d6      	bls.n	800101a <Set_Logins+0x62>
		}
		Buf[i * (ENTRY_LEN * 2 + 2) + ENTRY_LEN * 2] = en_usernames[i];
 800106c:	7bb9      	ldrb	r1, [r7, #14]
 800106e:	7bba      	ldrb	r2, [r7, #14]
 8001070:	4613      	mov	r3, r2
 8001072:	019b      	lsls	r3, r3, #6
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	3380      	adds	r3, #128	; 0x80
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <Set_Logins+0x10c>)
 800107c:	5c51      	ldrb	r1, [r2, r1]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	54d1      	strb	r1, [r2, r3]
		Buf[i * (ENTRY_LEN * 2 + 2) + ENTRY_LEN * 2 + 1] = en_passwords[i];
 8001082:	7bb9      	ldrb	r1, [r7, #14]
 8001084:	7bba      	ldrb	r2, [r7, #14]
 8001086:	4613      	mov	r3, r2
 8001088:	019b      	lsls	r3, r3, #6
 800108a:	4413      	add	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	3381      	adds	r3, #129	; 0x81
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <Set_Logins+0x110>)
 8001092:	5c51      	ldrb	r1, [r2, r1]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < LOGINS; i++){
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	3301      	adds	r3, #1
 800109c:	73bb      	strb	r3, [r7, #14]
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d9b7      	bls.n	8001014 <Set_Logins+0x5c>
	}
	Flash_Write_Data(&flash_data , Buf, buffer_len);
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <Set_Logins+0x114>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	89ba      	ldrh	r2, [r7, #12]
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fc1a 	bl	80008e4 <Flash_Write_Data>
 80010b0:	46ad      	mov	sp, r5
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000890 	.word	0x20000890
 80010c0:	200009d8 	.word	0x200009d8
 80010c4:	200009d4 	.word	0x200009d4
 80010c8:	200009d0 	.word	0x200009d0
 80010cc:	080e0000 	.word	0x080e0000

080010d0 <Set_Output_Buffer>:

void Set_Output_Buffer(uint8_t *Buf){
 80010d0:	b490      	push	{r4, r7}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < LOGINS; i++){
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e058      	b.n	8001190 <Set_Output_Buffer+0xc0>
		for(uint8_t j = 0; j < ENTRY_LEN; j++){
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e02a      	b.n	800113a <Set_Output_Buffer+0x6a>
			Buf[i*TX_BYTE_LEN + j] = usernames[i][j];
 80010e4:	7bf8      	ldrb	r0, [r7, #15]
 80010e6:	7bb9      	ldrb	r1, [r7, #14]
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	4613      	mov	r3, r2
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	4413      	add	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	441a      	add	r2, r3
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	4413      	add	r3, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4c29      	ldr	r4, [pc, #164]	; (80011a4 <Set_Output_Buffer+0xd4>)
 8001100:	0182      	lsls	r2, r0, #6
 8001102:	4422      	add	r2, r4
 8001104:	440a      	add	r2, r1
 8001106:	7812      	ldrb	r2, [r2, #0]
 8001108:	701a      	strb	r2, [r3, #0]
			Buf[i*TX_BYTE_LEN + ENTRY_LEN + j] = passwords[i][j];
 800110a:	7bf8      	ldrb	r0, [r7, #15]
 800110c:	7bb9      	ldrb	r1, [r7, #14]
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	4613      	mov	r3, r2
 8001112:	019b      	lsls	r3, r3, #6
 8001114:	4413      	add	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	4413      	add	r3, r2
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	4c1f      	ldr	r4, [pc, #124]	; (80011a8 <Set_Output_Buffer+0xd8>)
 800112a:	0182      	lsls	r2, r0, #6
 800112c:	4422      	add	r2, r4
 800112e:	440a      	add	r2, r1
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < ENTRY_LEN; j++){
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	3301      	adds	r3, #1
 8001138:	73bb      	strb	r3, [r7, #14]
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	2b3f      	cmp	r3, #63	; 0x3f
 800113e:	d9d1      	bls.n	80010e4 <Set_Output_Buffer+0x14>
		}
		Buf[i*TX_BYTE_LEN + ENTRY_LEN * 2] = en_usernames[i];
 8001140:	7bf9      	ldrb	r1, [r7, #15]
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	4613      	mov	r3, r2
 8001146:	019b      	lsls	r3, r3, #6
 8001148:	4413      	add	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	3380      	adds	r3, #128	; 0x80
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <Set_Output_Buffer+0xdc>)
 8001156:	5c52      	ldrb	r2, [r2, r1]
 8001158:	701a      	strb	r2, [r3, #0]
		Buf[i*TX_BYTE_LEN + ENTRY_LEN * 2 + 1] = en_passwords[i];
 800115a:	7bf9      	ldrb	r1, [r7, #15]
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	4613      	mov	r3, r2
 8001160:	019b      	lsls	r3, r3, #6
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	3381      	adds	r3, #129	; 0x81
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <Set_Output_Buffer+0xe0>)
 8001170:	5c52      	ldrb	r2, [r2, r1]
 8001172:	701a      	strb	r2, [r3, #0]
		Buf[i*TX_BYTE_LEN + ENTRY_LEN * 2 + 2] = i;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	4613      	mov	r3, r2
 8001178:	019b      	lsls	r3, r3, #6
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	3382      	adds	r3, #130	; 0x82
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < LOGINS; i++){
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	3301      	adds	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d9a3      	bls.n	80010de <Set_Output_Buffer+0xe>
	}
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bc90      	pop	{r4, r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000890 	.word	0x20000890
 80011a8:	200009d8 	.word	0x200009d8
 80011ac:	200009d4 	.word	0x200009d4
 80011b0:	200009d0 	.word	0x200009d0

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f003 fa14 	bl	80045e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 f89a 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f000 f966 	bl	8001490 <MX_GPIO_Init>
  MX_TIM1_Init();
 80011c4:	f000 f914 	bl	80013f0 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011c8:	f000 f8fe 	bl	80013c8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  set_device_state(OUTPUT);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 fa3d 	bl	800164c <set_device_state>

  Logins_Init();
 80011d2:	f7ff fdd9 	bl	8000d88 <Logins_Init>
  Get_Logins();
 80011d6:	f7ff fe5f 	bl	8000e98 <Get_Logins>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(device_state == PROGRAM){
 80011da:	4b40      	ldr	r3, [pc, #256]	; (80012dc <main+0x128>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d15e      	bne.n	80012a0 <main+0xec>
		//Init Program Stage
		HAL_USBD_Setup();
 80011e2:	f7ff fcdf 	bl	8000ba4 <HAL_USBD_Setup>
		UsbDevice_Init(device_state);
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <main+0x128>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fb00 	bl	80017f0 <UsbDevice_Init>

		while(device_state == PROGRAM){
 80011f0:	e051      	b.n	8001296 <main+0xe2>
			if(read_ready()){
 80011f2:	f7ff fb4d 	bl	8000890 <read_ready>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d04c      	beq.n	8001296 <main+0xe2>
				//Insert logic here
				_read(0, &rx_buffer, RX_BYTE_LEN);
 80011fc:	2286      	movs	r2, #134	; 0x86
 80011fe:	4938      	ldr	r1, [pc, #224]	; (80012e0 <main+0x12c>)
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fac7 	bl	8000794 <_read>
				if(rx_buffer[0] == 255 && rx_buffer[1] == 0 && rx_buffer[2] == 0){
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <main+0x12c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d119      	bne.n	8001242 <main+0x8e>
 800120e:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <main+0x12c>)
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d115      	bne.n	8001242 <main+0x8e>
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <main+0x12c>)
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d111      	bne.n	8001242 <main+0x8e>
					program_state = READ;
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <main+0x130>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
					Get_Logins();
 8001224:	f7ff fe38 	bl	8000e98 <Get_Logins>
					Set_Output_Buffer(&tx_buffer);
 8001228:	482f      	ldr	r0, [pc, #188]	; (80012e8 <main+0x134>)
 800122a:	f7ff ff51 	bl	80010d0 <Set_Output_Buffer>
					_write(0, &tx_buffer, TX_BYTE_LEN * LOGINS);
 800122e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8001232:	492d      	ldr	r1, [pc, #180]	; (80012e8 <main+0x134>)
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff f9bd 	bl	80005b4 <_write>
					program_state = PROGRAM_WAIT;
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <main+0x130>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e029      	b.n	8001296 <main+0xe2>
				}
				else if(rx_buffer[0] == 0 && rx_buffer[1] == 255 && rx_buffer[2] == 0){
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <main+0x12c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d111      	bne.n	800126e <main+0xba>
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <main+0x12c>)
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	2bff      	cmp	r3, #255	; 0xff
 8001250:	d10d      	bne.n	800126e <main+0xba>
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <main+0x12c>)
 8001254:	789b      	ldrb	r3, [r3, #2]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <main+0xba>
					program_state = WRITE;
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <main+0x130>)
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]
					Set_Login(&rx_buffer);
 8001260:	481f      	ldr	r0, [pc, #124]	; (80012e0 <main+0x12c>)
 8001262:	f7ff fdd3 	bl	8000e0c <Set_Login>
					program_state = PROGRAM_WAIT;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <main+0x130>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e013      	b.n	8001296 <main+0xe2>
				}
				else if(rx_buffer[0] == 0 && rx_buffer[1] == 0 && rx_buffer[2] == 255){
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <main+0x12c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <main+0xe2>
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <main+0x12c>)
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10b      	bne.n	8001296 <main+0xe2>
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <main+0x12c>)
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	2bff      	cmp	r3, #255	; 0xff
 8001284:	d107      	bne.n	8001296 <main+0xe2>
					program_state = WRITE_TO_MEM;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <main+0x130>)
 8001288:	2203      	movs	r2, #3
 800128a:	701a      	strb	r2, [r3, #0]
					Set_Logins();
 800128c:	f7ff fe94 	bl	8000fb8 <Set_Logins>
					program_state = PROGRAM_WAIT;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <main+0x130>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
		while(device_state == PROGRAM){
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <main+0x128>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d0a9      	beq.n	80011f2 <main+0x3e>
 800129e:	e79c      	b.n	80011da <main+0x26>
				}
			}
		}
	}

	else if(device_state == OUTPUT){
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <main+0x128>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d198      	bne.n	80011da <main+0x26>
		//Init Output Stage
		HAL_USBD_Setup();
 80012a8:	f7ff fc7c 	bl	8000ba4 <HAL_USBD_Setup>
		UsbDevice_Init(device_state);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <main+0x128>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fa9d 	bl	80017f0 <UsbDevice_Init>

		while(device_state == OUTPUT){
 80012b6:	e00b      	b.n	80012d0 <main+0x11c>
			if(type_state == SEND){
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <main+0x138>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d107      	bne.n	80012d0 <main+0x11c>
				type_login(login_n);
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <main+0x13c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fc93 	bl	8000bf0 <type_login>
				type_state = TYPE_WAIT;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <main+0x138>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		while(device_state == OUTPUT){
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <main+0x128>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0ef      	beq.n	80012b8 <main+0x104>
	if(device_state == PROGRAM){
 80012d8:	e77f      	b.n	80011da <main+0x26>
 80012da:	bf00      	nop
 80012dc:	20000d70 	.word	0x20000d70
 80012e0:	20000adc 	.word	0x20000adc
 80012e4:	20000ad8 	.word	0x20000ad8
 80012e8:	20000b64 	.word	0x20000b64
 80012ec:	20000070 	.word	0x20000070
 80012f0:	20000071 	.word	0x20000071

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	; 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f005 fa3a 	bl	800677c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <SystemClock_Config+0xcc>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <SystemClock_Config+0xcc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <SystemClock_Config+0xd0>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <SystemClock_Config+0xd0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001350:	2301      	movs	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	2302      	movs	r3, #2
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001364:	2304      	movs	r3, #4
 8001366:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001368:	2360      	movs	r3, #96	; 0x60
 800136a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001370:	2304      	movs	r3, #4
 8001372:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f004 f8d3 	bl	8005524 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001384:	f000 f98a 	bl	800169c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2302      	movs	r3, #2
 800138e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001394:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800139a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800139e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2101      	movs	r1, #1
 80013a6:	4618      	mov	r0, r3
 80013a8:	f004 fb34 	bl	8005a14 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013b2:	f000 f973 	bl	800169c <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	; 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2009      	movs	r0, #9
 80013d2:	f003 fa9c 	bl	800490e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013d6:	2009      	movs	r0, #9
 80013d8:	f003 fab5 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	200a      	movs	r0, #10
 80013e2:	f003 fa94 	bl	800490e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013e6:	200a      	movs	r0, #10
 80013e8:	f003 faad 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_TIM1_Init+0x98>)
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <MX_TIM1_Init+0x9c>)
 8001410:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59999;
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_TIM1_Init+0x98>)
 8001414:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_TIM1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 149;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_TIM1_Init+0x98>)
 8001422:	2295      	movs	r2, #149	; 0x95
 8001424:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_TIM1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_TIM1_Init+0x98>)
 800142e:	2201      	movs	r2, #1
 8001430:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_TIM1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_TIM1_Init+0x98>)
 800143a:	f004 fcbf 	bl	8005dbc <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001444:	f000 f92a 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <MX_TIM1_Init+0x98>)
 8001456:	f004 fea8 	bl	80061aa <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001460:	f000 f91c 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_TIM1_Init+0x98>)
 8001472:	f005 f8c1 	bl	80065f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800147c:	f000 f90e 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000d74 	.word	0x20000d74
 800148c:	40010000 	.word	0x40010000

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_GPIO_Init+0xb0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	21c0      	movs	r1, #192	; 0xc0
 80014fe:	4811      	ldr	r0, [pc, #68]	; (8001544 <MX_GPIO_Init+0xb4>)
 8001500:	f003 ffde 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : K1_Pin K0_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K0_Pin;
 8001504:	2318      	movs	r3, #24
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_GPIO_Init+0xb8>)
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <MX_GPIO_Init+0xbc>)
 8001518:	f003 fd22 	bl	8004f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001520:	2311      	movs	r3, #17
 8001522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_GPIO_Init+0xb4>)
 8001534:	f003 fd14 	bl	8004f60 <HAL_GPIO_Init>

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000
 8001548:	10310000 	.word	0x10310000
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == K1_Pin){
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b08      	cmp	r3, #8
 800155e:	d10e      	bne.n	800157e <HAL_GPIO_EXTI_Callback+0x2e>
		if(device_state == OUTPUT){
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d140      	bne.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
			if(HAL_GPIO_ReadPin(K1_GPIO_Port, K1_Pin) == GPIO_PIN_RESET){
 8001568:	2108      	movs	r1, #8
 800156a:	4823      	ldr	r0, [pc, #140]	; (80015f8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800156c:	f003 ff90 	bl	8005490 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d139      	bne.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
				type_state = SEND;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_GPIO_EXTI_Callback+0xac>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
						login_n += 1;
				}
			}
		}
	}
}
 800157c:	e035      	b.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
	else if (GPIO_Pin == K0_Pin){
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2b10      	cmp	r3, #16
 8001582:	d132      	bne.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
		if(HAL_GPIO_ReadPin(K0_GPIO_Port, K0_Pin) == GPIO_PIN_RESET){
 8001584:	2110      	movs	r1, #16
 8001586:	481c      	ldr	r0, [pc, #112]	; (80015f8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001588:	f003 ff82 	bl	8005490 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10c      	bne.n	80015ac <HAL_GPIO_EXTI_Callback+0x5c>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_GPIO_EXTI_Callback+0xb0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f06f 0201 	mvn.w	r2, #1
 80015a2:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim1);
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <HAL_GPIO_EXTI_Callback+0xb0>)
 80015a6:	f004 fc59 	bl	8005e5c <HAL_TIM_Base_Start_IT>
}
 80015aa:	e01e      	b.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
			HAL_TIM_Base_Stop_IT(&htim1);
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <HAL_GPIO_EXTI_Callback+0xb0>)
 80015ae:	f004 fcc5 	bl	8005f3c <HAL_TIM_Base_Stop_IT>
			if(device_state == OUTPUT){
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_GPIO_EXTI_Callback+0xa4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d117      	bne.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
				if(__HAL_TIM_GET_COUNTER(&htim1) < 149 && __HAL_TIM_GET_COUNTER(&htim1) > 25){
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_GPIO_EXTI_Callback+0xb0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	2b94      	cmp	r3, #148	; 0x94
 80015c2:	d812      	bhi.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_GPIO_EXTI_Callback+0xb0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	2b19      	cmp	r3, #25
 80015cc:	d90d      	bls.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
					if(login_n == LOGINS - 1){
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_GPIO_EXTI_Callback+0xb4>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d103      	bne.n	80015de <HAL_GPIO_EXTI_Callback+0x8e>
						login_n = 0;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_GPIO_EXTI_Callback+0xb4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
}
 80015dc:	e005      	b.n	80015ea <HAL_GPIO_EXTI_Callback+0x9a>
						login_n += 1;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_GPIO_EXTI_Callback+0xb4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_GPIO_EXTI_Callback+0xb4>)
 80015e8:	701a      	strb	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000d70 	.word	0x20000d70
 80015f8:	40021000 	.word	0x40021000
 80015fc:	20000070 	.word	0x20000070
 8001600:	20000d74 	.word	0x20000d74
 8001604:	20000071 	.word	0x20000071

08001608 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim1);
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001612:	f004 fc93 	bl	8005f3c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 149);
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2295      	movs	r2, #149	; 0x95
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
	if(device_state == OUTPUT){
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d103      	bne.n	800162e <HAL_TIM_PeriodElapsedCallback+0x26>
		set_device_state(PROGRAM);
 8001626:	2001      	movs	r0, #1
 8001628:	f000 f810 	bl	800164c <set_device_state>
	}
	else if(device_state == PROGRAM){
		set_device_state(OUTPUT);
	}
}
 800162c:	e006      	b.n	800163c <HAL_TIM_PeriodElapsedCallback+0x34>
	else if(device_state == PROGRAM){
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d102      	bne.n	800163c <HAL_TIM_PeriodElapsedCallback+0x34>
		set_device_state(OUTPUT);
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f808 	bl	800164c <set_device_state>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000d74 	.word	0x20000d74
 8001648:	20000d70 	.word	0x20000d70

0800164c <set_device_state>:

void set_device_state(DeviceStateTypeDef state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	if(state == OUTPUT){
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10a      	bne.n	8001672 <set_device_state+0x26>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2140      	movs	r1, #64	; 0x40
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <set_device_state+0x48>)
 8001662:	f003 ff2d 	bl	80054c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	480a      	ldr	r0, [pc, #40]	; (8001694 <set_device_state+0x48>)
 800166c:	f003 ff28 	bl	80054c0 <HAL_GPIO_WritePin>
 8001670:	e009      	b.n	8001686 <set_device_state+0x3a>
	}
	else{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <set_device_state+0x48>)
 8001678:	f003 ff22 	bl	80054c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <set_device_state+0x48>)
 8001682:	f003 ff1d 	bl	80054c0 <HAL_GPIO_WritePin>
	}
	device_state = state;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <set_device_state+0x4c>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	7013      	strb	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020000 	.word	0x40020000
 8001698:	20000d70 	.word	0x20000d70

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_TIM_Base_MspInit+0x48>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d115      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_TIM_Base_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_TIM_Base_MspInit+0x4c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_TIM_Base_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2019      	movs	r0, #25
 800172c:	f003 f8ef 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001730:	2019      	movs	r0, #25
 8001732:	f003 f908 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40010000 	.word	0x40010000
 8001744:	40023800 	.word	0x40023800

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f002 ff78 	bl	8004688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80017a0:	2008      	movs	r0, #8
 80017a2:	f003 fea7 	bl	80054f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017ae:	2010      	movs	r0, #16
 80017b0:	f003 fea0 	bl	80054f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017be:	f004 fbec 	bl	8005f9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000d74 	.word	0x20000d74

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <UsbDevice_Init>:
extern USBD_CDC_IfHandleType *const console_if;

extern USBD_HID_IfHandleType *const keyboard_if;

void UsbDevice_Init(DeviceStateTypeDef device_state)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
	if(device_state == OUTPUT){
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d121      	bne.n	8001844 <UsbDevice_Init+0x54>
		/* All fields of keyboard_if have to be properly set up */
		keyboard_if->Config.InEpNum = 0x83;
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <UsbDevice_Init+0xcc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2283      	movs	r2, #131	; 0x83
 8001806:	741a      	strb	r2, [r3, #16]

		/* Mount the interfaces to the device */
		USBD_Disconnect(UsbDevice);
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <UsbDevice_Init+0xd0>)
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fe72 	bl	80024f4 <USBD_Disconnect>
		USBD_Deinit(UsbDevice);
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <UsbDevice_Init+0xd0>)
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fe1a 	bl	800244c <USBD_Deinit>
		USBD_UnmountInterfaces(UsbDevice);
 8001818:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <UsbDevice_Init+0xd0>)
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fe25 	bl	800246a <USBD_UnmountInterfaces>
		USBD_HID_MountInterface(keyboard_if, UsbDevice);
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <UsbDevice_Init+0xcc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <UsbDevice_Init+0xd0>)
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd5b 	bl	80022e4 <USBD_HID_MountInterface>

		/* Initialize the device */
		USBD_Init(UsbDevice, dev_cfg);
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <UsbDevice_Init+0xd0>)
 8001830:	4a24      	ldr	r2, [pc, #144]	; (80018c4 <UsbDevice_Init+0xd4>)
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fdd7 	bl	80023e8 <USBD_Init>

		/* The device connection can be made */
		USBD_Connect(UsbDevice);
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <UsbDevice_Init+0xd0>)
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fe4e 	bl	80024de <USBD_Connect>
		USBD_Init(UsbDevice, dev_cfg);

		/* The device connection can be made */
		USBD_Connect(UsbDevice);
	}
}
 8001842:	e037      	b.n	80018b4 <UsbDevice_Init+0xc4>
	else if(device_state == PROGRAM){
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d134      	bne.n	80018b4 <UsbDevice_Init+0xc4>
		console_if->Config.InEpNum  = 0x81;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <UsbDevice_Init+0xd8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2281      	movs	r2, #129	; 0x81
 8001850:	749a      	strb	r2, [r3, #18]
		console_if->Config.OutEpNum = 0x01;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <UsbDevice_Init+0xd8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	745a      	strb	r2, [r3, #17]
		console_if->Config.NotEpNum = 0x82;
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <UsbDevice_Init+0xd8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2282      	movs	r2, #130	; 0x82
 8001860:	74da      	strb	r2, [r3, #19]
		console_if->LineCoding = lc;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <UsbDevice_Init+0xd8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a19      	ldr	r2, [pc, #100]	; (80018cc <UsbDevice_Init+0xdc>)
 8001868:	3314      	adds	r3, #20
 800186a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800186e:	6018      	str	r0, [r3, #0]
 8001870:	3304      	adds	r3, #4
 8001872:	8019      	strh	r1, [r3, #0]
 8001874:	3302      	adds	r3, #2
 8001876:	0c0a      	lsrs	r2, r1, #16
 8001878:	701a      	strb	r2, [r3, #0]
		USBD_Disconnect(UsbDevice);
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <UsbDevice_Init+0xd0>)
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fe39 	bl	80024f4 <USBD_Disconnect>
		USBD_Deinit(UsbDevice);
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <UsbDevice_Init+0xd0>)
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fde1 	bl	800244c <USBD_Deinit>
		USBD_UnmountInterfaces(UsbDevice);
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <UsbDevice_Init+0xd0>)
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fdec 	bl	800246a <USBD_UnmountInterfaces>
		USBD_CDC_MountInterface(console_if, UsbDevice);
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <UsbDevice_Init+0xd8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <UsbDevice_Init+0xd0>)
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fa48 	bl	8001d30 <USBD_CDC_MountInterface>
		USBD_Init(UsbDevice, dev_cfg);
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <UsbDevice_Init+0xd0>)
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <UsbDevice_Init+0xd4>)
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fd9e 	bl	80023e8 <USBD_Init>
		USBD_Connect(UsbDevice);
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <UsbDevice_Init+0xd0>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fe15 	bl	80024de <USBD_Connect>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	080068ac 	.word	0x080068ac
 80018c0:	20000dbc 	.word	0x20000dbc
 80018c4:	080068c0 	.word	0x080068c0
 80018c8:	08006830 	.word	0x08006830
 80018cc:	080068dc 	.word	0x080068dc

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ff67 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f004 ff0b 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fc57 	bl	80011b4 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001914:	08006998 	.word	0x08006998
  ldr r2, =_sbss
 8001918:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800191c:	20000fe0 	.word	0x20000fe0

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>

08001922 <USBD_EpAddr2Ref>:
 * @return The endpoint's reference
 */
static inline
USBD_EpHandleType* USBD_EpAddr2Ref      (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 800192e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da08      	bge.n	8001948 <USBD_EpAddr2Ref+0x26>
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	3338      	adds	r3, #56	; 0x38
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	3304      	adds	r3, #4
 8001946:	e006      	b.n	8001956 <USBD_EpAddr2Ref+0x34>
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	3306      	adds	r3, #6
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	3338      	adds	r3, #56	; 0x38
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	3304      	adds	r3, #4
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <USBD_EpOpen>:
 */
static inline void USBD_EpOpen          (USBD_HandleType *dev,
                                         uint8_t epAddr,
                                         USB_EndPointType type,
                                         uint16_t mps)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	4608      	mov	r0, r1
 800196c:	4611      	mov	r1, r2
 800196e:	461a      	mov	r2, r3
 8001970:	4603      	mov	r3, r0
 8001972:	70fb      	strb	r3, [r7, #3]
 8001974:	460b      	mov	r3, r1
 8001976:	70bb      	strb	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 800197c:	883b      	ldrh	r3, [r7, #0]
 800197e:	78ba      	ldrb	r2, [r7, #2]
 8001980:	78f9      	ldrb	r1, [r7, #3]
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f002 fa76 	bl	8003e74 <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	4619      	mov	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffc8 	bl	8001922 <USBD_EpAddr2Ref>
 8001992:	4603      	mov	r3, r0
 8001994:	2201      	movs	r2, #1
 8001996:	72da      	strb	r2, [r3, #11]
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <USBD_EpClose>:
 * @param dev: USB Device handle reference
 * @param epAddr: endpoint address
 */
static inline void USBD_EpClose         (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f002 faf5 	bl	8003fa0 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffb1 	bl	8001922 <USBD_EpAddr2Ref>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2200      	movs	r2, #0
 80019c4:	72da      	strb	r2, [r3, #11]
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <cdc_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t cdc_getDesc(USBD_CDC_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	460b      	mov	r3, r1
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	72fb      	strb	r3, [r7, #11]
    USBD_CDC_DescType *desc = (USBD_CDC_DescType*)dest;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	617b      	str	r3, [r7, #20]
    uint16_t len = sizeof(cdc_desc);
 80019e2:	2334      	movs	r3, #52	; 0x34
 80019e4:	827b      	strh	r3, [r7, #18]

    memcpy(dest, &cdc_desc, sizeof(cdc_desc));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a39      	ldr	r2, [pc, #228]	; (8001ad0 <cdc_getDesc+0x100>)
 80019ea:	4614      	mov	r4, r2
 80019ec:	469c      	mov	ip, r3
 80019ee:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80019f2:	4665      	mov	r5, ip
 80019f4:	4626      	mov	r6, r4
 80019f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019f8:	6028      	str	r0, [r5, #0]
 80019fa:	6069      	str	r1, [r5, #4]
 80019fc:	60aa      	str	r2, [r5, #8]
 80019fe:	60eb      	str	r3, [r5, #12]
 8001a00:	3410      	adds	r4, #16
 8001a02:	f10c 0c10 	add.w	ip, ip, #16
 8001a06:	4574      	cmp	r4, lr
 8001a08:	d1f3      	bne.n	80019f2 <cdc_getDesc+0x22>
 8001a0a:	4663      	mov	r3, ip
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	6810      	ldr	r0, [r2, #0]
 8001a10:	6018      	str	r0, [r3, #0]

#if (USBD_MAX_IF_COUNT > 2)
    /* Adjustment of interface indexes */
    desc->IAD.bFirstInterface  = ifNum;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	7afa      	ldrb	r2, [r7, #11]
 8001a16:	709a      	strb	r2, [r3, #2]
    desc->IAD.iFunction  = USBD_IIF_INDEX(ifNum, 0);
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	71da      	strb	r2, [r3, #7]

    desc->CID.bInterfaceNumber = ifNum;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	7afa      	ldrb	r2, [r7, #11]
 8001a26:	729a      	strb	r2, [r3, #10]
    desc->UFD.bMasterInterface = ifNum;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	7afa      	ldrb	r2, [r7, #11]
 8001a2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    desc->DID.bInterfaceNumber = ifNum + 1;
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    desc->CMFD.bDataInterface  = ifNum + 1;
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	769a      	strb	r2, [r3, #26]
    desc->UFD.bSlaveInterface0 = ifNum + 1;
 8001a46:	7afb      	ldrb	r3, [r7, #11]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    desc->CID.iInterface = USBD_IIF_INDEX(ifNum, 0);
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	741a      	strb	r2, [r3, #16]
    desc->DID.iInterface = USBD_IIF_INDEX(ifNum, 0);
 8001a5c:	7afb      	ldrb	r3, [r7, #11]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if (USBD_CDC_BREAK_SUPPORT == 1)
    if (CDC_APP(itf)->Break != NULL)
    {   desc->ACMFD.bmCapabilities |= 4; }
#endif /* USBD_CDC_BREAK_SUPPORT */

    if (itf->Config.Protocol != 0)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	7c1b      	ldrb	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <cdc_getDesc+0xb0>
    {
        desc->IAD.bFunctionProtocol  = itf->Config.Protocol;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	7c1a      	ldrb	r2, [r3, #16]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	719a      	strb	r2, [r3, #6]
        desc->CID.bInterfaceProtocol = itf->Config.Protocol;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	7c1a      	ldrb	r2, [r3, #16]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	73da      	strb	r2, [r3, #15]
    }

#if (USBD_CDC_NOTEP_USED == 1)
    desc->NED.bEndpointAddress = itf->Config.NotEpNum;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7cda      	ldrb	r2, [r3, #19]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#endif

    len += USBD_EpDesc(itf->Base.Device, itf->Config.OutEpNum, &dest[len]);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	7c59      	ldrb	r1, [r3, #17]
 8001a92:	8a7b      	ldrh	r3, [r7, #18]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f001 f933 	bl	8002d04 <USBD_EpDesc>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	8a7b      	ldrh	r3, [r7, #18]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	827b      	strh	r3, [r7, #18]
    len += USBD_EpDesc(itf->Base.Device, itf->Config.InEpNum, &dest[len]);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	7c99      	ldrb	r1, [r3, #18]
 8001ab0:	8a7b      	ldrh	r3, [r7, #18]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f001 f924 	bl	8002d04 <USBD_EpDesc>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	8a7b      	ldrh	r3, [r7, #18]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	827b      	strh	r3, [r7, #18]
        ed[0].wMaxPacketSize = USB_EP_BULK_FS_MPS;
        ed[1].wMaxPacketSize = USB_EP_BULK_FS_MPS;
    }
#endif

    return len;
 8001ac6:	8a7b      	ldrh	r3, [r7, #18]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	080068e8 	.word	0x080068e8

08001ad4 <cdc_getString>:
 * @param itf: reference of the CDC interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* cdc_getString(USBD_CDC_IfHandleType *itf, uint8_t intNum)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70fb      	strb	r3, [r7, #3]
    return itf->App->Name;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <cdc_init>:
 * @brief Initializes the interface by opening its endpoints
 *        and initializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_init(USBD_CDC_IfHandleType *itf)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]
        mps = USB_EP_BULK_HS_MPS;
    }
    else
#endif
    {
        mps = USB_EP_BULK_FS_MPS;
 8001b00:	2340      	movs	r3, #64	; 0x40
 8001b02:	817b      	strh	r3, [r7, #10]
    }

    /* Open EPs */
    USBD_EpOpen(dev, itf->Config.InEpNum , USB_EP_TYPE_BULK, mps);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7c99      	ldrb	r1, [r3, #18]
 8001b08:	897b      	ldrh	r3, [r7, #10]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ff28 	bl	8001962 <USBD_EpOpen>
    USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_BULK, mps);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7c59      	ldrb	r1, [r3, #17]
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff ff21 	bl	8001962 <USBD_EpOpen>
#if (USBD_CDC_NOTEP_USED == 1)
    if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7cdb      	ldrb	r3, [r3, #19]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d806      	bhi.n	8001b3a <cdc_init+0x48>
    {
        USBD_EpOpen(dev, itf->Config.NotEpNum, USB_EP_TYPE_INTERRUPT, CDC_NOT_PACKET_SIZE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7cd9      	ldrb	r1, [r3, #19]
 8001b30:	2308      	movs	r3, #8
 8001b32:	2203      	movs	r2, #3
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff ff14 	bl	8001962 <USBD_EpOpen>
    }
#endif

    /* Initialize application */
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Open, itf, &itf->LineCoding);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <cdc_init+0x62>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	3214      	adds	r2, #20
 8001b4e:	4611      	mov	r1, r2
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <cdc_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_deinit(USBD_CDC_IfHandleType *itf)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    if (itf->LineCoding.DataBits != 0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e9b      	ldrb	r3, [r3, #26]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d027      	beq.n	8001bbc <cdc_deinit+0x60>
    {
        USBD_HandleType *dev = itf->Base.Device;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]

        /* Close EPs */
        USBD_EpClose(dev, itf->Config.InEpNum);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7c9b      	ldrb	r3, [r3, #18]
 8001b76:	4619      	mov	r1, r3
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff ff11 	bl	80019a0 <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7c5b      	ldrb	r3, [r3, #17]
 8001b82:	4619      	mov	r1, r3
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff ff0b 	bl	80019a0 <USBD_EpClose>
#if (USBD_CDC_NOTEP_USED == 1)
        if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7cdb      	ldrb	r3, [r3, #19]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	2b05      	cmp	r3, #5
 8001b94:	d805      	bhi.n	8001ba2 <cdc_deinit+0x46>
        {
            USBD_EpClose(dev, itf->Config.NotEpNum);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7cdb      	ldrb	r3, [r3, #19]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7ff feff 	bl	80019a0 <USBD_EpClose>
        }
#endif

        /* Deinitialize application */
        USBD_SAFE_CALLBACK(CDC_APP(itf)->Close, itf);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <cdc_deinit+0x5a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
#if (USBD_HS_SUPPORT == 1)
        /* Reset the endpoint MPS to the desired size */
        USBD_EpAddr2Ref(dev, itf->Config.InEpNum)->MaxPacketSize  = CDC_DATA_PACKET_SIZE;
        USBD_EpAddr2Ref(dev, itf->Config.OutEpNum)->MaxPacketSize = CDC_DATA_PACKET_SIZE;
#endif
        itf->LineCoding.DataBits = 0;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	769a      	strb	r2, [r3, #26]
    }
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <cdc_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the CDC interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType cdc_setupStage(USBD_CDC_IfHandleType *itf)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	73fb      	strb	r3, [r7, #15]
    USBD_HandleType *dev = itf->Base.Device;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60bb      	str	r3, [r7, #8]

    switch (dev->Setup.RequestType.Type)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	791b      	ldrb	r3, [r3, #4]
 8001bda:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d126      	bne.n	8001c32 <cdc_setupStage+0x6e>
    {
        case USB_REQ_TYPE_CLASS:
        {
            switch (dev->Setup.Request)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	795b      	ldrb	r3, [r3, #5]
 8001be8:	2b22      	cmp	r3, #34	; 0x22
 8001bea:	d01d      	beq.n	8001c28 <cdc_setupStage+0x64>
 8001bec:	2b22      	cmp	r3, #34	; 0x22
 8001bee:	dc1e      	bgt.n	8001c2e <cdc_setupStage+0x6a>
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d002      	beq.n	8001bfa <cdc_setupStage+0x36>
 8001bf4:	2b21      	cmp	r3, #33	; 0x21
 8001bf6:	d00d      	beq.n	8001c14 <cdc_setupStage+0x50>
                    }
                    break;
#endif /* USBD_CDC_BREAK_SUPPORT */

                default:
                    break;
 8001bf8:	e019      	b.n	8001c2e <cdc_setupStage+0x6a>
                    cdc_deinit(itf);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffae 	bl	8001b5c <cdc_deinit>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3314      	adds	r3, #20
                    retval = USBD_CtrlReceiveData(dev,
 8001c04:	2207      	movs	r2, #7
 8001c06:	4619      	mov	r1, r3
 8001c08:	68b8      	ldr	r0, [r7, #8]
 8001c0a:	f000 fe81 	bl	8002910 <USBD_CtrlReceiveData>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]
                    break;
 8001c12:	e00d      	b.n	8001c30 <cdc_setupStage+0x6c>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3314      	adds	r3, #20
                    retval = USBD_CtrlSendData(dev,
 8001c18:	2207      	movs	r2, #7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	68b8      	ldr	r0, [r7, #8]
 8001c1e:	f000 fe49 	bl	80028b4 <USBD_CtrlSendData>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
                    break;
 8001c26:	e003      	b.n	8001c30 <cdc_setupStage+0x6c>
                    retval = USBD_E_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
                    break;
 8001c2c:	e000      	b.n	8001c30 <cdc_setupStage+0x6c>
                    break;
 8001c2e:	bf00      	nop
            }
            break;
 8001c30:	e000      	b.n	8001c34 <cdc_setupStage+0x70>
        }

        default:
            break;
 8001c32:	bf00      	nop
    }

    return retval;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <cdc_dataStage>:
/**
 * @brief Passes the received control endpoint data to the application.
 * @param itf: reference of the CDC interface
 */
static void cdc_dataStage(USBD_CDC_IfHandleType *itf)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60fb      	str	r3, [r7, #12]

    {
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	795b      	ldrb	r3, [r3, #5]
 8001c50:	2b20      	cmp	r3, #32
 8001c52:	d106      	bne.n	8001c62 <cdc_dataStage+0x24>
            (itf->LineCoding.DataBits != 0))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7e9b      	ldrb	r3, [r3, #26]
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <cdc_dataStage+0x24>
        {
            cdc_init(itf);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff48 	bl	8001af2 <cdc_init>
        }
    }
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <cdc_outData>:
 * @brief Notifies the application of a completed OUT transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_outData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Received, itf,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <cdc_outData+0x2e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	6811      	ldr	r1, [r2, #0]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	8892      	ldrh	r2, [r2, #4]
 8001c8c:	4252      	negs	r2, r2
 8001c8e:	4411      	add	r1, r2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	8892      	ldrh	r2, [r2, #4]
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
            ep->Transfer.Data - ep->Transfer.Length, ep->Transfer.Length);
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <cdc_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_inData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
#if (USBD_CDC_NOTEP_USED == 1)
    if (ep == USBD_EpAddr2Ref(itf->Base.Device, itf->Config.InEpNum))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7c9b      	ldrb	r3, [r3, #18]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f7ff fe34 	bl	8001922 <USBD_EpAddr2Ref>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d131      	bne.n	8001d26 <cdc_inData+0x86>
#endif
    {
        uint16_t len = ep->Transfer.Length;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	889b      	ldrh	r3, [r3, #4]
 8001cc6:	81fb      	strh	r3, [r7, #14]

        if (len == 0)
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <cdc_inData+0x3c>
        {
            /* if ZLP is finished, substitute original length */
            len = itf->TransmitLength;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8b9b      	ldrh	r3, [r3, #28]
 8001cd2:	81fb      	strh	r3, [r7, #14]
            itf->TransmitLength = 0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	839a      	strh	r2, [r3, #28]
 8001cda:	e010      	b.n	8001cfe <cdc_inData+0x5e>
        }
        else if ((len & (ep->MaxPacketSize - 1)) == 0)
 8001cdc:	89fa      	ldrh	r2, [r7, #14]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	891b      	ldrh	r3, [r3, #8]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <cdc_inData+0x5e>
        {
            /* if length mod MPS == 0, split the transfer by sending ZLP */
            itf->TransmitLength = len;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	89fa      	ldrh	r2, [r7, #14]
 8001cee:	839a      	strh	r2, [r3, #28]
            USBD_CDC_Transmit(itf, ep->Transfer.Data, 0);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f89b 	bl	8001e34 <USBD_CDC_Transmit>
        }

        /* callback when the endpoint isn't busy sending ZLP */
        if (ep->State != USB_EP_STATE_DATA)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	7adb      	ldrb	r3, [r3, #11]
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d00f      	beq.n	8001d26 <cdc_inData+0x86>
        {
            USBD_SAFE_CALLBACK(CDC_APP(itf)->Transmitted, itf, ep->Transfer.Data - len, len);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00a      	beq.n	8001d26 <cdc_inData+0x86>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	6811      	ldr	r1, [r2, #0]
 8001d1a:	89fa      	ldrh	r2, [r7, #14]
 8001d1c:	4252      	negs	r2, r2
 8001d1e:	4411      	add	r1, r2
 8001d20:	89fa      	ldrh	r2, [r7, #14]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
        }
    }
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <USBD_CDC_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_CDC_MountInterface(USBD_CDC_IfHandleType *itf, USBD_HandleType *dev)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]

    /* Note: CDC uses 2 interfaces */
    if (dev->IfCount < (USBD_MAX_IF_COUNT - 1))
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d86e      	bhi.n	8001e26 <USBD_CDC_MountInterface+0xf6>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &cdc_cbks;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <USBD_CDC_MountInterface+0x100>)
 8001d52:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	721a      	strb	r2, [r3, #8]
        itf->TransmitLength = 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	839a      	strh	r2, [r3, #28]

        {
            USBD_EpHandleType *ep;

#if (USBD_CDC_NOTEP_USED == 1)
            if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7cdb      	ldrb	r3, [r3, #19]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d811      	bhi.n	8001d96 <USBD_CDC_MountInterface+0x66>
            {
                ep = USBD_EpAddr2Ref(dev, itf->Config.NotEpNum);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7cdb      	ldrb	r3, [r3, #19]
 8001d76:	4619      	mov	r1, r3
 8001d78:	6838      	ldr	r0, [r7, #0]
 8001d7a:	f7ff fdd2 	bl	8001922 <USBD_EpAddr2Ref>
 8001d7e:	60b8      	str	r0, [r7, #8]
                ep->Type            = USB_EP_TYPE_INTERRUPT;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2203      	movs	r2, #3
 8001d84:	729a      	strb	r2, [r3, #10]
                ep->MaxPacketSize   = CDC_NOT_PACKET_SIZE;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	811a      	strh	r2, [r3, #8]
                ep->IfNum           = dev->IfCount;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	731a      	strb	r2, [r3, #12]
            }
#endif

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7c9b      	ldrb	r3, [r3, #18]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	f7ff fdc0 	bl	8001922 <USBD_EpAddr2Ref>
 8001da2:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2202      	movs	r2, #2
 8001da8:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	731a      	strb	r2, [r3, #12]

            ep = USBD_EpAddr2Ref(dev, itf->Config.OutEpNum);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7c5b      	ldrb	r3, [r3, #17]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f7ff fdae 	bl	8001922 <USBD_EpAddr2Ref>
 8001dc6:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	731a      	strb	r2, [r3, #12]
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	330a      	adds	r3, #10
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001df6:	3301      	adds	r3, #1
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	330a      	adds	r3, #10
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	0800691c 	.word	0x0800691c

08001e34 <USBD_CDC_Transmit>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Transmit(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	80fb      	strh	r3, [r7, #6]
    return USBD_EpSend(itf->Base.Device, itf->Config.InEpNum, data, length);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	7c99      	ldrb	r1, [r3, #18]
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	f000 ffc9 	bl	8002de4 <USBD_EpSend>
 8001e52:	4603      	mov	r3, r0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <USBD_CDC_Receive>:
 * @param data: pointer to the data to receive
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Receive(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	4613      	mov	r3, r2
 8001e68:	80fb      	strh	r3, [r7, #6]
    return USBD_EpReceive(itf->Base.Device, itf->Config.OutEpNum, data, length);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	7c59      	ldrb	r1, [r3, #17]
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	f000 ffe2 	bl	8002e3e <USBD_EpReceive>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <USBD_EpAddr2Ref>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8001e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da08      	bge.n	8001eaa <USBD_EpAddr2Ref+0x26>
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	3338      	adds	r3, #56	; 0x38
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	e006      	b.n	8001eb8 <USBD_EpAddr2Ref+0x34>
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	3306      	adds	r3, #6
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	3338      	adds	r3, #56	; 0x38
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <USBD_EpOpen>:
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	70fb      	strb	r3, [r7, #3]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	70bb      	strb	r3, [r7, #2]
 8001eda:	4613      	mov	r3, r2
 8001edc:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 8001ede:	883b      	ldrh	r3, [r7, #0]
 8001ee0:	78ba      	ldrb	r2, [r7, #2]
 8001ee2:	78f9      	ldrb	r1, [r7, #3]
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f001 ffc5 	bl	8003e74 <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffc8 	bl	8001e84 <USBD_EpAddr2Ref>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	72da      	strb	r2, [r3, #11]
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <USBD_EpClose>:
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f002 f844 	bl	8003fa0 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffb1 	bl	8001e84 <USBD_EpAddr2Ref>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2200      	movs	r2, #0
 8001f26:	72da      	strb	r2, [r3, #11]
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <hid_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t hid_getDesc(USBD_HID_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	72fb      	strb	r3, [r7, #11]
    USBD_HandleType *dev = itf->Base.Device;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61fb      	str	r3, [r7, #28]
    USBD_HID_DescType *desc = (USBD_HID_DescType*)dest;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
    uint16_t len = sizeof(hid_desc);
 8001f48:	2312      	movs	r3, #18
 8001f4a:	82fb      	strh	r3, [r7, #22]

    memcpy(dest, &hid_desc, sizeof(hid_desc));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <hid_getDesc+0x88>)
 8001f50:	461d      	mov	r5, r3
 8001f52:	4614      	mov	r4, r2
 8001f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f56:	6028      	str	r0, [r5, #0]
 8001f58:	6069      	str	r1, [r5, #4]
 8001f5a:	60aa      	str	r2, [r5, #8]
 8001f5c:	60eb      	str	r3, [r5, #12]
 8001f5e:	8823      	ldrh	r3, [r4, #0]
 8001f60:	822b      	strh	r3, [r5, #16]

    /* Set report size */
    desc->HIDCD.sHIDD[0].wItemLength = HID_APP(itf)->Report->DescLength;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	889a      	ldrh	r2, [r3, #4]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	821a      	strh	r2, [r3, #16]

#if (USBD_MAX_IF_COUNT > 1)
    /* Adjustment of interface indexes */
    desc->HID.bInterfaceNumber = ifNum;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	7afa      	ldrb	r2, [r7, #11]
 8001f72:	709a      	strb	r2, [r3, #2]

    desc->HID.iInterface = USBD_IIF_INDEX(ifNum, 0);
 8001f74:	7afb      	ldrb	r3, [r7, #11]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	721a      	strb	r2, [r3, #8]

#endif /* (USBD_MAX_IF_COUNT > 1) */

    /* Add endpoints */
    len += USBD_EpDesc(dev, itf->Config.InEpNum, &dest[len]);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	7c19      	ldrb	r1, [r3, #16]
 8001f82:	8afb      	ldrh	r3, [r7, #22]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	69f8      	ldr	r0, [r7, #28]
 8001f8c:	f000 feba 	bl	8002d04 <USBD_EpDesc>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	8afb      	ldrh	r3, [r7, #22]
 8001f96:	4413      	add	r3, r2
 8001f98:	82fb      	strh	r3, [r7, #22]
        dest[len - 1] = USBD_EpHsInterval(HID_APP(itf)->Report->Input.Interval_ms);
    }
    else
#endif /* (USBD_HS_SUPPORT == 1) */
    {
        dest[len - 1] = HID_APP(itf)->Report->Input.Interval_ms;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	8afb      	ldrh	r3, [r7, #22]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	7a12      	ldrb	r2, [r2, #8]
 8001faa:	701a      	strb	r2, [r3, #0]
            dest[len - 1] = HID_APP(itf)->Report->Output.Interval_ms;
        }
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    return len;
 8001fac:	8afb      	ldrh	r3, [r7, #22]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	0800693c 	.word	0x0800693c

08001fbc <hid_getString>:
 * @param itf: reference of the HID interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* hid_getString(USBD_HID_IfHandleType *itf, uint8_t intNum)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
    {
        return NULL;
    }
#else
#if (USBD_HID_REPORT_STRINGS != 0)
    if (intNum != 0)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00f      	beq.n	8001fee <hid_getString+0x32>
    {
        if (HID_APP(itf)->GetString != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <hid_getString+0x2e>
        {
            return HID_APP(itf)->GetString(itf, intNum);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	e004      	b.n	8001ff4 <hid_getString+0x38>
        }
        else
        {
            return NULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e002      	b.n	8001ff4 <hid_getString+0x38>
        }
    }
    else
#endif /* USBD_HID_REPORT_STRINGS */
    {
        return itf->App->Name;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
    }
#endif /* USBD_HID_ALTSETTINGS */
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <hid_init>:
 *        resetting the internal variables
 *        and initializing the attached application.
 * @param itf: reference of the HID interface
 */
static void hid_init(USBD_HID_IfHandleType *itf)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	613b      	str	r3, [r7, #16]
        mpsLimit = USB_EP_INTR_HS_MPS;
    }
    else
#endif
    {
        mpsLimit = USB_EP_INTR_FS_MPS;
 800200a:	2340      	movs	r3, #64	; 0x40
 800200c:	81fb      	strh	r3, [r7, #14]
    }
    mps = HID_APP(itf)->Report->Input.MaxSize;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	895b      	ldrh	r3, [r3, #10]
 8002016:	82fb      	strh	r3, [r7, #22]
    if (mps > mpsLimit)
 8002018:	8afa      	ldrh	r2, [r7, #22]
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	429a      	cmp	r2, r3
 800201e:	d901      	bls.n	8002024 <hid_init+0x28>
    {
        mps = mpsLimit;
 8002020:	89fb      	ldrh	r3, [r7, #14]
 8002022:	82fb      	strh	r3, [r7, #22]
    }
    USBD_EpOpen(dev, itf->Config.InEpNum, USB_EP_TYPE_INTERRUPT, mps);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7c19      	ldrb	r1, [r3, #16]
 8002028:	8afb      	ldrh	r3, [r7, #22]
 800202a:	2203      	movs	r2, #3
 800202c:	6938      	ldr	r0, [r7, #16]
 800202e:	f7ff ff49 	bl	8001ec4 <USBD_EpOpen>
        USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_INTERRUPT, mps);
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    /* Initialize state */
    itf->Request = 0;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	749a      	strb	r2, [r3, #18]
    itf->IdleRate = HID_APP(itf)->Report->Input.Interval_ms / 4;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	7a1b      	ldrb	r3, [r3, #8]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	b2da      	uxtb	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	745a      	strb	r2, [r3, #17]

    /* Initialize application */
    USBD_SAFE_CALLBACK(HID_APP(itf)->Init, itf);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <hid_init+0x60>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <hid_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the HID interface
 */
static void hid_deinit(USBD_HID_IfHandleType *itf)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]

    /* Close EPs */
    USBD_EpClose(dev, itf->Config.InEpNum);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7c1b      	ldrb	r3, [r3, #16]
 8002076:	4619      	mov	r1, r3
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff ff42 	bl	8001f02 <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    /* Deinitialize application */
    USBD_SAFE_CALLBACK(HID_APP(itf)->Deinit, itf);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <hid_deinit+0x2e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <hid_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the HID interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType hid_setupStage(USBD_HID_IfHandleType *itf)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	77fb      	strb	r3, [r7, #31]
    USBD_HandleType *dev = itf->Base.Device;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]

    switch (dev->Setup.RequestType.Type)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <hid_setupStage+0x26>
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d034      	beq.n	800212a <hid_setupStage+0x8e>
                    break;
            }
            break;
        }
        default:
            break;
 80020c0:	e0c2      	b.n	8002248 <hid_setupStage+0x1ac>
            if (dev->Setup.Request == USB_REQ_GET_DESCRIPTOR)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	795b      	ldrb	r3, [r3, #5]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d12d      	bne.n	8002126 <hid_setupStage+0x8a>
                switch (dev->Setup.Value >> 8)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	88db      	ldrh	r3, [r3, #6]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b21      	cmp	r3, #33	; 0x21
 80020d4:	d002      	beq.n	80020dc <hid_setupStage+0x40>
 80020d6:	2b22      	cmp	r3, #34	; 0x22
 80020d8:	d016      	beq.n	8002108 <hid_setupStage+0x6c>
                        break;
 80020da:	e025      	b.n	8002128 <hid_setupStage+0x8c>
                        void* data = dev->CtrlData;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	33fc      	adds	r3, #252	; 0xfc
 80020e0:	60fb      	str	r3, [r7, #12]
                        memcpy(dev->CtrlData, &hid_desc.HIDCD, sizeof(hid_desc.HIDCD));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 80020e8:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <hid_setupStage+0x1b8>)
 80020ea:	3309      	adds	r3, #9
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	6010      	str	r0, [r2, #0]
 80020f2:	6051      	str	r1, [r2, #4]
 80020f4:	7a1b      	ldrb	r3, [r3, #8]
 80020f6:	7213      	strb	r3, [r2, #8]
                        retval = USBD_CtrlSendData(dev, data, sizeof(hid_desc.HIDCD));
 80020f8:	2209      	movs	r2, #9
 80020fa:	68f9      	ldr	r1, [r7, #12]
 80020fc:	6978      	ldr	r0, [r7, #20]
 80020fe:	f000 fbd9 	bl	80028b4 <USBD_CtrlSendData>
 8002102:	4603      	mov	r3, r0
 8002104:	77fb      	strb	r3, [r7, #31]
                        break;
 8002106:	e00f      	b.n	8002128 <hid_setupStage+0x8c>
                                (void*)HID_APP(itf)->Report->Desc,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	6819      	ldr	r1, [r3, #0]
                                HID_APP(itf)->Report->DescLength);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
                        retval = USBD_CtrlSendData(dev,
 8002116:	889b      	ldrh	r3, [r3, #4]
 8002118:	461a      	mov	r2, r3
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f000 fbca 	bl	80028b4 <USBD_CtrlSendData>
 8002120:	4603      	mov	r3, r0
 8002122:	77fb      	strb	r3, [r7, #31]
                        break;
 8002124:	e000      	b.n	8002128 <hid_setupStage+0x8c>
            }
 8002126:	bf00      	nop
            break;
 8002128:	e08e      	b.n	8002248 <hid_setupStage+0x1ac>
            uint8_t reportId = (uint8_t)dev->Setup.Value;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	88db      	ldrh	r3, [r3, #6]
 800212e:	74fb      	strb	r3, [r7, #19]
            USBD_HID_ReportType reportType = dev->Setup.Value >> 8;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	88db      	ldrh	r3, [r3, #6]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	b29b      	uxth	r3, r3
 8002138:	74bb      	strb	r3, [r7, #18]
            switch (dev->Setup.Request)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	795b      	ldrb	r3, [r3, #5]
 800213e:	3b01      	subs	r3, #1
 8002140:	2b09      	cmp	r3, #9
 8002142:	d87f      	bhi.n	8002244 <hid_setupStage+0x1a8>
 8002144:	a201      	add	r2, pc, #4	; (adr r2, 800214c <hid_setupStage+0xb0>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	08002175 	.word	0x08002175
 8002150:	080021dd 	.word	0x080021dd
 8002154:	08002245 	.word	0x08002245
 8002158:	08002245 	.word	0x08002245
 800215c:	08002245 	.word	0x08002245
 8002160:	08002245 	.word	0x08002245
 8002164:	08002245 	.word	0x08002245
 8002168:	08002245 	.word	0x08002245
 800216c:	080021ad 	.word	0x080021ad
 8002170:	080021fb 	.word	0x080021fb
                    itf->Request = reportType;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7cba      	ldrb	r2, [r7, #18]
 8002178:	749a      	strb	r2, [r3, #18]
                    USBD_SAFE_CALLBACK(HID_APP(itf)->GetReport,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <hid_setupStage+0xfa>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	7c92      	ldrb	r2, [r2, #18]
 800218e:	b2d1      	uxtb	r1, r2
 8002190:	7cfa      	ldrb	r2, [r7, #19]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
                    if (itf->Request == 0)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7c9b      	ldrb	r3, [r3, #18]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <hid_setupStage+0x108>
                    {   retval = USBD_E_OK; }
 80021a0:	2300      	movs	r3, #0
 80021a2:	77fb      	strb	r3, [r7, #31]
                    itf->Request = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	749a      	strb	r2, [r3, #18]
                    break;
 80021aa:	e04c      	b.n	8002246 <hid_setupStage+0x1aa>
                    if (reportType == HID_REPORT_OUTPUT)
 80021ac:	7cbb      	ldrb	r3, [r7, #18]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d105      	bne.n	80021be <hid_setupStage+0x122>
                        max_len = HID_APP(itf)->Report->Output.MaxSize;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	8a1b      	ldrh	r3, [r3, #16]
 80021ba:	83bb      	strh	r3, [r7, #28]
 80021bc:	e004      	b.n	80021c8 <hid_setupStage+0x12c>
                        max_len = HID_APP(itf)->Report->Feature.MaxSize;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	899b      	ldrh	r3, [r3, #12]
 80021c6:	83bb      	strh	r3, [r7, #28]
                    retval = USBD_CtrlReceiveData(dev, dev->CtrlData, max_len);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	33fc      	adds	r3, #252	; 0xfc
 80021cc:	8bba      	ldrh	r2, [r7, #28]
 80021ce:	4619      	mov	r1, r3
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f000 fb9d 	bl	8002910 <USBD_CtrlReceiveData>
 80021d6:	4603      	mov	r3, r0
 80021d8:	77fb      	strb	r3, [r7, #31]
                    break;
 80021da:	e034      	b.n	8002246 <hid_setupStage+0x1aa>
                    dev->CtrlData[0] = itf->IdleRate;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7c5a      	ldrb	r2, [r3, #17]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                            dev->CtrlData, sizeof(itf->IdleRate));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	33fc      	adds	r3, #252	; 0xfc
                    retval = USBD_CtrlSendData(dev,
 80021ea:	2201      	movs	r2, #1
 80021ec:	4619      	mov	r1, r3
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f000 fb60 	bl	80028b4 <USBD_CtrlSendData>
 80021f4:	4603      	mov	r3, r0
 80021f6:	77fb      	strb	r3, [r7, #31]
                    break;
 80021f8:	e025      	b.n	8002246 <hid_setupStage+0x1aa>
                    uint16_t idleRate_ms = HID_IDLE_RATE_INDEFINITE;
 80021fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021fe:	837b      	strh	r3, [r7, #26]
                    uint8_t idleRate = dev->Setup.Value >> 8;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	88db      	ldrh	r3, [r3, #6]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	b29b      	uxth	r3, r3
 8002208:	747b      	strb	r3, [r7, #17]
                    if (reportId == 0)
 800220a:	7cfb      	ldrb	r3, [r7, #19]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <hid_setupStage+0x17a>
                    {   itf->IdleRate = idleRate; }
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7c7a      	ldrb	r2, [r7, #17]
 8002214:	745a      	strb	r2, [r3, #17]
                    if (idleRate > 0)
 8002216:	7c7b      	ldrb	r3, [r7, #17]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <hid_setupStage+0x18a>
                    {   idleRate_ms = 4 * itf->IdleRate; }
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7c5b      	ldrb	r3, [r3, #17]
 8002220:	b29b      	uxth	r3, r3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	837b      	strh	r3, [r7, #26]
                    USBD_SAFE_CALLBACK(HID_APP(itf)->SetIdle,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <hid_setupStage+0x1a2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	7cfa      	ldrb	r2, [r7, #19]
 8002238:	8b79      	ldrh	r1, [r7, #26]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
                    retval = USBD_E_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	77fb      	strb	r3, [r7, #31]
                    break;
 8002242:	e000      	b.n	8002246 <hid_setupStage+0x1aa>
                    break;
 8002244:	bf00      	nop
            break;
 8002246:	bf00      	nop
    }
    return retval;
 8002248:	7ffb      	ldrb	r3, [r7, #31]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	0800693c 	.word	0x0800693c

08002258 <hid_dataStage>:
/**
 * @brief Passes the received set report to the application.
 * @param itf: reference of the HID interface
 */
static void hid_dataStage(USBD_HID_IfHandleType *itf)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]

    if (dev->Setup.Request == HID_REQ_SET_REPORT)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	795b      	ldrb	r3, [r3, #5]
 800226a:	2b09      	cmp	r3, #9
 800226c:	d11b      	bne.n	80022a6 <hid_dataStage+0x4e>
    {
        itf->Request = dev->Setup.Value >> 8;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	88db      	ldrh	r3, [r3, #6]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2da      	uxtb	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	749a      	strb	r2, [r3, #18]
        USBD_SAFE_CALLBACK(HID_APP(itf)->SetReport, itf, itf->Request,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <hid_dataStage+0x48>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	691c      	ldr	r4, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7c9b      	ldrb	r3, [r3, #18]
 8002290:	b2d9      	uxtb	r1, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	895b      	ldrh	r3, [r3, #10]
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	47a0      	blx	r4
                dev->CtrlData, dev->Setup.Length);
        itf->Request = 0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	749a      	strb	r2, [r3, #18]
    }
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd90      	pop	{r4, r7, pc}

080022ae <hid_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the HID interface
 * @param ep: reference to the endpoint structure
 */
static void hid_inData(USBD_HID_IfHandleType *itf, USBD_EpHandleType *ep)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(HID_APP(itf)->InReportSent, itf,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <hid_inData+0x2e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	6811      	ldr	r1, [r2, #0]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	8892      	ldrh	r2, [r2, #4]
 80022d0:	4252      	negs	r2, r2
 80022d2:	440a      	add	r2, r1
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	4611      	mov	r1, r2
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
            *(ep->Transfer.Data - ep->Transfer.Length));
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <USBD_HID_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_HID_MountInterface(USBD_HID_IfHandleType *itf, USBD_HandleType *dev)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]

    if (dev->IfCount < USBD_MAX_IF_COUNT)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d83a      	bhi.n	8002372 <USBD_HID_MountInterface+0x8e>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &hid_cbks;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <USBD_HID_MountInterface+0x98>)
 8002306:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	721a      	strb	r2, [r3, #8]

        {
            USBD_EpHandleType *ep;

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7c1b      	ldrb	r3, [r3, #16]
 8002318:	4619      	mov	r1, r3
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f7ff fdb2 	bl	8001e84 <USBD_EpAddr2Ref>
 8002320:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_INTERRUPT;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2203      	movs	r2, #3
 8002326:	729a      	strb	r2, [r3, #10]
            ep->IfNum           = dev->IfCount;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	731a      	strb	r2, [r3, #12]
            ep->MaxPacketSize   = HID_APP(itf)->Report->Input.MaxSize;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	895a      	ldrh	r2, [r3, #10]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	811a      	strh	r2, [r3, #8]
            if (ep->MaxPacketSize > HID_EP_MPS)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	891b      	ldrh	r3, [r3, #8]
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d902      	bls.n	800234c <USBD_HID_MountInterface+0x68>
            {
                ep->MaxPacketSize = HID_EP_MPS;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2240      	movs	r2, #64	; 0x40
 800234a:	811a      	strh	r2, [r3, #8]
                }
            }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	330a      	adds	r3, #10
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002364:	3301      	adds	r3, #1
 8002366:	b2da      	uxtb	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	08006950 	.word	0x08006950

08002380 <USBD_HID_ReportIn>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_HID_ReportIn(USBD_HID_IfHandleType *itf, void *data, uint16_t length)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval;
    USBD_HandleType *dev = itf->Base.Device;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
    uint8_t reportId = (uint8_t)dev->Setup.Value;
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	88db      	ldrh	r3, [r3, #6]
 8002398:	75fb      	strb	r3, [r7, #23]

    /* If the function is invoked in the EP0 GetReport() callback context,
     * and the report ID matches, use EP0 to transfer the report */
    if ((itf->Request != 0) &&
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	7c9b      	ldrb	r3, [r3, #18]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <USBD_HID_ReportIn+0x4c>
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <USBD_HID_ReportIn+0x34>
        ((reportId == 0) || (reportId == ((uint8_t*)data)[0])))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	7dfa      	ldrb	r2, [r7, #23]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d10b      	bne.n	80023cc <USBD_HID_ReportIn+0x4c>
    {
        retval = USBD_CtrlSendData(dev, data, length);
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	69b8      	ldr	r0, [r7, #24]
 80023bc:	f000 fa7a 	bl	80028b4 <USBD_CtrlSendData>
 80023c0:	4603      	mov	r3, r0
 80023c2:	77fb      	strb	r3, [r7, #31]
        itf->Request = 0;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	749a      	strb	r2, [r3, #18]
 80023ca:	e008      	b.n	80023de <USBD_HID_ReportIn+0x5e>
    }
    else
    {
        retval = USBD_EpSend(dev, itf->Config.InEpNum, data, length);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	7c19      	ldrb	r1, [r3, #16]
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	69b8      	ldr	r0, [r7, #24]
 80023d6:	f000 fd05 	bl	8002de4 <USBD_EpSend>
 80023da:	4603      	mov	r3, r0
 80023dc:	77fb      	strb	r3, [r7, #31]
    }
    return retval;
 80023de:	7ffb      	ldrb	r3, [r7, #31]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <USBD_Init>:
 * @brief This function initializes the USB device.
 * @param dev: USB Device handle reference
 * @param desc: Device properties reference
 */
void USBD_Init(USBD_HandleType *dev, const USBD_DescriptionType *desc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    /* Assign USBD Descriptors */
    dev->Desc = desc;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	601a      	str	r2, [r3, #0]

    /* Set Device initial State */
    dev->ConfigSelector = 0;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dev->Features.RemoteWakeup = 0;
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8002406:	f36f 0341 	bfc	r3, #1, #1
 800240a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    dev->Features.SelfPowered  = dev->Desc->Config.SelfPowered;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	799b      	ldrb	r3, [r3, #6]
 8002414:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002418:	b2d9      	uxtb	r1, r3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8002420:	f361 0300 	bfi	r3, r1, #0, #1
 8002424:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

    /* For FS device some buffer space can be saved by changing
     * EP0 MPS to 32/16/8
     * HS capable devices must keep this value at 64 */
    dev->EP.IN [0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    dev->EP.OUT[0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4

    /* Initialize low level driver with device configuration */
    USBD_PD_Init(dev, &dev->Desc->Config);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f001 fb74 	bl	8003b2c <USB_vDevInit>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <USBD_Deinit>:
/**
 * @brief This function shuts down the USB device entirely.
 * @param dev: USB Device handle reference
 */
void USBD_Deinit(USBD_HandleType *dev)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    USBD_IfConfig(dev, 0);
 8002454:	2100      	movs	r1, #0
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fe42 	bl	80030e0 <USBD_IfConfig>

    /* Deinitialize low level driver */
    USBD_PD_Deinit(dev);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f001 fc3b 	bl	8003cd8 <USB_vDevDeinit>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <USBD_UnmountInterfaces>:
/**
 * @brief Removes all mounted interfaces from the device.
 * @param dev: USB Device handle reference
 */
void USBD_UnmountInterfaces(USBD_HandleType *dev)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
    int i;

    USBD_IfConfig(dev, 0);
 8002472:	2100      	movs	r1, #0
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fe33 	bl	80030e0 <USBD_IfConfig>

    dev->IfCount = 0;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (i = 1; i < USBD_MAX_EP_COUNT; i++)
 8002482:	2301      	movs	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e022      	b.n	80024ce <USBD_UnmountInterfaces+0x64>
    {
        dev->EP.IN [i].MaxPacketSize = 0;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4413      	add	r3, r2
 8002492:	3304      	adds	r3, #4
 8002494:	2200      	movs	r2, #0
 8002496:	801a      	strh	r2, [r3, #0]
        dev->EP.IN [i].State = USB_EP_STATE_CLOSED;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3304      	adds	r3, #4
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	3307      	adds	r3, #7
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
        dev->EP.OUT[i].MaxPacketSize = 0;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	330a      	adds	r3, #10
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	3304      	adds	r3, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	801a      	strh	r2, [r3, #0]
        dev->EP.OUT[i].State = USB_EP_STATE_CLOSED;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	330a      	adds	r3, #10
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4413      	add	r3, r2
 80024c2:	3307      	adds	r3, #7
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
    for (i = 1; i < USBD_MAX_EP_COUNT; i++)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3301      	adds	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d9d9      	bls.n	8002488 <USBD_UnmountInterfaces+0x1e>
    }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <USBD_Connect>:
/**
 * @brief This function logically connects (attaches) the device to the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Connect(USBD_HandleType *dev)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
    /* Start the low level driver */
    USBD_PD_Start(dev);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f001 fc22 	bl	8003d30 <USB_vDevStart_IT>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <USBD_Disconnect>:
/**
 * @brief This function logically disconnects (detaches) the device from the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Disconnect(USBD_HandleType *dev)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    USBD_IfConfig(dev, 0);
 80024fc:	2100      	movs	r1, #0
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fdee 	bl	80030e0 <USBD_IfConfig>

    /* Stop the low level driver */
    USBD_PD_Stop(dev);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f001 fc51 	bl	8003dac <USB_vDevStop_IT>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <USBD_ResetCallback>:
 *         - Resets any previously active configuration
 * @param dev: USB Device handle reference
 * @param speed: The new device speed
 */
void USBD_ResetCallback(USBD_HandleType *dev, USB_SpeedType speed)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	70fb      	strb	r3, [r7, #3]
    dev->Speed = speed;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Reset any previous configuration */
    USBD_IfConfig(dev, 0);
 8002526:	2100      	movs	r1, #0
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fdd9 	bl	80030e0 <USBD_IfConfig>
        }
    }
#endif

    /* Open control endpoint to start data transfers */
    USBD_PD_CtrlEpOpen(dev);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f001 fc92 	bl	8003e58 <USB_vCtrlEpOpen>
    dev->EP.OUT[0].State = USB_EP_STATE_IDLE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <USBD_SetAddress>:
 * @brief This function checks the SET_ADDRESS request's validity.
 * @param dev: USB Device handle reference: USB Device handle reference
 * @return OK if the request is accepted, INVALID otherwise
 */
static USBD_ReturnType USBD_SetAddress(USBD_HandleType *dev)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 800254c:	2303      	movs	r3, #3
 800254e:	73fb      	strb	r3, [r7, #15]

    /* The request is only valid when not configured yet */
    if ((dev->Setup.Index    == 0) &&
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	891b      	ldrh	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d114      	bne.n	8002582 <USBD_SetAddress+0x3e>
        (dev->Setup.Length   == 0) &&
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	895b      	ldrh	r3, [r3, #10]
    if ((dev->Setup.Index    == 0) &&
 800255c:	2b00      	cmp	r3, #0
 800255e:	d110      	bne.n	8002582 <USBD_SetAddress+0x3e>
        (dev->ConfigSelector == 0))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (dev->Setup.Length   == 0) &&
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10b      	bne.n	8002582 <USBD_SetAddress+0x3e>
    {
#if (USBD_SET_ADDRESS_IMMEDIATE == 1)
        USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	88db      	ldrh	r3, [r3, #6]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4619      	mov	r1, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f001 fc55 	bl	8003e28 <USB_vSetAddress>
#endif
        /* Address is accepted, it will be applied
         * after this Ctrl transfer is complete */
        retval = USBD_E_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <USBD_SetConfig>:
 * @brief This function switches to the requested configuration.
 * @param dev: USB Device handle reference
 * @return OK if the configuration is available, INVALID otherwise
 */
static USBD_ReturnType USBD_SetConfig(USBD_HandleType *dev)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8002594:	2303      	movs	r3, #3
 8002596:	73fb      	strb	r3, [r7, #15]
    uint8_t cfgNum = (uint8_t)dev->Setup.Value;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	88db      	ldrh	r3, [r3, #6]
 800259c:	73bb      	strb	r3, [r7, #14]

    if (cfgNum <= USBD_MAX_CONFIGURATION_COUNT)
 800259e:	7bbb      	ldrb	r3, [r7, #14]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d806      	bhi.n	80025b2 <USBD_SetConfig+0x26>
    {
        USBD_IfConfig(dev, cfgNum);
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fd99 	bl	80030e0 <USBD_IfConfig>

        retval = USBD_E_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <USBD_GetConfig>:
 * @brief This function sends the current configuration index on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetConfig(USBD_HandleType *dev)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    dev->CtrlData[0] = dev->ConfigSelector;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    return USBD_CtrlSendData(dev, dev->CtrlData, sizeof(dev->ConfigSelector));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	33fc      	adds	r3, #252	; 0xfc
 80025d4:	2201      	movs	r2, #1
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f96b 	bl	80028b4 <USBD_CtrlSendData>
 80025de:	4603      	mov	r3, r0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <USBD_GetStatus>:
 * @brief This function sends the device feature status on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetStatus(USBD_HandleType *dev)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
    uint16_t *devStatus = (uint16_t*)dev->CtrlData;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	33fc      	adds	r3, #252	; 0xfc
 80025f4:	60fb      	str	r3, [r7, #12]
    *devStatus = dev->Features.w;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	801a      	strh	r2, [r3, #0]
    return USBD_CtrlSendData(dev, devStatus, sizeof(*devStatus));
 80025fe:	2202      	movs	r2, #2
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f956 	bl	80028b4 <USBD_CtrlSendData>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <USBD_SetFeature>:
 * @brief This function enables the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_SetFeature(USBD_HandleType *dev)
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 800261a:	2303      	movs	r3, #3
 800261c:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	88db      	ldrh	r3, [r3, #6]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <USBD_SetFeature+0x26>
    {
        dev->Features.RemoteWakeup = 1;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <USBD_ClearFeature>:
 * @brief This function clears the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_ClearFeature(USBD_HandleType *dev)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 800264e:	2303      	movs	r3, #3
 8002650:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	88db      	ldrh	r3, [r3, #6]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <USBD_ClearFeature+0x26>
    {
        dev->Features.RemoteWakeup = 0;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8002660:	f36f 0341 	bfc	r3, #1, #1
 8002664:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <USBD_DevRequest>:
 * @brief This function handles standard device requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_DevRequest(USBD_HandleType *dev)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8002684:	2303      	movs	r3, #3
 8002686:	73fb      	strb	r3, [r7, #15]

    /* On device level only (the below) standard requests are supported */
    if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	791b      	ldrb	r3, [r3, #4]
 800268c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d144      	bne.n	8002720 <USBD_DevRequest+0xa4>
    {
        switch (dev->Setup.Request)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	795b      	ldrb	r3, [r3, #5]
 800269a:	2b09      	cmp	r3, #9
 800269c:	d842      	bhi.n	8002724 <USBD_DevRequest+0xa8>
 800269e:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <USBD_DevRequest+0x28>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	080026fd 	.word	0x080026fd
 80026a8:	08002715 	.word	0x08002715
 80026ac:	08002725 	.word	0x08002725
 80026b0:	08002709 	.word	0x08002709
 80026b4:	08002725 	.word	0x08002725
 80026b8:	080026d9 	.word	0x080026d9
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	08002725 	.word	0x08002725
 80026c4:	080026f1 	.word	0x080026f1
 80026c8:	080026e5 	.word	0x080026e5
        {
            case USB_REQ_GET_DESCRIPTOR:
                retval = USBD_GetDescriptor(dev);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fa9d 	bl	8002c0c <USBD_GetDescriptor>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]
                break;
 80026d6:	e026      	b.n	8002726 <USBD_DevRequest+0xaa>

            case USB_REQ_SET_ADDRESS:
                retval = USBD_SetAddress(dev);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff33 	bl	8002544 <USBD_SetAddress>
 80026de:	4603      	mov	r3, r0
 80026e0:	73fb      	strb	r3, [r7, #15]
                break;
 80026e2:	e020      	b.n	8002726 <USBD_DevRequest+0xaa>

            case USB_REQ_SET_CONFIGURATION:
                retval = USBD_SetConfig(dev);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff51 	bl	800258c <USBD_SetConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]
                break;
 80026ee:	e01a      	b.n	8002726 <USBD_DevRequest+0xaa>

            case USB_REQ_GET_CONFIGURATION:
                retval = USBD_GetConfig(dev);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff63 	bl	80025bc <USBD_GetConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	73fb      	strb	r3, [r7, #15]
                break;
 80026fa:	e014      	b.n	8002726 <USBD_DevRequest+0xaa>

            case USB_REQ_GET_STATUS:
                retval = USBD_GetStatus(dev);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff73 	bl	80025e8 <USBD_GetStatus>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
                break;
 8002706:	e00e      	b.n	8002726 <USBD_DevRequest+0xaa>

            case USB_REQ_SET_FEATURE:
                retval = USBD_SetFeature(dev);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff82 	bl	8002612 <USBD_SetFeature>
 800270e:	4603      	mov	r3, r0
 8002710:	73fb      	strb	r3, [r7, #15]
                break;
 8002712:	e008      	b.n	8002726 <USBD_DevRequest+0xaa>

            case USB_REQ_CLEAR_FEATURE:
                retval = USBD_ClearFeature(dev);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff96 	bl	8002646 <USBD_ClearFeature>
 800271a:	4603      	mov	r3, r0
 800271c:	73fb      	strb	r3, [r7, #15]
                break;
 800271e:	e002      	b.n	8002726 <USBD_DevRequest+0xaa>

            default:
                break;
        }
    }
 8002720:	bf00      	nop
 8002722:	e000      	b.n	8002726 <USBD_DevRequest+0xaa>
                break;
 8002724:	bf00      	nop
#endif /* (USBD_MS_OS_DESC_VERSION == 2) */
                break;
        }
    }
#endif /* (USBD_MS_OS_DESC_VERSION > 0) */
    return retval;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <USBD_IfClass_DataStage>:
 *        @ref USBD_ClassType::DataStage function.
 * @param itf: reference of the interface
 */
static inline void USBD_IfClass_DataStage(
        USBD_IfHandleType *itf)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->DataStage, itf);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <USBD_IfClass_DataStage+0x1c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <USBD_CtrlSendError>:
/**
 * @brief This function indicates a failed control request by stalling EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendError(USBD_HandleType *dev)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
    USBD_PD_EpSetStall(dev, 0x80);
 800275c:	2180      	movs	r1, #128	; 0x80
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f001 fc9d 	bl	800409e <USB_vEpSetStall>
    dev->EP.IN [0].State = USB_EP_STATE_STALL;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    USBD_PD_EpSetStall(dev, 0x00);
 800276c:	2100      	movs	r1, #0
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f001 fc95 	bl	800409e <USB_vEpSetStall>
    dev->EP.OUT[0].State = USB_EP_STATE_STALL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <USBD_CtrlSendStatus>:
/**
 * @brief This function indicates a successful control data OUT stage by sending ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendStatus(USBD_HandleType *dev)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    dev->EP.IN[0].State = USB_EP_STATE_STATUS;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2205      	movs	r2, #5
 8002790:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8002794:	2300      	movs	r3, #0
 8002796:	2200      	movs	r2, #0
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f001 fd09 	bl	80041b2 <USB_vEpSend>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <USBD_CtrlReceiveStatus>:
/**
 * @brief This function indicates a successful control data IN stage by receiving ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlReceiveStatus(USBD_HandleType *dev)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    dev->EP.OUT[0].State = USB_EP_STATE_STATUS;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2205      	movs	r2, #5
 80027b4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    USBD_PD_EpReceive(dev, 0x00, NULL, 0);
 80027b8:	2300      	movs	r3, #0
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f001 fcd3 	bl	800416a <USB_vEpReceive>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <USBD_CtrlInCallback>:
 *         - Provide completion callback and OUT status stage if it was a data stage
 *         - Set device address if it was requested
 * @param dev: USB Device handle reference
 */
void USBD_CtrlInCallback(USBD_HandleType *dev)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
    /* Last packet is MPS multiple, so send ZLP packet */
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	895b      	ldrh	r3, [r3, #10]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d219      	bcs.n	8002816 <USBD_CtrlInCallback+0x4a>
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d311      	bcc.n	8002816 <USBD_CtrlInCallback+0x4a>
        ((dev->EP.IN[0].Transfer.Length & (dev->EP.IN[0].MaxPacketSize - 1)) == 0))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002800:	3b01      	subs	r3, #1
 8002802:	4013      	ands	r3, r2
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <USBD_CtrlInCallback+0x4a>
    {
        USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8002808:	2300      	movs	r3, #0
 800280a:	2200      	movs	r2, #0
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f001 fccf 	bl	80041b2 <USB_vEpSend>
        {
            USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
        }
#endif
    }
}
 8002814:	e024      	b.n	8002860 <USBD_CtrlInCallback+0x94>
        dev->EP.IN[0].State = USB_EP_STATE_IDLE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        if (dev->Setup.RequestType.Direction == USB_DIRECTION_IN)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d019      	beq.n	8002860 <USBD_CtrlInCallback+0x94>
            if ((dev->ConfigSelector != 0) &&
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d011      	beq.n	800285a <USBD_CtrlInCallback+0x8e>
                (dev->Setup.RequestType.Recipient == USB_REQ_RECIPIENT_INTERFACE))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	791b      	ldrb	r3, [r3, #4]
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	b2db      	uxtb	r3, r3
            if ((dev->ConfigSelector != 0) &&
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10a      	bne.n	800285a <USBD_CtrlInCallback+0x8e>
                USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	891b      	ldrh	r3, [r3, #8]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	330a      	adds	r3, #10
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff6b 	bl	8002730 <USBD_IfClass_DataStage>
            USBD_CtrlReceiveStatus(dev);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa4 	bl	80027a8 <USBD_CtrlReceiveStatus>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <USBD_CtrlOutCallback>:
 * @brief This function manages the end of a control OUT endpoint transfer:
 *         - Provide completion callback and IN status stage if it was a data stage
 * @param dev: USB Device handle reference
 */
void USBD_CtrlOutCallback(USBD_HandleType *dev)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    /* If the callback is from a Data stage */
    if ((dev->Setup.Length > 0) &&
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	895b      	ldrh	r3, [r3, #10]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d019      	beq.n	80028ac <USBD_CtrlOutCallback+0x44>
        (dev->Setup.RequestType.Direction == USB_DIRECTION_OUT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	791b      	ldrb	r3, [r3, #4]
 800287c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002880:	b2db      	uxtb	r3, r3
    if ((dev->Setup.Length > 0) &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d112      	bne.n	80028ac <USBD_CtrlOutCallback+0x44>
    {
        /* Standard requests have no OUT direction data stage -> must be IF related */
        if (dev->ConfigSelector != 0)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <USBD_CtrlOutCallback+0x3e>
        {
            /* If callback for received EP0 data */
            USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	891b      	ldrh	r3, [r3, #8]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	330a      	adds	r3, #10
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff45 	bl	8002730 <USBD_IfClass_DataStage>
        }

        /* Proceed to Status stage */
        USBD_CtrlSendStatus(dev);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff6c 	bl	8002784 <USBD_CtrlSendStatus>
    }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <USBD_CtrlSendData>:
 * @param data: pointer to the data to send
 * @param len: length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlSendData(USBD_HandleType *dev, void *data, uint16_t len)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	791b      	ldrb	r3, [r3, #4]
 80028ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d018      	beq.n	8002906 <USBD_CtrlSendData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d113      	bne.n	8002906 <USBD_CtrlSendData+0x52>
    {
        /* Don't send more bytes than requested */
        if (dev->Setup.Length < len)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	895b      	ldrh	r3, [r3, #10]
 80028e2:	88fa      	ldrh	r2, [r7, #6]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d902      	bls.n	80028ee <USBD_CtrlSendData+0x3a>
        {
            len = dev->Setup.Length;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	895b      	ldrh	r3, [r3, #10]
 80028ec:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.IN[0].State = USB_EP_STATE_DATA;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2204      	movs	r2, #4
 80028f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        USBD_PD_EpSend(dev, 0x80, (const uint8_t*)data, len);
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f001 fc58 	bl	80041b2 <USB_vEpSend>

        retval = USBD_E_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <USBD_CtrlReceiveData>:
 * @param data: pointer to the target buffer to receive to
 * @param len: maximum allowed length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlReceiveData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	791b      	ldrb	r3, [r3, #4]
 8002926:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d118      	bne.n	8002962 <USBD_CtrlReceiveData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8002936:	2b03      	cmp	r3, #3
 8002938:	d113      	bne.n	8002962 <USBD_CtrlReceiveData+0x52>
    {
        /* Don't receive more bytes than requested */
        if (dev->Setup.Length < len)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	895b      	ldrh	r3, [r3, #10]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	429a      	cmp	r2, r3
 8002942:	d902      	bls.n	800294a <USBD_CtrlReceiveData+0x3a>
        {
            len = dev->Setup.Length;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	895b      	ldrh	r3, [r3, #10]
 8002948:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.OUT[0].State = USB_EP_STATE_DATA;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2204      	movs	r2, #4
 800294e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        USBD_PD_EpReceive(dev, 0x00, (uint8_t*)data, len);
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	2100      	movs	r1, #0
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f001 fc06 	bl	800416a <USB_vEpReceive>

        retval = USBD_E_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <USBD_SetupCallback>:
 *        and performs the endpoint's status stage if no data stage is requested
 *        or the request wasn't accepted.
 * @param dev: USB Device handle reference
 */
void USBD_SetupCallback(USBD_HandleType *dev)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8002974:	2303      	movs	r3, #3
 8002976:	73fb      	strb	r3, [r7, #15]

    dev->EP.OUT[0].State = USB_EP_STATE_SETUP;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2203      	movs	r2, #3
 800297c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

    /* Route the request to the recipient */
    switch (dev->Setup.RequestType.Recipient)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	791b      	ldrb	r3, [r3, #4]
 8002984:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d012      	beq.n	80029b4 <USBD_SetupCallback+0x48>
 800298e:	2b02      	cmp	r3, #2
 8002990:	dc16      	bgt.n	80029c0 <USBD_SetupCallback+0x54>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <USBD_SetupCallback+0x30>
 8002996:	2b01      	cmp	r3, #1
 8002998:	d006      	beq.n	80029a8 <USBD_SetupCallback+0x3c>
        case USB_REQ_RECIPIENT_ENDPOINT:
            retval = USBD_EpRequest(dev);
            break;

        default:
            break;
 800299a:	e011      	b.n	80029c0 <USBD_SetupCallback+0x54>
            retval = USBD_DevRequest(dev);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff fe6d 	bl	800267c <USBD_DevRequest>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
            break;
 80029a6:	e00c      	b.n	80029c2 <USBD_SetupCallback+0x56>
            retval = USBD_IfRequest(dev);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fc14 	bl	80031d6 <USBD_IfRequest>
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]
            break;
 80029b2:	e006      	b.n	80029c2 <USBD_SetupCallback+0x56>
            retval = USBD_EpRequest(dev);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 faae 	bl	8002f16 <USBD_EpRequest>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73fb      	strb	r3, [r7, #15]
            break;
 80029be:	e000      	b.n	80029c2 <USBD_SetupCallback+0x56>
            break;
 80029c0:	bf00      	nop
    }

    /* If the request was rejected, send Request Error (EP0 STALL) */
    if (retval != USBD_E_OK)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <USBD_SetupCallback+0x64>
    {
        USBD_CtrlSendError(dev);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fec3 	bl	8002754 <USBD_CtrlSendError>
    }
    else
    {
        /* Data stage starts in the requested direction */
    }
}
 80029ce:	e006      	b.n	80029de <USBD_SetupCallback+0x72>
    else if (dev->Setup.Length == 0)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	895b      	ldrh	r3, [r3, #10]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <USBD_SetupCallback+0x72>
        USBD_CtrlSendStatus(dev);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fed3 	bl	8002784 <USBD_CtrlSendStatus>
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <USBD_EpAddr2Ref>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 80029f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da08      	bge.n	8002a0c <USBD_EpAddr2Ref+0x26>
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3338      	adds	r3, #56	; 0x38
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4413      	add	r3, r2
 8002a08:	3304      	adds	r3, #4
 8002a0a:	e006      	b.n	8002a1a <USBD_EpAddr2Ref+0x34>
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	3306      	adds	r3, #6
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	3338      	adds	r3, #56	; 0x38
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4413      	add	r3, r2
 8002a18:	3304      	adds	r3, #4
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <USBD_IfClass_GetDesc>:
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	72fb      	strb	r3, [r7, #11]
    if (itf->Class->GetDescriptor != NULL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <USBD_IfClass_GetDesc+0x2a>
        { return itf->Class->GetDescriptor(itf, ifNum, dest); }
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	7af9      	ldrb	r1, [r7, #11]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	4798      	blx	r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	e000      	b.n	8002a52 <USBD_IfClass_GetDesc+0x2c>
        { return 0; }
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <USBD_DeviceDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the device descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_DeviceDesc(USBD_HandleType *dev, uint8_t *data)
{
 8002a5c:	b4b0      	push	{r4, r5, r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
    USB_DeviceDescType *desc = (USB_DeviceDescType*)data;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	60fb      	str	r3, [r7, #12]

    memcpy(data, &usbd_deviceDesc, sizeof(USB_DeviceDescType));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <USBD_DeviceDesc+0x5c>)
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4614      	mov	r4, r2
 8002a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a74:	6028      	str	r0, [r5, #0]
 8002a76:	6069      	str	r1, [r5, #4]
 8002a78:	60aa      	str	r2, [r5, #8]
 8002a7a:	60eb      	str	r3, [r5, #12]
 8002a7c:	8823      	ldrh	r3, [r4, #0]
 8002a7e:	822b      	strh	r3, [r5, #16]

    desc->bMaxPacketSize = dev->EP.OUT[0].MaxPacketSize;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	71da      	strb	r2, [r3, #7]
    desc->idVendor       = dev->Desc->Vendor.ID;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	8a1a      	ldrh	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	811a      	strh	r2, [r3, #8]
    desc->idProduct      = dev->Desc->Product.ID;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	8b1a      	ldrh	r2, [r3, #24]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	815a      	strh	r2, [r3, #10]
    desc->bcdDevice      = dev->Desc->Product.Version.bcd;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	8b5a      	ldrh	r2, [r3, #26]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	819a      	strh	r2, [r3, #12]

    return sizeof(USB_DeviceDescType);
 8002aaa:	2312      	movs	r3, #18
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bcb0      	pop	{r4, r5, r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	08006974 	.word	0x08006974

08002abc <USBD_ConfigDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the configuration descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_ConfigDesc(USBD_HandleType *dev, uint8_t *data)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
    USB_ConfigDescType *desc = (USB_ConfigDescType*)data;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]
    uint16_t wTotalLength = sizeof(USB_ConfigDescType);
 8002aca:	2309      	movs	r3, #9
 8002acc:	82fb      	strh	r3, [r7, #22]
    uint8_t ifNum;
    USBD_IfHandleType *itf = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]

    /* Get the individual interface descriptors */
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	757b      	strb	r3, [r7, #21]
 8002ad6:	e021      	b.n	8002b1c <USBD_ConfigDesc+0x60>
    {
        /* Associated interfaces return the entire descriptor */
        if (dev->IF[ifNum] == itf) { continue; }
 8002ad8:	7d7b      	ldrb	r3, [r7, #21]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	330a      	adds	r3, #10
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d014      	beq.n	8002b14 <USBD_ConfigDesc+0x58>

        itf = dev->IF[ifNum];
 8002aea:	7d7b      	ldrb	r3, [r7, #21]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	330a      	adds	r3, #10
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	613b      	str	r3, [r7, #16]
        wTotalLength += USBD_IfClass_GetDesc(itf, ifNum, &data[wTotalLength]);
 8002af8:	8afb      	ldrh	r3, [r7, #22]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	441a      	add	r2, r3
 8002afe:	7d7b      	ldrb	r3, [r7, #21]
 8002b00:	4619      	mov	r1, r3
 8002b02:	6938      	ldr	r0, [r7, #16]
 8002b04:	f7ff ff8f 	bl	8002a26 <USBD_IfClass_GetDesc>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	8afb      	ldrh	r3, [r7, #22]
 8002b0e:	4413      	add	r3, r2
 8002b10:	82fb      	strh	r3, [r7, #22]
 8002b12:	e000      	b.n	8002b16 <USBD_ConfigDesc+0x5a>
        if (dev->IF[ifNum] == itf) { continue; }
 8002b14:	bf00      	nop
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8002b16:	7d7b      	ldrb	r3, [r7, #21]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	757b      	strb	r3, [r7, #21]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b22:	7d7a      	ldrb	r2, [r7, #21]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3d7      	bcc.n	8002ad8 <USBD_ConfigDesc+0x1c>
    }

    /* Get the configuration descriptor */
    desc->bLength               = sizeof(USB_ConfigDescType);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2209      	movs	r2, #9
 8002b2c:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType       = USB_DESC_TYPE_CONFIGURATION;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2202      	movs	r2, #2
 8002b32:	705a      	strb	r2, [r3, #1]
    desc->wTotalLength          = wTotalLength;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8afa      	ldrh	r2, [r7, #22]
 8002b38:	805a      	strh	r2, [r3, #2]
    desc->bNumInterfaces        = dev->IfCount;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	711a      	strb	r2, [r3, #4]
    desc->bConfigurationValue   = 1;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	715a      	strb	r2, [r3, #5]
    desc->iConfiguration        = USBD_ISTR_CONFIG;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2240      	movs	r2, #64	; 0x40
 8002b4e:	719a      	strb	r2, [r3, #6]
    desc->bmAttributes          = 0x80 | dev->Desc->Config.b;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	799b      	ldrb	r3, [r3, #6]
 8002b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	71da      	strb	r2, [r3, #7]
    desc->bMaxPower             = dev->Desc->Config.MaxCurrent_mA / 2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	889b      	ldrh	r3, [r3, #4]
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	721a      	strb	r2, [r3, #8]

    return wTotalLength;
 8002b70:	8afb      	ldrh	r3, [r7, #22]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <USBD_GetStringDesc>:
 * @param str: the input ASCII string
 * @param data: the target container for the string descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_GetStringDesc(const char *str, uint8_t *data)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b087      	sub	sp, #28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
    uint16_t *dst = (uint16_t*)&data[2];
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	3302      	adds	r3, #2
 8002b88:	617b      	str	r3, [r7, #20]
    data[0] = 2;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	701a      	strb	r2, [r3, #0]
    data[1] = USB_DESC_TYPE_STRING;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	701a      	strb	r2, [r3, #0]

    /* If ASCII, convert to Unicode */
    if (str[1] != 0)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <USBD_GetStringDesc+0x56>
    {
        uint8_t  *src = (uint8_t*)str;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        while (*src != 0)
 8002ba6:	e00e      	b.n	8002bc6 <USBD_GetStringDesc+0x4c>
        {
            *dst++ = (uint16_t)*src++;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	613a      	str	r2, [r7, #16]
 8002bae:	7819      	ldrb	r1, [r3, #0]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	1c9a      	adds	r2, r3, #2
 8002bb4:	617a      	str	r2, [r7, #20]
 8002bb6:	b28a      	uxth	r2, r1
 8002bb8:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ec      	bne.n	8002ba8 <USBD_GetStringDesc+0x2e>
 8002bce:	e014      	b.n	8002bfa <USBD_GetStringDesc+0x80>
        }
    }
    else /* If Unicode already, just copy */
    {
        uint16_t *src = (uint16_t*)str;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]
        while (*src != 0)
 8002bd4:	e00d      	b.n	8002bf2 <USBD_GetStringDesc+0x78>
        {
            *dst++ = *src++;
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	1c93      	adds	r3, r2, #2
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	1c99      	adds	r1, r3, #2
 8002be0:	6179      	str	r1, [r7, #20]
 8002be2:	8812      	ldrh	r2, [r2, #0]
 8002be4:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	3302      	adds	r3, #2
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ed      	bne.n	8002bd6 <USBD_GetStringDesc+0x5c>
        }
    }
    return data[0];
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <USBD_GetDescriptor>:
 * @brief This function collects and transfers the requested descriptor through EP0.
 * @param dev: USB Device handle reference
 * @return OK if the descriptor is provided, INVALID if not supported
 */
USBD_ReturnType USBD_GetDescriptor(USBD_HandleType *dev)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8002c14:	2303      	movs	r3, #3
 8002c16:	75fb      	strb	r3, [r7, #23]

    uint16_t len = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	82bb      	strh	r3, [r7, #20]
    uint8_t *data = dev->CtrlData;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	33fc      	adds	r3, #252	; 0xfc
 8002c20:	613b      	str	r3, [r7, #16]

    /* High byte identifies descriptor type */
    switch (dev->Setup.Value >> 8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	88db      	ldrh	r3, [r3, #6]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d014      	beq.n	8002c58 <USBD_GetDescriptor+0x4c>
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	dc54      	bgt.n	8002cdc <USBD_GetDescriptor+0xd0>
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d002      	beq.n	8002c3c <USBD_GetDescriptor+0x30>
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d007      	beq.n	8002c4a <USBD_GetDescriptor+0x3e>
            break;
        }
#endif /* (USBD_LPM_SUPPORT == 1) || (USBD_MS_OS_DESC_VERSION == 2) */

        default:
            break;
 8002c3a:	e04f      	b.n	8002cdc <USBD_GetDescriptor+0xd0>
            len = USBD_DeviceDesc(dev, data);
 8002c3c:	6939      	ldr	r1, [r7, #16]
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ff0c 	bl	8002a5c <USBD_DeviceDesc>
 8002c44:	4603      	mov	r3, r0
 8002c46:	82bb      	strh	r3, [r7, #20]
            break;
 8002c48:	e049      	b.n	8002cde <USBD_GetDescriptor+0xd2>
            len = USBD_ConfigDesc(dev, data);
 8002c4a:	6939      	ldr	r1, [r7, #16]
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff35 	bl	8002abc <USBD_ConfigDesc>
 8002c52:	4603      	mov	r3, r0
 8002c54:	82bb      	strh	r3, [r7, #20]
            break;
 8002c56:	e042      	b.n	8002cde <USBD_GetDescriptor+0xd2>
            switch (dev->Setup.Value & 0xFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	88db      	ldrh	r3, [r3, #6]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d023      	beq.n	8002caa <USBD_GetDescriptor+0x9e>
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	dc2b      	bgt.n	8002cbe <USBD_GetDescriptor+0xb2>
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d015      	beq.n	8002c96 <USBD_GetDescriptor+0x8a>
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	dc27      	bgt.n	8002cbe <USBD_GetDescriptor+0xb2>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <USBD_GetDescriptor+0x6c>
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d005      	beq.n	8002c82 <USBD_GetDescriptor+0x76>
 8002c76:	e022      	b.n	8002cbe <USBD_GetDescriptor+0xb2>
                    data = (uint8_t*)&usbd_langIdDesc;
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <USBD_GetDescriptor+0xf4>)
 8002c7a:	613b      	str	r3, [r7, #16]
                    len  = sizeof(usbd_langIdDesc);
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	82bb      	strh	r3, [r7, #20]
                    break;
 8002c80:	e02b      	b.n	8002cda <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Vendor.Name, data);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	6939      	ldr	r1, [r7, #16]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff75 	bl	8002b7a <USBD_GetStringDesc>
 8002c90:	4603      	mov	r3, r0
 8002c92:	82bb      	strh	r3, [r7, #20]
                    break;
 8002c94:	e021      	b.n	8002cda <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Product.Name, data);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	6939      	ldr	r1, [r7, #16]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff6b 	bl	8002b7a <USBD_GetStringDesc>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	82bb      	strh	r3, [r7, #20]
                    break;
 8002ca8:	e017      	b.n	8002cda <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Config.Name, data);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6939      	ldr	r1, [r7, #16]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff61 	bl	8002b7a <USBD_GetStringDesc>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	82bb      	strh	r3, [r7, #20]
                    break;
 8002cbc:	e00d      	b.n	8002cda <USBD_GetDescriptor+0xce>
                    const char* str = USBD_IfString(dev);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa5e 	bl	8003180 <USBD_IfString>
 8002cc4:	60f8      	str	r0, [r7, #12]
                    if (str != NULL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <USBD_GetDescriptor+0xcc>
                        len = USBD_GetStringDesc(str, data);
 8002ccc:	6939      	ldr	r1, [r7, #16]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff ff53 	bl	8002b7a <USBD_GetStringDesc>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	82bb      	strh	r3, [r7, #20]
                    break;
 8002cd8:	bf00      	nop
            break;
 8002cda:	e000      	b.n	8002cde <USBD_GetDescriptor+0xd2>
            break;
 8002cdc:	bf00      	nop
    }

    /* Transfer the non-null descriptor */
    if (len > 0)
 8002cde:	8abb      	ldrh	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <USBD_GetDescriptor+0xe8>
    {
        retval = USBD_CtrlSendData(dev, data, len);
 8002ce4:	8abb      	ldrh	r3, [r7, #20]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6939      	ldr	r1, [r7, #16]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fde2 	bl	80028b4 <USBD_CtrlSendData>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	08006970 	.word	0x08006970

08002d04 <USBD_EpDesc>:
 * @param epAddr: endpoint address
 * @param data: the target container for the endpoint descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_EpDesc(USBD_HandleType *dev, uint8_t epAddr, uint8_t *data)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	72fb      	strb	r3, [r7, #11]
    USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8002d12:	7afb      	ldrb	r3, [r7, #11]
 8002d14:	4619      	mov	r1, r3
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff fe65 	bl	80029e6 <USBD_EpAddr2Ref>
 8002d1c:	6178      	str	r0, [r7, #20]
    USB_EndpointDescType *desc = (USB_EndpointDescType*)data;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	613b      	str	r3, [r7, #16]

    desc->bLength           = sizeof(USB_EndpointDescType);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2207      	movs	r2, #7
 8002d26:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType   = USB_DESC_TYPE_ENDPOINT;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	705a      	strb	r2, [r3, #1]
    desc->bEndpointAddress  = epAddr;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	7afa      	ldrb	r2, [r7, #11]
 8002d32:	709a      	strb	r2, [r3, #2]
    desc->bmAttributes      = ep->Type;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	7a9a      	ldrb	r2, [r3, #10]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	70da      	strb	r2, [r3, #3]
    desc->wMaxPacketSize    = ep->MaxPacketSize;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	891a      	ldrh	r2, [r3, #8]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	809a      	strh	r2, [r3, #4]
    desc->bInterval         = 1;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2201      	movs	r2, #1
 8002d48:	719a      	strb	r2, [r3, #6]

    return sizeof(USB_EndpointDescType);
 8002d4a:	2307      	movs	r3, #7
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <USBD_EpAddr2Ref>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8002d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da08      	bge.n	8002d7a <USBD_EpAddr2Ref+0x26>
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	3338      	adds	r3, #56	; 0x38
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	3304      	adds	r3, #4
 8002d78:	e006      	b.n	8002d88 <USBD_EpAddr2Ref+0x34>
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	3306      	adds	r3, #6
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	3338      	adds	r3, #56	; 0x38
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <USBD_IfClass_InData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_InData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->InData, itf, ep);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <USBD_IfClass_InData+0x20>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	6839      	ldr	r1, [r7, #0]
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <USBD_IfClass_OutData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_OutData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->OutData, itf, ep);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <USBD_IfClass_OutData+0x20>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <USBD_EpSend>:
 * @param len: length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpSend(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	461a      	mov	r2, r3
 8002df0:	460b      	mov	r3, r1
 8002df2:	72fb      	strb	r3, [r7, #11]
 8002df4:	4613      	mov	r3, r2
 8002df6:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.IN[epAddr & 0xF];
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	3338      	adds	r3, #56	; 0x38
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	7adb      	ldrb	r3, [r3, #11]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d003      	beq.n	8002e1e <USBD_EpSend+0x3a>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10a      	bne.n	8002e34 <USBD_EpSend+0x50>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2204      	movs	r2, #4
 8002e22:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpSend(dev, epAddr, (const uint8_t*)data, len);
 8002e24:	893b      	ldrh	r3, [r7, #8]
 8002e26:	7af9      	ldrb	r1, [r7, #11]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f001 f9c1 	bl	80041b2 <USB_vEpSend>

        retval = USBD_E_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <USBD_EpReceive>:
 * @param len: maximum length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpReceive(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	72fb      	strb	r3, [r7, #11]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8002e52:	2302      	movs	r3, #2
 8002e54:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.OUT[epAddr];
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	3306      	adds	r3, #6
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	3338      	adds	r3, #56	; 0x38
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	7adb      	ldrb	r3, [r3, #11]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d003      	beq.n	8002e76 <USBD_EpReceive+0x38>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10a      	bne.n	8002e8c <USBD_EpReceive+0x4e>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpReceive(dev, epAddr, (uint8_t*)data, len);
 8002e7c:	893b      	ldrh	r3, [r7, #8]
 8002e7e:	7af9      	ldrb	r1, [r7, #11]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 f971 	bl	800416a <USB_vEpReceive>

        retval = USBD_E_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <USBD_EpInCallback>:
 *        of the completion of an IN endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB IN endpoint handle reference
 */
void USBD_EpInCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
    if (ep == &dev->EP.IN[0])
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	333c      	adds	r3, #60	; 0x3c
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d103      	bne.n	8002eb2 <USBD_EpInCallback+0x1c>
    {
        USBD_CtrlInCallback(dev);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fc8e 	bl	80027cc <USBD_CtrlInCallback>
    else
    {
        ep->State = USB_EP_STATE_IDLE;
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
    }
}
 8002eb0:	e00d      	b.n	8002ece <USBD_EpInCallback+0x38>
        ep->State = USB_EP_STATE_IDLE;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	72da      	strb	r2, [r3, #11]
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	7b1b      	ldrb	r3, [r3, #12]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	330a      	adds	r3, #10
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff63 	bl	8002d94 <USBD_IfClass_InData>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <USBD_EpOutCallback>:
 *        of the completion of an OUT endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB OUT endpoint handle reference
 */
void USBD_EpOutCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
    ep->State = USB_EP_STATE_IDLE;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	72da      	strb	r2, [r3, #11]

    if (ep == &dev->EP.OUT[0])
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	339c      	adds	r3, #156	; 0x9c
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d103      	bne.n	8002ef8 <USBD_EpOutCallback+0x22>
    {
        USBD_CtrlOutCallback(dev);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fcb9 	bl	8002868 <USBD_CtrlOutCallback>
    }
    else
    {
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
    }
}
 8002ef6:	e00a      	b.n	8002f0e <USBD_EpOutCallback+0x38>
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	7b1b      	ldrb	r3, [r3, #12]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	330a      	adds	r3, #10
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	6839      	ldr	r1, [r7, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff57 	bl	8002dbc <USBD_IfClass_OutData>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <USBD_EpRequest>:
 * @brief This function handles standard endpoint requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_EpRequest(USBD_HandleType *dev)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	75fb      	strb	r3, [r7, #23]
    uint8_t epAddr = (uint8_t)dev->Setup.Index, epNum = epAddr & 0xF;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	891b      	ldrh	r3, [r3, #8]
 8002f26:	75bb      	strb	r3, [r7, #22]
 8002f28:	7dbb      	ldrb	r3, [r7, #22]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	757b      	strb	r3, [r7, #21]

    if ((epNum >= USBD_MAX_EP_COUNT) ||
 8002f30:	7d7b      	ldrb	r3, [r7, #21]
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d87d      	bhi.n	8003032 <USBD_EpRequest+0x11c>
 8002f36:	7d7b      	ldrb	r3, [r7, #21]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d07a      	beq.n	8003032 <USBD_EpRequest+0x11c>
        (epNum == 0) ||
        (dev->ConfigSelector == 0))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (epNum == 0) ||
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d075      	beq.n	8003032 <USBD_EpRequest+0x11c>
    {
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	791b      	ldrb	r3, [r3, #4]
 8002f4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d16e      	bne.n	8003032 <USBD_EpRequest+0x11c>
    {
        USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8002f54:	7dbb      	ldrb	r3, [r7, #22]
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fefb 	bl	8002d54 <USBD_EpAddr2Ref>
 8002f5e:	6138      	str	r0, [r7, #16]

        switch (dev->Setup.Request)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	795b      	ldrb	r3, [r3, #5]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d006      	beq.n	8002f76 <USBD_EpRequest+0x60>
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	dc5d      	bgt.n	8003028 <USBD_EpRequest+0x112>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d046      	beq.n	8002ffe <USBD_EpRequest+0xe8>
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d013      	beq.n	8002f9c <USBD_EpRequest+0x86>
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
                break;
            }

            default:
                break;
 8002f74:	e058      	b.n	8003028 <USBD_EpRequest+0x112>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	88db      	ldrh	r3, [r3, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d156      	bne.n	800302c <USBD_EpRequest+0x116>
                    retval = USBD_E_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
                    if (ep->State != USB_EP_STATE_STALL)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	7adb      	ldrb	r3, [r3, #11]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d050      	beq.n	800302c <USBD_EpRequest+0x116>
                        USBD_PD_EpSetStall(dev, epAddr);
 8002f8a:	7dbb      	ldrb	r3, [r7, #22]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f001 f885 	bl	800409e <USB_vEpSetStall>
                        ep->State = USB_EP_STATE_STALL;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2202      	movs	r2, #2
 8002f98:	72da      	strb	r2, [r3, #11]
                break;
 8002f9a:	e047      	b.n	800302c <USBD_EpRequest+0x116>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	88db      	ldrh	r3, [r3, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d145      	bne.n	8003030 <USBD_EpRequest+0x11a>
                    retval = USBD_E_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]
                    if (ep->State == USB_EP_STATE_STALL)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	7adb      	ldrb	r3, [r3, #11]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d13f      	bne.n	8003030 <USBD_EpRequest+0x11a>
                        USBD_PD_EpClearStall(dev, epAddr);
 8002fb0:	7dbb      	ldrb	r3, [r7, #22]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f001 f8a7 	bl	8004108 <USB_vEpClearStall>
                        ep->State = USB_EP_STATE_IDLE;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	72da      	strb	r2, [r3, #11]
                        ep->Transfer.Length = 0;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	809a      	strh	r2, [r3, #4]
                        if (epAddr != epNum)
 8002fc6:	7dba      	ldrb	r2, [r7, #22]
 8002fc8:	7d7b      	ldrb	r3, [r7, #21]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d00b      	beq.n	8002fe6 <USBD_EpRequest+0xd0>
                            USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	7b1b      	ldrb	r3, [r3, #12]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	330a      	adds	r3, #10
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	6939      	ldr	r1, [r7, #16]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fed8 	bl	8002d94 <USBD_IfClass_InData>
                break;
 8002fe4:	e024      	b.n	8003030 <USBD_EpRequest+0x11a>
                            USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	7b1b      	ldrb	r3, [r3, #12]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	330a      	adds	r3, #10
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	6939      	ldr	r1, [r7, #16]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fee0 	bl	8002dbc <USBD_IfClass_OutData>
                break;
 8002ffc:	e018      	b.n	8003030 <USBD_EpRequest+0x11a>
                uint16_t *epStatus = (uint16_t*)dev->CtrlData;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	33fc      	adds	r3, #252	; 0xfc
 8003002:	60fb      	str	r3, [r7, #12]
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	7adb      	ldrb	r3, [r3, #11]
                        1 << USB_FEATURE_EP_HALT : 0;
 8003008:	2b02      	cmp	r3, #2
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	b29a      	uxth	r2, r3
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	801a      	strh	r2, [r3, #0]
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
 8003018:	2202      	movs	r2, #2
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fc49 	bl	80028b4 <USBD_CtrlSendData>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]
                break;
 8003026:	e004      	b.n	8003032 <USBD_EpRequest+0x11c>
                break;
 8003028:	bf00      	nop
 800302a:	e002      	b.n	8003032 <USBD_EpRequest+0x11c>
                break;
 800302c:	bf00      	nop
 800302e:	e000      	b.n	8003032 <USBD_EpRequest+0x11c>
                break;
 8003030:	bf00      	nop
        /* Callouts for class or vendor specific
         * EP request processing not implemented
         * Interface level requests are promoted (and supported) instead */
    }

    return retval;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <USBD_IfClass_GetString>:
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
    if (itf->Class->GetString == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <USBD_IfClass_GetString+0x1a>
    {   return (const char*)NULL; }
 8003052:	2300      	movs	r3, #0
 8003054:	e007      	b.n	8003066 <USBD_IfClass_GetString+0x2a>
    {   return itf->Class->GetString(itf, intNum); }
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	4611      	mov	r1, r2
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <USBD_IfClass_Init>:
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Init, itf);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <USBD_IfClass_Init+0x1c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <USBD_IfClass_Deinit>:
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Deinit, itf);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <USBD_IfClass_Deinit+0x1c>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <USBD_IfClass_SetupStage>:
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
    if (itf->Class->SetupStage == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <USBD_IfClass_SetupStage+0x16>
    {   return USBD_E_INVALID; }
 80030c8:	2303      	movs	r3, #3
 80030ca:	e005      	b.n	80030d8 <USBD_IfClass_SetupStage+0x22>
    {   return itf->Class->SetupStage(itf); }
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <USBD_IfConfig>:
 * @brief This function changes the active device configuration.
 * @param dev: USB Device handle reference
 * @param cfgNum: New configuration selector index
 */
void USBD_IfConfig(USBD_HandleType *dev, uint8_t cfgNum)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
    if (dev->ConfigSelector != cfgNum)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d03f      	beq.n	8003178 <USBD_IfConfig+0x98>
    {
        uint8_t ifNum;

        /* Clear any previously selected config */
        if (dev->ConfigSelector != 0)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01c      	beq.n	800313c <USBD_IfConfig+0x5c>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	e013      	b.n	8003130 <USBD_IfConfig+0x50>
            {
                USBD_IfClass_Deinit(dev->IF[ifNum]);
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	330a      	adds	r3, #10
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ffbc 	bl	8003092 <USBD_IfClass_Deinit>
                dev->IF[ifNum]->AltSelector = 0;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	330a      	adds	r3, #10
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	721a      	strb	r2, [r3, #8]
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	3301      	adds	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	429a      	cmp	r2, r3
 800313a:	d3e5      	bcc.n	8003108 <USBD_IfConfig+0x28>
            }
        }

        /* Update configuration index */
        dev->ConfigSelector = cfgNum;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        /* Set the new selected valid config */
        if (dev->ConfigSelector != 0)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d014      	beq.n	8003178 <USBD_IfConfig+0x98>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	e00b      	b.n	800316c <USBD_IfConfig+0x8c>
            {
                USBD_IfClass_Init(dev->IF[ifNum]);
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	330a      	adds	r3, #10
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff84 	bl	800306e <USBD_IfClass_Init>
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	3301      	adds	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	429a      	cmp	r2, r3
 8003176:	d3ed      	bcc.n	8003154 <USBD_IfConfig+0x74>
            }
        }
    }
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <USBD_IfString>:
 *        which is selected by the setup request.
 * @param dev: USB Device handle reference
 * @return Reference to the interface's string, or NULL if not available
 */
const char* USBD_IfString(USBD_HandleType *dev)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
    uint8_t ifNum  = ((uint8_t)dev->Setup.Value & 0xF) - USBD_ISTR_INTERFACES;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	88db      	ldrh	r3, [r3, #6]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	74fb      	strb	r3, [r7, #19]
    uint8_t intNum = ((uint8_t)dev->Setup.Value >> 4);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	88db      	ldrh	r3, [r3, #6]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	74bb      	strb	r3, [r7, #18]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	330a      	adds	r3, #10
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]
    const char* str = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

    if (ifNum < dev->IfCount)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80031ba:	7cfa      	ldrb	r2, [r7, #19]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d205      	bcs.n	80031cc <USBD_IfString+0x4c>
    {
        str = USBD_IfClass_GetString(itf, intNum);
 80031c0:	7cbb      	ldrb	r3, [r7, #18]
 80031c2:	4619      	mov	r1, r3
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff ff39 	bl	800303c <USBD_IfClass_GetString>
 80031ca:	6178      	str	r0, [r7, #20]
    }

    return str;
 80031cc:	697b      	ldr	r3, [r7, #20]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <USBD_IfRequest>:
 * @brief Processes the interface request.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_IfRequest(USBD_HandleType *dev)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80031de:	2303      	movs	r3, #3
 80031e0:	75fb      	strb	r3, [r7, #23]
    uint8_t ifNum = (uint8_t)dev->Setup.Index;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	891b      	ldrh	r3, [r3, #8]
 80031e6:	75bb      	strb	r3, [r7, #22]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 80031e8:	7dbb      	ldrb	r3, [r7, #22]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	330a      	adds	r3, #10
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]

    if ((dev->ConfigSelector == 0) || (ifNum >= dev->IfCount))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03e      	beq.n	800327e <USBD_IfRequest+0xa8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003206:	7dba      	ldrb	r2, [r7, #22]
 8003208:	429a      	cmp	r2, r3
 800320a:	d238      	bcs.n	800327e <USBD_IfRequest+0xa8>
    {
        /* Configured and valid indexed interfaces only */
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	791b      	ldrb	r3, [r3, #4]
 8003210:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d12a      	bne.n	8003270 <USBD_IfRequest+0x9a>
    {
        switch (dev->Setup.Request)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	795b      	ldrb	r3, [r3, #5]
 800321e:	2b0a      	cmp	r3, #10
 8003220:	d002      	beq.n	8003228 <USBD_IfRequest+0x52>
 8003222:	2b0b      	cmp	r3, #11
 8003224:	d00a      	beq.n	800323c <USBD_IfRequest+0x66>
 8003226:	e01d      	b.n	8003264 <USBD_IfRequest+0x8e>
        {
            /* Current alternate setting of the IF */
            case USB_REQ_GET_INTERFACE:
            {
                retval = USBD_CtrlSendData(dev,
                        &itf->AltSelector, sizeof(itf->AltSelector));
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	3308      	adds	r3, #8
                retval = USBD_CtrlSendData(dev,
 800322c:	2201      	movs	r2, #1
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fb3f 	bl	80028b4 <USBD_CtrlSendData>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]
                break;
 800323a:	e020      	b.n	800327e <USBD_IfRequest+0xa8>
            }

            /* Set alternate setting of the IF */
            case USB_REQ_SET_INTERFACE:
            {
                uint8_t altSel = (uint8_t)dev->Setup.Value;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	88db      	ldrh	r3, [r3, #6]
 8003240:	73fb      	strb	r3, [r7, #15]

                /* Check validity */
                if (itf->AltCount > altSel)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	7a5b      	ldrb	r3, [r3, #9]
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	429a      	cmp	r2, r3
 800324a:	d217      	bcs.n	800327c <USBD_IfRequest+0xa6>
                {
                    /* Deinit previous AS */
                    USBD_IfClass_Deinit(itf);
 800324c:	6938      	ldr	r0, [r7, #16]
 800324e:	f7ff ff20 	bl	8003092 <USBD_IfClass_Deinit>

                    itf->AltSelector = altSel;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	721a      	strb	r2, [r3, #8]

                    /* Init with new AS */
                    USBD_IfClass_Init(itf);
 8003258:	6938      	ldr	r0, [r7, #16]
 800325a:	f7ff ff08 	bl	800306e <USBD_IfClass_Init>

                    retval = USBD_E_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]
                }
                break;
 8003262:	e00b      	b.n	800327c <USBD_IfRequest+0xa6>
            }

            default:
            {
                /* forward the request to the IF */
                retval = USBD_IfClass_SetupStage(itf);
 8003264:	6938      	ldr	r0, [r7, #16]
 8003266:	f7ff ff26 	bl	80030b6 <USBD_IfClass_SetupStage>
 800326a:	4603      	mov	r3, r0
 800326c:	75fb      	strb	r3, [r7, #23]
                break;
 800326e:	e006      	b.n	800327e <USBD_IfRequest+0xa8>
        }
    }
    else
    {
        /* forward the request to the IF */
        retval = USBD_IfClass_SetupStage(itf);
 8003270:	6938      	ldr	r0, [r7, #16]
 8003272:	f7ff ff20 	bl	80030b6 <USBD_IfClass_SetupStage>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]
 800327a:	e000      	b.n	800327e <USBD_IfRequest+0xa8>
                break;
 800327c:	bf00      	nop
    }

    return retval;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <USB_prvConnectCtrl>:
#define USB_TOTAL_FIFO_SIZE(HANDLE) 1280
#endif

/* Set the status of the DP pull-up resistor */
__STATIC_INLINE void USB_prvConnectCtrl(USB_HandleType * pxUSB, FunctionalState NewState)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
    USB_REG_BIT(pxUSB,DCTL,SDIS) = ~NewState;
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	43db      	mvns	r3, r3
 8003298:	b2d9      	uxtb	r1, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	460b      	mov	r3, r1
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	b2d9      	uxtb	r1, r3
 80032a6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80032aa:	f361 0341 	bfi	r3, r1, #1, #1
 80032ae:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <USB_prvFlushTxFifo>:

/* Flush an IN FIFO */
__STATIC_INLINE void USB_prvFlushTxFifo(USB_HandleType * pxUSB, uint8_t FifoNumber)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
            ((uint32_t)FifoNumber << USB_OTG_GRSTCTL_TXFNUM_Pos);
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	019a      	lsls	r2, r3, #6
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f042 0220 	orr.w	r2, r2, #32
 80032d6:	611a      	str	r2, [r3, #16]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <USB_prvFlushRxFifo>:

/* Flush global OUT FIFO */
__STATIC_INLINE void USB_prvFlushRxFifo(USB_HandleType * pxUSB)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_RXFFLSH;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2210      	movs	r2, #16
 80032f2:	611a      	str	r2, [r3, #16]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <USB_prvClearEpInts>:

/* Clears all endpoint interrupt request flags */
static void USB_prvClearEpInts(USB_HandleType * pxUSB)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <USB_prvClearEpInts+0x60>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <USB_prvClearEpInts+0x16>
 8003312:	2306      	movs	r3, #6
 8003314:	e000      	b.n	8003318 <USB_prvClearEpInts+0x18>
 8003316:	2304      	movs	r3, #4
 8003318:	73bb      	strb	r3, [r7, #14]

    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	e014      	b.n	800334a <USB_prvClearEpInts+0x4a>
    {
        pxUSB->Inst->IEP[ucEpNum].DIEPINT.w = 0xFF;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	015b      	lsls	r3, r3, #5
 8003328:	4413      	add	r3, r2
 800332a:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800332e:	22ff      	movs	r2, #255	; 0xff
 8003330:	601a      	str	r2, [r3, #0]
        pxUSB->Inst->OEP[ucEpNum].DOEPINT.w = 0xFF;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	4413      	add	r3, r2
 800333c:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8003340:	22ff      	movs	r2, #255	; 0xff
 8003342:	601a      	str	r2, [r3, #0]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	3301      	adds	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	7bbb      	ldrb	r3, [r7, #14]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3e6      	bcc.n	8003320 <USB_prvClearEpInts+0x20>
    }
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40040000 	.word	0x40040000

08003364 <USB_prvWriteFifo>:

/* Push packet data to IN FIFO */
static void USB_prvWriteFifo(USB_HandleType * pxUSB,
        uint8_t ucFIFOx, uint8_t * pucData, uint16_t usLength)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	461a      	mov	r2, r3
 8003370:	460b      	mov	r3, r1
 8003372:	72fb      	strb	r3, [r7, #11]
 8003374:	4613      	mov	r3, r2
 8003376:	813b      	strh	r3, [r7, #8]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	6893      	ldr	r3, [r2, #8]
 800337e:	f36f 0300 	bfc	r3, #0, #1
 8003382:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8003384:	893b      	ldrh	r3, [r7, #8]
 8003386:	3303      	adds	r3, #3
 8003388:	2b00      	cmp	r3, #0
 800338a:	da00      	bge.n	800338e <USB_prvWriteFifo+0x2a>
 800338c:	3303      	adds	r3, #3
 800338e:	109b      	asrs	r3, r3, #2
 8003390:	82fb      	strh	r3, [r7, #22]
 8003392:	e00e      	b.n	80033b2 <USB_prvWriteFifo+0x4e>
    {
        pxUSB->Inst->DFIFO[ucFIFOx].DR = *((__packed uint32_t *) pucData);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68d9      	ldr	r1, [r3, #12]
 8003398:	7afb      	ldrb	r3, [r7, #11]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	031b      	lsls	r3, r3, #12
 80033a2:	440b      	add	r3, r1
 80033a4:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 80033a6:	8afb      	ldrh	r3, [r7, #22]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	82fb      	strh	r3, [r7, #22]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	8afb      	ldrh	r3, [r7, #22]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ed      	bne.n	8003394 <USB_prvWriteFifo+0x30>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	6893      	ldr	r3, [r2, #8]
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6093      	str	r3, [r2, #8]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <USB_prvReadFifo>:

/* Pop packet data from OUT FIFO */
static void USB_prvReadFifo(USB_HandleType * pxUSB,
        uint8_t * pucData, uint16_t usLength)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	6893      	ldr	r3, [r2, #8]
 80033e4:	f36f 0300 	bfc	r3, #0, #1
 80033e8:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	3303      	adds	r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da00      	bge.n	80033f4 <USB_prvReadFifo+0x24>
 80033f2:	3303      	adds	r3, #3
 80033f4:	109b      	asrs	r3, r3, #2
 80033f6:	82fb      	strh	r3, [r7, #22]
 80033f8:	e00c      	b.n	8003414 <USB_prvReadFifo+0x44>
    {
        *(__packed uint32_t *) pucData = pxUSB->Inst->DFIFO[0].DR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8003408:	8afb      	ldrh	r3, [r7, #22]
 800340a:	3b01      	subs	r3, #1
 800340c:	82fb      	strh	r3, [r7, #22]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3304      	adds	r3, #4
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	8afb      	ldrh	r3, [r7, #22]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ef      	bne.n	80033fa <USB_prvReadFifo+0x2a>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	6893      	ldr	r3, [r2, #8]
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6093      	str	r3, [r2, #8]
}
 8003426:	bf00      	nop
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <USB_prvTransmitPacket>:

/* Handle IN EP transfer */
static void USB_prvTransmitPacket(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	3338      	adds	r3, #56	; 0x38
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	613b      	str	r3, [r7, #16]
    uint32_t ulFifoSpace = pxUSB->Inst->IEP[ucEpNum].DTXFSTS * sizeof(uint32_t);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	015b      	lsls	r3, r3, #5
 8003454:	4413      	add	r3, r2
 8003456:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	60fb      	str	r3, [r7, #12]
    uint32_t ulEpFlag = 1 << ucEpNum;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	2201      	movs	r2, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	60bb      	str	r3, [r7, #8]

    /* If there is enough space in the FIFO for a packet, fill immediately */
    if (ulFifoSpace >= (uint32_t)pxEP->MaxPacketSize)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	891b      	ldrh	r3, [r3, #8]
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4293      	cmp	r3, r2
 8003474:	d320      	bcc.n	80034b8 <USB_prvTransmitPacket+0x86>
    {
        uint16_t usPacketLength;

        /* Multi packet transfer */
        if (pxEP->Transfer.Progress > pxEP->MaxPacketSize)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	88da      	ldrh	r2, [r3, #6]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	891b      	ldrh	r3, [r3, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	d903      	bls.n	800348a <USB_prvTransmitPacket+0x58>
        {
            usPacketLength = pxEP->MaxPacketSize;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	891b      	ldrh	r3, [r3, #8]
 8003486:	82fb      	strh	r3, [r7, #22]
 8003488:	e002      	b.n	8003490 <USB_prvTransmitPacket+0x5e>
        }
        else
        {
            usPacketLength = pxEP->Transfer.Progress;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	88db      	ldrh	r3, [r3, #6]
 800348e:	82fb      	strh	r3, [r7, #22]
        }

        /* Write a packet to the FIFO */
        USB_prvWriteFifo(pxUSB, ucEpNum, pxEP->Transfer.Data, usPacketLength);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	8afb      	ldrh	r3, [r7, #22]
 8003496:	78f9      	ldrb	r1, [r7, #3]
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff63 	bl	8003364 <USB_prvWriteFifo>
        pxEP->Transfer.Data += usPacketLength;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	8afb      	ldrh	r3, [r7, #22]
 80034a4:	441a      	add	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usPacketLength;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	88da      	ldrh	r2, [r3, #6]
 80034ae:	8afb      	ldrh	r3, [r7, #22]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	80da      	strh	r2, [r3, #6]
    }

    if (ucEpNum == 0)
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d019      	beq.n	80034f2 <USB_prvTransmitPacket+0xc0>
    {
        /* Interrupt isn't used */
    }
    else if (pxEP->Transfer.Progress == 0)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	88db      	ldrh	r3, [r3, #6]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10b      	bne.n	80034de <USB_prvTransmitPacket+0xac>
    {
        /* Disable Tx FIFO interrupts when all data is written */
        CLEAR_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	400a      	ands	r2, r1
 80034d8:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    else
    {
        /* Enable Tx FIFO interrupts when more data is available */
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
    }
}
 80034dc:	e009      	b.n	80034f2 <USB_prvTransmitPacket+0xc0>
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <USB_prvEpSend>:

/* Internal handling of EP transmission */
static void USB_prvEpSend(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	3338      	adds	r3, #56	; 0x38
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	613b      	str	r3, [r7, #16]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3348      	adds	r3, #72	; 0x48
 8003520:	015b      	lsls	r3, r3, #5
 8003522:	4413      	add	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
    uint16_t usTransferSize = pxEP->Transfer.Progress;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	88db      	ldrh	r3, [r3, #6]
 800352a:	82fb      	strh	r3, [r7, #22]

    if (pxEP->Transfer.Progress == 0)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	88db      	ldrh	r3, [r3, #6]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <USB_prvEpSend+0x44>
    {
        /* 1 transfer with 0 length */
        pxDEP->DxEPTSIZ.w = 1 << USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800353a:	611a      	str	r2, [r3, #16]
 800353c:	e056      	b.n	80035ec <USB_prvEpSend+0xf2>
    }
    /* EP0 has limited transfer size */
    else if ((ucEpNum == 0) && (pxEP->Transfer.Progress > pxEP->MaxPacketSize))
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d117      	bne.n	8003574 <USB_prvEpSend+0x7a>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	88da      	ldrh	r2, [r3, #6]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	891b      	ldrh	r3, [r3, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	d911      	bls.n	8003574 <USB_prvEpSend+0x7a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	6913      	ldr	r3, [r2, #16]
 8003554:	2101      	movs	r1, #1
 8003556:	f361 43dc 	bfi	r3, r1, #19, #10
 800355a:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = usTransferSize = pxEP->MaxPacketSize;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	891b      	ldrh	r3, [r3, #8]
 8003560:	82fb      	strh	r3, [r7, #22]
 8003562:	8afa      	ldrh	r2, [r7, #22]
 8003564:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003568:	68f9      	ldr	r1, [r7, #12]
 800356a:	690b      	ldr	r3, [r1, #16]
 800356c:	f362 0312 	bfi	r3, r2, #0, #19
 8003570:	610b      	str	r3, [r1, #16]
 8003572:	e03b      	b.n	80035ec <USB_prvEpSend+0xf2>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	88db      	ldrh	r3, [r3, #6]
 8003578:	461a      	mov	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	891b      	ldrh	r3, [r3, #8]
 800357e:	4413      	add	r3, r2
 8003580:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	8912      	ldrh	r2, [r2, #8]
 8003586:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 800358a:	817b      	strh	r3, [r7, #10]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 800358c:	897b      	ldrh	r3, [r7, #10]
 800358e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003592:	b299      	uxth	r1, r3
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	6913      	ldr	r3, [r2, #16]
 8003598:	f361 43dc 	bfi	r3, r1, #19, #10
 800359c:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	88db      	ldrh	r3, [r3, #6]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	690b      	ldr	r3, [r1, #16]
 80035ac:	f362 0312 	bfi	r3, r2, #0, #19
 80035b0:	610b      	str	r3, [r1, #16]

        if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	7a9b      	ldrb	r3, [r3, #10]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d118      	bne.n	80035ec <USB_prvEpSend+0xf2>
        {
            pxDEP->DxEPTSIZ.b.MULCNT = 1;
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	6913      	ldr	r3, [r2, #16]
 80035be:	2101      	movs	r1, #1
 80035c0:	f361 735e 	bfi	r3, r1, #29, #2
 80035c4:	6113      	str	r3, [r2, #16]

            /* If LSB of SOF frame number is one */
            if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <USB_prvEpSend+0xe8>
            {
                /* Set ODD frame */
                pxDEP->DxEPCTL.b.SODDFRM = 1;
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	6813      	ldr	r3, [r2, #0]
 80035da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	e004      	b.n	80035ec <USB_prvEpSend+0xf2>
            }
            else
            {
                /* Set DATA0 PID */
                pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	6813      	ldr	r3, [r2, #0]
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6013      	str	r3, [r2, #0]
            }
        }
    }

#if (USB_OTG_DMA_SUPPORT != 0)
    if (USB_DMA_CONFIG(pxUSB) != 0)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d011      	beq.n	8003620 <USB_prvEpSend+0x126>
    {
        /* Set DMA start address */
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	615a      	str	r2, [r3, #20]
        pxEP->Transfer.Data += usTransferSize;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	8afb      	ldrh	r3, [r7, #22]
 800360c:	441a      	add	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usTransferSize;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	88da      	ldrh	r2, [r3, #6]
 8003616:	8afb      	ldrh	r3, [r7, #22]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	b29a      	uxth	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	80da      	strh	r2, [r3, #6]
    }
#endif
    /* EP enable */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

    if ((pxEP->Transfer.Progress > 0) &&
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	88db      	ldrh	r3, [r3, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00c      	beq.n	800364e <USB_prvEpSend+0x154>
        (USB_DMA_CONFIG(pxUSB) == 0))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800363e:	b2db      	uxtb	r3, r3
    if ((pxEP->Transfer.Progress > 0) &&
 8003640:	2b00      	cmp	r3, #0
 8003642:	d104      	bne.n	800364e <USB_prvEpSend+0x154>
    {
        /* Push the nonzero packet to FIFO */
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff fef2 	bl	8003432 <USB_prvTransmitPacket>
    }
}
 800364e:	bf00      	nop
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <USB_prvEpReceive>:

/* Internal handling of EP reception */
static void USB_prvEpReceive(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8003656:	b480      	push	{r7}
 8003658:	b087      	sub	sp, #28
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	3306      	adds	r3, #6
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	3338      	adds	r3, #56	; 0x38
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	3304      	adds	r3, #4
 8003670:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	3358      	adds	r3, #88	; 0x58
 800367a:	015b      	lsls	r3, r3, #5
 800367c:	4413      	add	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

    /* Zero Length Packet or EP0 with limited transfer size */
    if ((pxEP->Transfer.Progress == 0) || (ucEpNum == 0))
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	88db      	ldrh	r3, [r3, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <USB_prvEpReceive+0x38>
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d110      	bne.n	80036b0 <USB_prvEpReceive+0x5a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	6913      	ldr	r3, [r2, #16]
 8003692:	2101      	movs	r1, #1
 8003694:	f361 43dc 	bfi	r3, r1, #19, #10
 8003698:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->MaxPacketSize;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	891b      	ldrh	r3, [r3, #8]
 800369e:	461a      	mov	r2, r3
 80036a0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80036a4:	6939      	ldr	r1, [r7, #16]
 80036a6:	690b      	ldr	r3, [r1, #16]
 80036a8:	f362 0312 	bfi	r3, r2, #0, #19
 80036ac:	610b      	str	r3, [r1, #16]
 80036ae:	e01e      	b.n	80036ee <USB_prvEpReceive+0x98>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	88db      	ldrh	r3, [r3, #6]
 80036b4:	461a      	mov	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	891b      	ldrh	r3, [r3, #8]
 80036ba:	4413      	add	r3, r2
 80036bc:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	8912      	ldrh	r2, [r2, #8]
 80036c2:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 80036c6:	81fb      	strh	r3, [r7, #14]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ce:	b299      	uxth	r1, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	6913      	ldr	r3, [r2, #16]
 80036d4:	f361 43dc 	bfi	r3, r1, #19, #10
 80036d8:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	88db      	ldrh	r3, [r3, #6]
 80036de:	461a      	mov	r2, r3
 80036e0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	690b      	ldr	r3, [r1, #16]
 80036e8:	f362 0312 	bfi	r3, r2, #0, #19
 80036ec:	610b      	str	r3, [r1, #16]
    }

#if (USB_OTG_DMA_SUPPORT != 0)
    if (USB_DMA_CONFIG(pxUSB) != 0)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <USB_prvEpReceive+0xb2>
    {
        /* Set DMA start address */
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	615a      	str	r2, [r3, #20]
    }
#endif

    /* Set DATA PID parity */
    if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	7a9b      	ldrb	r3, [r3, #10]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d112      	bne.n	8003736 <USB_prvEpReceive+0xe0>
    {
        /* If LSB of SOF frame number is one */
        if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <USB_prvEpReceive+0xd6>
        {
            /* Set ODD frame */
            pxDEP->DxEPCTL.b.SODDFRM = 1;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e004      	b.n	8003736 <USB_prvEpReceive+0xe0>
        }
        else
        {
            /* Set DATA0 PID */
            pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6013      	str	r3, [r2, #0]
        }
    }

    /* EP transfer request */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <USB_prvPrepareSetup>:

/* Set up EP0 to receive control data */
static void USB_prvPrepareSetup(USB_HandleType * pxUSB)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    /* Setup: 1 transfer with 8 byte data */
    pxUSB->Inst->OEP[0].DOEPTSIZ.w =
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <USB_prvPrepareSetup+0x48>)
 800375e:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
          ( 1      << USB_OTG_DOEPTSIZ_PKTCNT_Pos)
        | ((3 * 8) << USB_OTG_DOEPTSIZ_XFRSIZ_Pos)
        | ( 3      << USB_OTG_DOEPTSIZ_STUPCNT_Pos);

#if (USB_OTG_DMA_SUPPORT != 0)
    if (USB_DMA_CONFIG(pxUSB) != 0)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <USB_prvPrepareSetup+0x3a>
    {
        pxUSB->Inst->OEP[0].DOEPDMA   = (uint32_t)&pxUSB->Setup;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	1d1a      	adds	r2, r3, #4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
        pxUSB->Inst->OEP[0].DOEPCTL.w = USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 8003786:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    }
#endif
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	60080018 	.word	0x60080018

0800379c <USB_prvInEpEventHandler>:

/* Handle events of a given IN endpoint */
static void USB_prvInEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	3348      	adds	r3, #72	; 0x48
 80037b4:	015b      	lsls	r3, r3, #5
 80037b6:	4413      	add	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

    /* TXFE enable bit is extracted from common register */
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
            << USB_OTG_DIEPINT_TXFE_Pos) & USB_OTG_DIEPINT_TXFE;
 80037c8:	01db      	lsls	r3, r3, #7
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	613b      	str	r3, [r7, #16]

    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	689a      	ldr	r2, [r3, #8]
            (pxUSB->Inst->DIEPMSK.w | ulEpTXFE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	430b      	orrs	r3, r1
    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w = USB_OTG_DIEPINT_TOC | USB_OTG_DIEPINT_ITTXFE
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	225a      	movs	r2, #90	; 0x5a
 80037e8:	609a      	str	r2, [r3, #8]
            | USB_OTG_DIEPINT_INEPNE | USB_OTG_DIEPINT_EPDISD;

    /* Fill empty Tx FIFO with available data */
    if ((ulEpFlags & USB_OTG_DIEPINT_TXFE) != 0)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <USB_prvInEpEventHandler+0x62>
    {
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fe1a 	bl	8003432 <USB_prvTransmitPacket>
    }
    /* Transfer completed */
    if ((ulEpFlags & USB_OTG_DIEPINT_XFRC) != 0)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02d      	beq.n	8003864 <USB_prvInEpEventHandler+0xc8>
    {
        USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	3338      	adds	r3, #56	; 0x38
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60bb      	str	r3, [r7, #8]

        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DIEPINT_XFRC;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2201      	movs	r2, #1
 800381a:	609a      	str	r2, [r3, #8]

        if (ucEpNum > 0)
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <USB_prvInEpEventHandler+0x90>
        {
            /* Transmission complete */
            USB_vDataInCallback(pxUSB, pxEP);
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fb36 	bl	8002e96 <USBD_EpInCallback>
                /* Transfer next packet */
                USB_prvEpSend(pxUSB, 0);
            }
        }
    }
}
 800382a:	e01b      	b.n	8003864 <USB_prvInEpEventHandler+0xc8>
            if (pxEP->Transfer.Progress == 0)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	88db      	ldrh	r3, [r3, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <USB_prvInEpEventHandler+0xc0>
                USB_vDataInCallback(pxUSB, pxEP);
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff fb2d 	bl	8002e96 <USBD_EpInCallback>
                if ((USB_DMA_CONFIG(pxUSB) != 0) &&
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <USB_prvInEpEventHandler+0xc8>
                    (pxEP->Transfer.Length == 0))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	889b      	ldrh	r3, [r3, #4]
                if ((USB_DMA_CONFIG(pxUSB) != 0) &&
 8003850:	2b00      	cmp	r3, #0
 8003852:	d107      	bne.n	8003864 <USB_prvInEpEventHandler+0xc8>
                    USB_prvPrepareSetup(pxUSB);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff7b 	bl	8003750 <USB_prvPrepareSetup>
}
 800385a:	e003      	b.n	8003864 <USB_prvInEpEventHandler+0xc8>
                USB_prvEpSend(pxUSB, 0);
 800385c:	2100      	movs	r1, #0
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fe4b 	bl	80034fa <USB_prvEpSend>
}
 8003864:	bf00      	nop
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <USB_prvOutEpEventHandler>:

/* Handle events of a given OUT endpoint */
static void USB_prvOutEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	3358      	adds	r3, #88	; 0x58
 8003880:	015b      	lsls	r3, r3, #5
 8003882:	4413      	add	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
    uint32_t ulEpFlags = pxDEP->DxEPINT.w & pxUSB->Inst->DOEPMSK.w;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w =
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2230      	movs	r2, #48	; 0x30
 800389a:	609a      	str	r2, [r3, #8]
            USB_OTG_DOEPINT_OTEPSPR |
#endif
            USB_OTG_DOEPINT_OTEPDIS;

    /* Setup stage complete */
    if ((ulEpFlags & USB_OTG_DOEPINT_STUP) != 0)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d006      	beq.n	80038b4 <USB_prvOutEpEventHandler+0x48>
    {
        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_STUP;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2208      	movs	r2, #8
 80038aa:	609a      	str	r2, [r3, #8]

        /* Process SETUP Packet */
        USB_vSetupCallback(pxUSB);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff f85d 	bl	800296c <USBD_SetupCallback>
        {
            /* EP0 packetization requires software handling */
            USB_prvEpReceive(pxUSB, 0);
        }
    }
}
 80038b2:	e048      	b.n	8003946 <USB_prvOutEpEventHandler+0xda>
    else if ((ulEpFlags & USB_OTG_DOEPINT_XFRC) != 0)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d043      	beq.n	8003946 <USB_prvOutEpEventHandler+0xda>
        USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	3306      	adds	r3, #6
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3338      	adds	r3, #56	; 0x38
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	3304      	adds	r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_XFRC;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2201      	movs	r2, #1
 80038d2:	609a      	str	r2, [r3, #8]
        if (USB_DMA_CONFIG(pxUSB) != 0)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01e      	beq.n	8003922 <USB_prvOutEpEventHandler+0xb6>
                    pxEP->MaxPacketSize - pxDEP->DxEPTSIZ.b.XFRSIZ;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	891a      	ldrh	r2, [r3, #8]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	b29b      	uxth	r3, r3
            uint16_t usTransferSize =
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	817b      	strh	r3, [r7, #10]
            pxEP->Transfer.Length += usTransferSize;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	889a      	ldrh	r2, [r3, #4]
 80038fa:	897b      	ldrh	r3, [r7, #10]
 80038fc:	4413      	add	r3, r2
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	809a      	strh	r2, [r3, #4]
            pxEP->Transfer.Data += usTransferSize;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	897b      	ldrh	r3, [r7, #10]
 800390a:	441a      	add	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]
            if ((ucEpNum + pxEP->Transfer.Length) == 0)
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	8892      	ldrh	r2, [r2, #4]
 8003916:	4413      	add	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <USB_prvOutEpEventHandler+0xb6>
                USB_prvPrepareSetup(pxUSB);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff17 	bl	8003750 <USB_prvPrepareSetup>
        if ((ucEpNum > 0) || (pxEP->Transfer.Progress == pxEP->Transfer.Length))
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <USB_prvOutEpEventHandler+0xc8>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88da      	ldrh	r2, [r3, #6]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	889b      	ldrh	r3, [r3, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d104      	bne.n	800393e <USB_prvOutEpEventHandler+0xd2>
            USB_vDataOutCallback(pxUSB, pxEP);
 8003934:	68f9      	ldr	r1, [r7, #12]
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff facd 	bl	8002ed6 <USBD_EpOutCallback>
}
 800393c:	e003      	b.n	8003946 <USB_prvOutEpEventHandler+0xda>
            USB_prvEpReceive(pxUSB, 0);
 800393e:	2100      	movs	r1, #0
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fe88 	bl	8003656 <USB_prvEpReceive>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <USB_prvCtrlEpOpen>:

/* Opens EP0 bidirectional dedicated control endpoint. */
static void USB_prvCtrlEpOpen(USB_HandleType * pxUSB)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
    /* Activate Endpoint 0 interrupts */
    SET_BIT(pxUSB->Inst->DAINTMSK.w,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8003966:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
            (1 << (0 + USB_OTG_DAINTMSK_IEPM_Pos)) |
            (1 << (0 + USB_OTG_DAINTMSK_OEPM_Pos)));

    /* Check if currently inactive */
    if (pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP == 0)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8003972:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d12e      	bne.n	80039da <USB_prvCtrlEpOpen+0x8c>
    {
        pxUSB->Inst->IEP[0].DIEPCTL.b.MPSIZ  = pxUSB->EP.IN[0].MaxPacketSize;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	460b      	mov	r3, r1
 8003988:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398c:	b299      	uxth	r1, r3
 800398e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003992:	f361 030a 	bfi	r3, r1, #0, #11
 8003996:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80039a2:	f36f 4393 	bfc	r3, #18, #2
 80039a6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.TXFNUM = 0;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80039b2:	f36f 5399 	bfc	r3, #22, #4
 80039b6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.SD0PID_SEVNFRM = 1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP = 1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80039d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
    }
    /* Check if currently inactive */
    if (pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP == 0)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 80039e2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d126      	bne.n	8003a3a <USB_prvCtrlEpOpen+0xec>
    {
        pxUSB->Inst->OEP[0].DOEPCTL.b.MPSIZ  = pxUSB->EP.OUT[0].MaxPacketSize;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	460b      	mov	r3, r1
 80039f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fc:	b299      	uxth	r1, r3
 80039fe:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003a02:	f361 030a 	bfi	r3, r1, #0, #11
 8003a06:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003a12:	f36f 4393 	bfc	r3, #18, #2
 8003a16:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.SD0PID_SEVNFRM = 1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a26:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP = 1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a36:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    }

    /* prepare receive SETUP packet */
    USB_prvPrepareSetup(pxUSB);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fe88 	bl	8003750 <USB_prvPrepareSetup>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <USB_prvReset>:
}
#endif

/* Resets the USB OTG core */
static void USB_prvReset(USB_HandleType * pxUSB)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    if (USB_REG_BIT(pxUSB,GRSTCTL,AHBIDL) != 0)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <USB_prvReset+0x24>
    {
        USB_REG_BIT(pxUSB,GRSTCTL,CSRST) = 1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	6913      	ldr	r3, [r2, #16]
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6113      	str	r3, [r2, #16]
    }
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <USB_prvPhyInit>:

/* Initializes the selected PHY for the USB */
static void USB_prvPhyInit(USB_HandleType * pxUSB, USB_PHYType ePHY)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
#ifdef USB_OTG_HS
    if (IS_USB_OTG_HS(pxUSB->Inst) && (ePHY != USB_PHY_EMBEDDED_FS))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <USB_prvPhyInit+0x88>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d124      	bne.n	8003ad8 <USB_prvPhyInit+0x60>
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d021      	beq.n	8003ad8 <USB_prvPhyInit+0x60>
        }
        else
#endif
        {
            /* ULPI HS PHY */
            RCC_vClockEnable(RCC_POS_OTG_HS_ULPI);
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <USB_prvPhyInit+0x8c>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <USB_prvPhyInit+0x8c>)
 8003a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <USB_prvPhyInit+0x8c>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]

            USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003ab6:	f36f 4310 	bfc	r3, #16, #1
 8003aba:	6393      	str	r3, [r2, #56]	; 0x38

            CLEAR_BIT(pxUSB->Inst->GUSBCFG.w,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	f423 03e4 	bic.w	r3, r3, #7471104	; 0x720000
 8003aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ace:	60d3      	str	r3, [r2, #12]
                USB_OTG_GUSBCFG_TSDPS  | USB_OTG_GUSBCFG_ULPIFSLS |
                USB_OTG_GUSBCFG_PHYSEL |
                USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
        }

        USB_prvReset(pxUSB);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ffb9 	bl	8003a48 <USB_prvReset>
 8003ad6:	e00f      	b.n	8003af8 <USB_prvPhyInit+0x80>
    }
    else
#endif /* USB_OTG_HS */
    {
        /* Select FS Embedded PHY */
        USB_REG_BIT(pxUSB, GUSBCFG, PHYSEL) = 1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	68d3      	ldr	r3, [r2, #12]
 8003ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae2:	60d3      	str	r3, [r2, #12]
        USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 1;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	6393      	str	r3, [r2, #56]	; 0x38

        USB_prvReset(pxUSB);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ffa9 	bl	8003a48 <USB_prvReset>
    }
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40040000 	.word	0x40040000
 8003b04:	40023800 	.word	0x40023800

08003b08 <USB_prvHsPhyDeinit>:

#ifdef USB_OTG_HS
/* Shuts down the HS PHY */
static void USB_prvHsPhyDeinit(USB_HandleType * pxUSB)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
        RCC_vClockDisable(RCC_POS_USBPHYC);
    }
    else
#endif
    {
        RCC_vClockDisable(RCC_POS_OTG_HS_ULPI);
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <USB_prvHsPhyDeinit+0x20>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <USB_prvHsPhyDeinit+0x20>)
 8003b16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b1a:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40023800 	.word	0x40023800

08003b2c <USB_vDevInit>:
 * @brief Initializes the USB OTG peripheral using the setup configuration
 * @param pxUSB: pointer to the USB handle structure
 * @param pxConfig: USB setup configuration
 */
void USB_vDevInit(USB_HandleType * pxUSB, const USB_InitType * pxConfig)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
    /* Enable peripheral clock */
#ifdef USB_OTG_HS
    if (IS_USB_OTG_HS(pxUSB->Inst))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a64      	ldr	r2, [pc, #400]	; (8003ccc <USB_vDevInit+0x1a0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d10e      	bne.n	8003b5e <USB_vDevInit+0x32>
    {
        RCC_vClockEnable(RCC_POS_OTG_HS);
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <USB_vDevInit+0x1a4>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	4a61      	ldr	r2, [pc, #388]	; (8003cd0 <USB_vDevInit+0x1a4>)
 8003b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b50:	4b5f      	ldr	r3, [pc, #380]	; (8003cd0 <USB_vDevInit+0x1a4>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	e013      	b.n	8003b86 <USB_vDevInit+0x5a>
    }
    else
#endif
    {
        RCC_vClockEnable(RCC_POS_OTG_FS);
 8003b5e:	4b5c      	ldr	r3, [pc, #368]	; (8003cd0 <USB_vDevInit+0x1a4>)
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	4a5b      	ldr	r2, [pc, #364]	; (8003cd0 <USB_vDevInit+0x1a4>)
 8003b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b68:	6353      	str	r3, [r2, #52]	; 0x34
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b58      	ldr	r3, [pc, #352]	; (8003cd0 <USB_vDevInit+0x1a4>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	4a57      	ldr	r2, [pc, #348]	; (8003cd0 <USB_vDevInit+0x1a4>)
 8003b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b78:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7a:	4b55      	ldr	r3, [pc, #340]	; (8003cd0 <USB_vDevInit+0x1a4>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    }

    /* Initialize handle variables */
    pxUSB->EP.OUT[0].MaxPacketSize =
    pxUSB->EP.IN [0].MaxPacketSize = USBD_EP0_MAX_PACKET_SIZE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2240      	movs	r2, #64	; 0x40
 8003b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    pxUSB->EP.OUT[0].MaxPacketSize =
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    pxUSB->EP.OUT[0].Type =
    pxUSB->EP.IN [0].Type = USB_EP_TYPE_CONTROL;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    pxUSB->EP.OUT[0].Type =
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Disable interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	6893      	ldr	r3, [r2, #8]
 8003bbc:	f36f 0300 	bfc	r3, #0, #1
 8003bc0:	6093      	str	r3, [r2, #8]

    /* Initialize dependencies (pins, IRQ lines) */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepInit, pxUSB);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <USB_vDevInit+0xa6>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3

    /* Initialize selected PHY */
    USB_prvPhyInit(pxUSB, pxConfig->PHY);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	79db      	ldrb	r3, [r3, #7]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff4d 	bl	8003a78 <USB_prvPhyInit>

#if (USB_OTG_DMA_SUPPORT != 0)
    /* Set dedicated DMA */
    if (pxConfig->DMA != DISABLE)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	7a1b      	ldrb	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <USB_vDevInit+0xca>
    {
        SET_BIT(pxUSB->Inst->GAHBCFG.w,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f042 0226 	orr.w	r2, r2, #38	; 0x26
 8003bf4:	609a      	str	r2, [r3, #8]
    }
#endif

    {
        uint8_t ucEpNum;
        uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <USB_vDevInit+0x1a0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <USB_vDevInit+0xd8>
 8003c00:	2306      	movs	r3, #6
 8003c02:	e000      	b.n	8003c06 <USB_vDevInit+0xda>
 8003c04:	2304      	movs	r3, #4
 8003c06:	75bb      	strb	r3, [r7, #22]

        /* Set Device Mode */
        MODIFY_REG(pxUSB->Inst->GUSBCFG.w,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c1a:	60da      	str	r2, [r3, #12]
                USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD,
                USB_OTG_GUSBCFG_FDMOD);

        /* Immediate soft disconnect */
        USB_REG_BIT(pxUSB,DCTL,SDIS) = 1;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            SET_BIT(pxUSB->Inst->GOTGCTL.w,
                    USB_OTG_GOTGCTL_BVALOEN | USB_OTG_GOTGCTL_BVALOVAL);
        }
#else
        {
            USB_REG_BIT(pxUSB,GCCFG,NOVBUSSENS) = 1;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c36:	6393      	str	r3, [r2, #56]	; 0x38
        }
#endif

        /* Restart the Phy Clock */
        pxUSB->Inst->PCGCCTL.w = 0;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00

#ifdef USB_OTG_HS
        /* HS PHY interfaces */
        if (pxConfig->PHY != USB_PHY_EMBEDDED_FS)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	79db      	ldrb	r3, [r3, #7]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <USB_vDevInit+0x130>
        {
            pxUSB->Inst->DCFG.b.DSPD = 0;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8003c52:	f36f 0301 	bfc	r3, #0, #2
 8003c56:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8003c5a:	e007      	b.n	8003c6c <USB_vDevInit+0x140>
        }
        else
#endif
        {
            /* Internal FS Phy */
            pxUSB->Inst->DCFG.b.DSPD = 3;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8003c64:	f043 0303 	orr.w	r3, r3, #3
 8003c68:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        }

        /* Init endpoints */
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	75fb      	strb	r3, [r7, #23]
 8003c70:	e00f      	b.n	8003c92 <USB_vDevInit+0x166>
        {
            USB_vEpClose(pxUSB, ucEpNum);
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f992 	bl	8003fa0 <USB_vEpClose>
            USB_vEpClose(pxUSB, 0x80 | ucEpNum);
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f98a 	bl	8003fa0 <USB_vEpClose>
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
 8003c92:	7dfa      	ldrb	r2, [r7, #23]
 8003c94:	7dbb      	ldrb	r3, [r7, #22]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3eb      	bcc.n	8003c72 <USB_vDevInit+0x146>
        }
        USB_REG_BIT(pxUSB,DIEPMSK,TXFURM) = 0;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 8003ca2:	f36f 2308 	bfc	r3, #8, #1
 8003ca6:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810

#if (USB_OTG_DMA_SUPPORT != 0)
        if (USB_DMA_CONFIG(pxUSB) != 0)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <USB_vDevInit+0x198>
        {
            /*Set threshold parameters */
            pxUSB->Inst->DTHRCTL.w = (
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <USB_vDevInit+0x1a8>)
 8003cc0:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
            SET_BIT(pxUSB->Inst->GLPMCFG.w,
                USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
        }
#endif
    }
}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40040000 	.word	0x40040000
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	00810103 	.word	0x00810103

08003cd8 <USB_vDevDeinit>:
 * @brief Restores the USB peripheral to its default inactive state
 * @param pxUSB: pointer to the USB handle structure
 * @return ERROR if input is incorrect, OK if success
 */
void USB_vDevDeinit(USB_HandleType * pxUSB)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
    USB_vDevStop_IT(pxUSB);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f863 	bl	8003dac <USB_vDevStop_IT>

    /* Deinitialize dependencies */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepDeinit, pxUSB);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <USB_vDevDeinit+0x1e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3

    /* Disable peripheral clock */
#ifdef USB_OTG_HS
    if (IS_USB_OTG_HS(pxUSB->Inst))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <USB_vDevDeinit+0x50>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d109      	bne.n	8003d14 <USB_vDevDeinit+0x3c>
    {
        /* Disable any PHY clocking as well */
        USB_prvHsPhyDeinit(pxUSB);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff01 	bl	8003b08 <USB_prvHsPhyDeinit>

        RCC_vClockDisable(RCC_POS_OTG_HS);
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <USB_vDevDeinit+0x54>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <USB_vDevDeinit+0x54>)
 8003d0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d10:	6313      	str	r3, [r2, #48]	; 0x30
    else
#endif
    {
        RCC_vClockDisable(RCC_POS_OTG_FS);
    }
}
 8003d12:	e005      	b.n	8003d20 <USB_vDevDeinit+0x48>
        RCC_vClockDisable(RCC_POS_OTG_FS);
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <USB_vDevDeinit+0x54>)
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <USB_vDevDeinit+0x54>)
 8003d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d1e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40040000 	.word	0x40040000
 8003d2c:	40023800 	.word	0x40023800

08003d30 <USB_vDevStart_IT>:
/**
 * @brief Starts the USB device operation
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevStart_IT(USB_HandleType * pxUSB)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
    uint32_t ulGINTMSK;

    /* Clear any pending interrupts except SRQ */
    pxUSB->Inst->GINTSTS.w  = ~USB_OTG_GINTSTS_SRQINT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d40:	615a      	str	r2, [r3, #20]
    USB_prvClearEpInts(pxUSB);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fadc 	bl	8003300 <USB_prvClearEpInts>

    /* Enable interrupts matching to the Device mode ONLY */
    ulGINTMSK = USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <USB_vDevStart_IT+0x78>)
 8003d4a:	60fb      	str	r3, [r7, #12]
                USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_WUIM   |
                USB_OTG_GINTMSK_RXFLVLM;

    /* When DMA is used, Rx data isn't read by IRQHandler */
    if (USB_DMA_CONFIG(pxUSB) != 0)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <USB_vDevStart_IT+0x34>
    {
        CLEAR_BIT(ulGINTMSK, USB_OTG_GINTMSK_RXFLVLM);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0310 	bic.w	r3, r3, #16
 8003d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(ulGINTMSK, USB_OTG_GINTMSK_LPMINTM);
    }
#endif

    /* Apply interrupts selection */
    pxUSB->Inst->GINTMSK.w = ulGINTMSK;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	619a      	str	r2, [r3, #24]

    /* Also configure device endpoint interrupts */
    pxUSB->Inst->DIEPMSK.w = USB_OTG_DIEPMSK_XFRCM
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	220b      	movs	r2, #11
 8003d72:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
            | USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_EPDM;
    pxUSB->Inst->DOEPMSK.w = USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_STUPM
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	222b      	movs	r2, #43	; 0x2b
 8003d7c:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
#ifdef USB_OTG_DOEPMSK_OTEPSPRM
            | USB_OTG_DOEPMSK_OTEPSPRM
#endif
            | USB_OTG_DOEPMSK_EPDM;
    pxUSB->Inst->DAINTMSK.w = 0;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

    USB_prvConnectCtrl(pxUSB, ENABLE);
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fa7b 	bl	8003288 <USB_prvConnectCtrl>

    /* Enable global interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	6893      	ldr	r3, [r2, #8]
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6093      	str	r3, [r2, #8]
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	800c3810 	.word	0x800c3810

08003dac <USB_vDevStop_IT>:
/**
 * @brief Disconnects the device from the USB host
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevStop_IT(USB_HandleType * pxUSB)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    /* Disable global interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	6893      	ldr	r3, [r2, #8]
 8003dba:	f36f 0300 	bfc	r3, #0, #1
 8003dbe:	6093      	str	r3, [r2, #8]

    /* Clear any pending interrupts except SRQ */
    pxUSB->Inst->GINTSTS.w  = ~USB_OTG_GINTSTS_SRQINT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003dc8:	615a      	str	r2, [r3, #20]
    USB_prvClearEpInts(pxUSB);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fa98 	bl	8003300 <USB_prvClearEpInts>

    /* Clear interrupt masks */
    CLEAR_BIT(pxUSB->Inst->GINTMSK.w,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	6999      	ldr	r1, [r3, #24]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <USB_vDevStop_IT+0x78>)
 8003ddc:	400b      	ands	r3, r1
 8003dde:	6193      	str	r3, [r2, #24]
            USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_WUIM   |
#ifdef USB_OTG_GLPMCFG_LPMEN
            USB_OTG_GINTMSK_LPMINTM |
#endif
            USB_OTG_GINTMSK_RXFLVLM);
    pxUSB->Inst->DIEPMSK.w  = 0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    pxUSB->Inst->DOEPMSK.w  = 0;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
    pxUSB->Inst->DAINTMSK.w = 0;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

    /* Flush the FIFOs */
    USB_prvFlushRxFifo(pxUSB);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fa70 	bl	80032e4 <USB_prvFlushRxFifo>
    USB_prvFlushTxFifo(pxUSB, USB_ALL_TX_FIFOS);
 8003e04:	2110      	movs	r1, #16
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fa59 	bl	80032be <USB_prvFlushTxFifo>

    /* Virtual disconnect */
    USB_prvConnectCtrl(pxUSB, DISABLE);
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fa3a 	bl	8003288 <USB_prvConnectCtrl>

    /* Set Link State to disconnected */
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2203      	movs	r2, #3
 8003e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	7ff3c7ef 	.word	0x7ff3c7ef

08003e28 <USB_vSetAddress>:
 * @brief Sets the USB device address
 * @param pxUSB: pointer to the USB handle structure
 * @param ucAddress: new device address
 */
void USB_vSetAddress(USB_HandleType * pxUSB, uint8_t ucAddress)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->DCFG.b.DAD = ucAddress;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e3e:	b2d9      	uxtb	r1, r3
 8003e40:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8003e44:	f361 130a 	bfi	r3, r1, #4, #7
 8003e48:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <USB_vCtrlEpOpen>:
/**
 * @brief Sets endpoint buffers and opens the default control endpoint.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vCtrlEpOpen(USB_HandleType * pxUSB)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    /* Allocate FIFO space for all used endpoints based on MPS */
    USB_vAllocateEPs(pxUSB);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fb27 	bl	80044b4 <USB_vAllocateEPs>

    /* Open EP0 */
    USB_prvCtrlEpOpen(pxUSB);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fd71 	bl	800394e <USB_prvCtrlEpOpen>
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <USB_vEpOpen>:
void USB_vEpOpen(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        USB_EndPointType    eType,
        uint16_t            usMaxPacketSize)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	70fb      	strb	r3, [r7, #3]
 8003e86:	460b      	mov	r3, r1
 8003e88:	70bb      	strb	r3, [r7, #2]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	803b      	strh	r3, [r7, #0]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8003e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da08      	bge.n	8003ea8 <USB_vEpOpen+0x34>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	3348      	adds	r3, #72	; 0x48
 8003ea2:	015b      	lsls	r3, r3, #5
 8003ea4:	4413      	add	r3, r2
 8003ea6:	e005      	b.n	8003eb4 <USB_vEpOpen+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	3358      	adds	r3, #88	; 0x58
 8003eb0:	015b      	lsls	r3, r3, #5
 8003eb2:	4413      	add	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 8003eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da08      	bge.n	8003ed0 <USB_vEpOpen+0x5c>
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	3338      	adds	r3, #56	; 0x38
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	e006      	b.n	8003ede <USB_vEpOpen+0x6a>
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	3306      	adds	r3, #6
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	3338      	adds	r3, #56	; 0x38
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	3304      	adds	r3, #4
 8003ede:	613b      	str	r3, [r7, #16]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	73fb      	strb	r3, [r7, #15]

    pxEP->MaxPacketSize = usMaxPacketSize;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	883a      	ldrh	r2, [r7, #0]
 8003eec:	811a      	strh	r2, [r3, #8]
    pxEP->Type = eType;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	78ba      	ldrb	r2, [r7, #2]
 8003ef2:	729a      	strb	r2, [r3, #10]

    /* Activate Endpoint interrupts */
    if (ucEpAddress > 0x7F)
 8003ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da0e      	bge.n	8003f1a <USB_vEpOpen+0xa6>
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2101      	movs	r1, #1
 8003f08:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8003f18:	e00e      	b.n	8003f38 <USB_vEpOpen+0xc4>
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));
    }
    else
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	3310      	adds	r3, #16
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* Check if currently inactive */
    if (pxDEP->DxEPCTL.b.USBAEP == 0)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d126      	bne.n	8003f94 <USB_vEpOpen+0x120>
    {
        pxDEP->DxEPCTL.b.MPSIZ  = pxEP->MaxPacketSize;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	891b      	ldrh	r3, [r3, #8]
 8003f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f4e:	b299      	uxth	r1, r3
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	f361 030a 	bfi	r3, r1, #0, #11
 8003f58:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.EPTYP  = pxEP->Type;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	7a9b      	ldrb	r3, [r3, #10]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	b2d9      	uxtb	r1, r3
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	6813      	ldr	r3, [r2, #0]
 8003f68:	f361 4393 	bfi	r3, r1, #18, #2
 8003f6c:	6013      	str	r3, [r2, #0]

        /* Only valid for IN EP, the field is reserved for OUT EPs */
        pxDEP->DxEPCTL.b.TXFNUM = ucEpNum;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	b2d9      	uxtb	r1, r3
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	6813      	ldr	r3, [r2, #0]
 8003f7a:	f361 5399 	bfi	r3, r1, #22, #4
 8003f7e:	6013      	str	r3, [r2, #0]

        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	6813      	ldr	r3, [r2, #0]
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.USBAEP = 1;
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	6813      	ldr	r3, [r2, #0]
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f92:	6013      	str	r3, [r2, #0]
    }
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <USB_vEpClose>:
 * @brief Closes an active endpoint (EP0 shall not be closed).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClose(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8003fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	da08      	bge.n	8003fc6 <USB_vEpClose+0x26>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	3348      	adds	r3, #72	; 0x48
 8003fc0:	015b      	lsls	r3, r3, #5
 8003fc2:	4413      	add	r3, r2
 8003fc4:	e005      	b.n	8003fd2 <USB_vEpClose+0x32>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	3358      	adds	r3, #88	; 0x58
 8003fce:	015b      	lsls	r3, r3, #5
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	72fb      	strb	r3, [r7, #11]

    /* Deactivate Endpoint */
    if (ucEpAddress > 0x7F)
 8003fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	da23      	bge.n	800402c <USB_vEpClose+0x8c>
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8003fec:	7afb      	ldrb	r3, [r7, #11]
 8003fee:	2101      	movs	r1, #1
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_IEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	400a      	ands	r2, r1
 800401c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));

        /* Flush dedicated FIFO */
        USB_prvFlushTxFifo(pxUSB, ucEpNum);
 8004020:	7afb      	ldrb	r3, [r7, #11]
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff f94a 	bl	80032be <USB_prvFlushTxFifo>
 800402a:	e01f      	b.n	800406c <USB_vEpClose+0xcc>
    }
    else
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8004034:	7afb      	ldrb	r3, [r7, #11]
 8004036:	3310      	adds	r3, #16
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	400a      	ands	r2, r1
 8004048:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_OEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8004054:	7afb      	ldrb	r3, [r7, #11]
 8004056:	3310      	adds	r3, #16
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	4619      	mov	r1, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	400a      	ands	r2, r1
 8004068:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* If a transfer is ongoing, interrupt with NACK */
    if (pxDEP->DxEPCTL.b.EPENA != 0)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <USB_vEpClose+0xe4>
    {
        pxDEP->DxEPCTL.w = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e002      	b.n	800408a <USB_vEpClose+0xea>
    }
    else
    {
        pxDEP->DxEPCTL.w = 0;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
    }

    pxDEP->DxEPTSIZ.w = 0;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
    pxDEP->DxEPINT.w  = 0xFF;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	22ff      	movs	r2, #255	; 0xff
 8004094:	609a      	str	r2, [r3, #8]
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <USB_vEpSetStall>:
 * @brief Set a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpSetStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 80040aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da08      	bge.n	80040c4 <USB_vEpSetStall+0x26>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	3348      	adds	r3, #72	; 0x48
 80040be:	015b      	lsls	r3, r3, #5
 80040c0:	4413      	add	r3, r2
 80040c2:	e005      	b.n	80040d0 <USB_vEpSetStall+0x32>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	3358      	adds	r3, #88	; 0x58
 80040cc:	015b      	lsls	r3, r3, #5
 80040ce:	4413      	add	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

    if (pxDEP->DxEPCTL.b.EPENA == 0)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <USB_vEpSetStall+0x4c>
    {
        pxDEP->DxEPCTL.b.EPDIS = 0;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	6813      	ldr	r3, [r2, #0]
 80040e4:	f36f 739e 	bfc	r3, #30, #1
 80040e8:	6013      	str	r3, [r2, #0]
    }
    pxDEP->DxEPCTL.b.STALL = 1;
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	6813      	ldr	r3, [r2, #0]
 80040ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f2:	6013      	str	r3, [r2, #0]

    /* STALL-ed EP must still be able to receive SETUP */
    if (ucEpAddress == 0)
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <USB_vEpSetStall+0x62>
    {
        USB_prvPrepareSetup(pxUSB);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fb28 	bl	8003750 <USB_prvPrepareSetup>
    }
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <USB_vEpClearStall>:
 * @brief Clear a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpClearStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8004114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004118:	2b00      	cmp	r3, #0
 800411a:	da08      	bge.n	800412e <USB_vEpClearStall+0x26>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	3348      	adds	r3, #72	; 0x48
 8004128:	015b      	lsls	r3, r3, #5
 800412a:	4413      	add	r3, r2
 800412c:	e005      	b.n	800413a <USB_vEpClearStall+0x32>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	3358      	adds	r3, #88	; 0x58
 8004136:	015b      	lsls	r3, r3, #5
 8004138:	4413      	add	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

    pxDEP->DxEPCTL.b.STALL = 0;
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	f36f 5355 	bfc	r3, #21, #1
 8004144:	6013      	str	r3, [r2, #0]

    /* INTERRUPT || BULK -> set DATA0 PID */
    if (pxDEP->DxEPCTL.b.EPTYP >= USB_EP_TYPE_BULK)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f3c3 4381 	ubfx	r3, r3, #18, #2
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d904      	bls.n	800415e <USB_vEpClearStall+0x56>
    {
        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415c:	6013      	str	r3, [r2, #0]
    }
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_vEpReceive>:
void USB_vEpReceive(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        uint8_t *           pucData,
        uint16_t            usLength)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	461a      	mov	r2, r3
 8004176:	460b      	mov	r3, r1
 8004178:	72fb      	strb	r3, [r7, #11]
 800417a:	4613      	mov	r3, r2
 800417c:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpAddress];
 800417e:	7afb      	ldrb	r3, [r7, #11]
 8004180:	3306      	adds	r3, #6
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	3338      	adds	r3, #56	; 0x38
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	3304      	adds	r3, #4
 800418c:	617b      	str	r3, [r7, #20]

    /* setup transfer */
    pxEP->Transfer.Data       = pucData;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	893a      	ldrh	r2, [r7, #8]
 8004198:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = 0;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2200      	movs	r2, #0
 800419e:	809a      	strh	r2, [r3, #4]

    USB_prvEpReceive(pxUSB, ucEpAddress);
 80041a0:	7afb      	ldrb	r3, [r7, #11]
 80041a2:	4619      	mov	r1, r3
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff fa56 	bl	8003656 <USB_prvEpReceive>
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <USB_vEpSend>:
void USB_vEpSend(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        const uint8_t *     pucData,
        uint16_t            usLength)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	461a      	mov	r2, r3
 80041be:	460b      	mov	r3, r1
 80041c0:	72fb      	strb	r3, [r7, #11]
 80041c2:	4613      	mov	r3, r2
 80041c4:	813b      	strh	r3, [r7, #8]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 80041c6:	7afb      	ldrb	r3, [r7, #11]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	75fb      	strb	r3, [r7, #23]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	3338      	adds	r3, #56	; 0x38
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	613b      	str	r3, [r7, #16]

    /* setup and start the transfer */
    pxEP->Transfer.Data       = (uint8_t*)pucData;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	893a      	ldrh	r2, [r7, #8]
 80041e6:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = usLength;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	893a      	ldrh	r2, [r7, #8]
 80041ec:	809a      	strh	r2, [r3, #4]

    USB_prvEpSend(pxUSB, ucEpNum);
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	4619      	mov	r1, r3
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff f981 	bl	80034fa <USB_prvEpSend>
}
 80041f8:	bf00      	nop
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <USB_vDevIRQHandler>:
 * @brief USB interrupt handler that provides event-driven peripheral management
 *        and handle callbacks.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevIRQHandler(USB_HandleType * pxUSB)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    uint32_t ulGINT = pxUSB->Inst->GINTSTS.w & pxUSB->Inst->GINTMSK.w;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]

    if (ulGINT != 0)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8143 	beq.w	80044a6 <USB_vDevIRQHandler+0x2a6>
            struct {
                uint16_t IEPINT;
                uint16_t OEPINT;
            }b;
            uint32_t w;
        }xDAINT = { .w = pxUSB->Inst->DAINT.w & pxUSB->Inst->DAINTMSK.w };
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

        /* Rx FIFO level reached */
        if ((ulGINT & USB_OTG_GINTSTS_RXFLVL) != 0)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d03d      	beq.n	80042ba <USB_vDevIRQHandler+0xba>
        {
            uint32_t ulGRXSTSP  = pxUSB->Inst->GRXSTSP.w;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	61bb      	str	r3, [r7, #24]
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
                                            >> USB_OTG_GRXSTSP_BCNT_Pos;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	b29b      	uxth	r3, r3
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
 800424c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004250:	82fb      	strh	r3, [r7, #22]
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
                                            >> USB_OTG_GRXSTSP_EPNUM_Pos;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	b2db      	uxtb	r3, r3
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	757b      	strb	r3, [r7, #21]
            USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 800425c:	7d7b      	ldrb	r3, [r7, #21]
 800425e:	3306      	adds	r3, #6
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	3338      	adds	r3, #56	; 0x38
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	613b      	str	r3, [r7, #16]

            switch (ulGRXSTSP & USB_OTG_GRXSTSP_PKTSTS_Msk)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 8004272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004276:	d003      	beq.n	8004280 <USB_vDevIRQHandler+0x80>
 8004278:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800427c:	d015      	beq.n	80042aa <USB_vDevIRQHandler+0xaa>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
                            sizeof(pxUSB->Setup));
                    break;

                default:
                    break;
 800427e:	e01d      	b.n	80042bc <USB_vDevIRQHandler+0xbc>
                    USB_prvReadFifo(pxUSB, pxEP->Transfer.Data, usDataCount);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	8afa      	ldrh	r2, [r7, #22]
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff f8a1 	bl	80033d0 <USB_prvReadFifo>
                    pxEP->Transfer.Length += usDataCount;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	889a      	ldrh	r2, [r3, #4]
 8004292:	8afb      	ldrh	r3, [r7, #22]
 8004294:	4413      	add	r3, r2
 8004296:	b29a      	uxth	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	809a      	strh	r2, [r3, #4]
                    pxEP->Transfer.Data += usDataCount;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	8afb      	ldrh	r3, [r7, #22]
 80042a2:	441a      	add	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	601a      	str	r2, [r3, #0]
                    break;
 80042a8:	e008      	b.n	80042bc <USB_vDevIRQHandler+0xbc>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2208      	movs	r2, #8
 80042b0:	4619      	mov	r1, r3
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff f88c 	bl	80033d0 <USB_prvReadFifo>
                    break;
 80042b8:	e000      	b.n	80042bc <USB_vDevIRQHandler+0xbc>
            }
        }
 80042ba:	bf00      	nop

        /* OUT endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_OEPINT) != 0)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01a      	beq.n	80042fc <USB_vDevIRQHandler+0xfc>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042cc:	e013      	b.n	80042f6 <USB_vDevIRQHandler+0xf6>
            {
                if ((xDAINT.b.OEPINT & 1) != 0)
 80042ce:	89fb      	ldrh	r3, [r7, #14]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <USB_vDevIRQHandler+0xe4>
                {
                    USB_prvOutEpEventHandler(pxUSB, ucEpNum);
 80042d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fac4 	bl	800386c <USB_prvOutEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 80042e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042e8:	3301      	adds	r3, #1
 80042ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	81fb      	strh	r3, [r7, #14]
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e8      	bne.n	80042ce <USB_vDevIRQHandler+0xce>
                }
            }
        }

        /* IN endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_IEPINT) != 0)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01a      	beq.n	800433c <USB_vDevIRQHandler+0x13c>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 8004306:	2300      	movs	r3, #0
 8004308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800430c:	e013      	b.n	8004336 <USB_vDevIRQHandler+0x136>
            {
                if ((xDAINT.b.IEPINT & 1) != 0)
 800430e:	89bb      	ldrh	r3, [r7, #12]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <USB_vDevIRQHandler+0x124>
                {
                    USB_prvInEpEventHandler(pxUSB, ucEpNum);
 8004318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fa3c 	bl	800379c <USB_prvInEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 8004324:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004328:	3301      	adds	r3, #1
 800432a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800432e:	89bb      	ldrh	r3, [r7, #12]
 8004330:	085b      	lsrs	r3, r3, #1
 8004332:	b29b      	uxth	r3, r3
 8004334:	81bb      	strh	r3, [r7, #12]
 8004336:	89bb      	ldrh	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e8      	bne.n	800430e <USB_vDevIRQHandler+0x10e>
                }
            }
        }

        /* Handle Reset Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBRST) != 0)
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01e      	beq.n	8004384 <USB_vDevIRQHandler+0x184>
        {
            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, USBRST);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800434e:	615a      	str	r2, [r3, #20]

            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            /* Stop any ongoing Remote Wakeup signaling and EP0 transfers */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8004360:	f36f 0300 	bfc	r3, #0, #1
 8004364:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            USB_prvFlushRxFifo(pxUSB);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fe ffbb 	bl	80032e4 <USB_prvFlushRxFifo>
            USB_prvFlushTxFifo(pxUSB, 0);
 800436e:	2100      	movs	r1, #0
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fe ffa4 	bl	80032be <USB_prvFlushTxFifo>

            /* Clear EP interrupt flags */
            USB_prvClearEpInts(pxUSB);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fe ffc2 	bl	8003300 <USB_prvClearEpInts>

            /* Set default address (0) */
            USB_vSetAddress(pxUSB, 0);
 800437c:	2100      	movs	r1, #0
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fd52 	bl	8003e28 <USB_vSetAddress>
        }

        /* Handle Enumeration done Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_ENUMDNE) != 0)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d03f      	beq.n	800440e <USB_vDevIRQHandler+0x20e>
        {
            USB_SpeedType eSpeed = USB_SPEED_FULL;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, ENUMDNE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800439c:	615a      	str	r2, [r3, #20]

            /* Clear global IN NAK */
            USB_REG_BIT(pxUSB,DCTL,CGINAK) = 1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804

#ifdef USB_OTG_HS
            /* High speed enumerated */
            if (pxUSB->Inst->DSTS.b.ENUMSPD == 0)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80043b6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <USB_vDevIRQHandler+0x1d6>
            {
                eSpeed = USB_SPEED_HIGH;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                pxUSB->Inst->GUSBCFG.b.TRDT = 9;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	68d3      	ldr	r3, [r2, #12]
 80043cc:	2109      	movs	r1, #9
 80043ce:	f361 238d 	bfi	r3, r1, #10, #4
 80043d2:	60d3      	str	r3, [r2, #12]
 80043d4:	e015      	b.n	8004402 <USB_vDevIRQHandler+0x202>
            {
                /* Full speed enumeration */
                uint32_t ulTRDT;

                /* Get most suitable value depending on AHB frequency */
                ulTRDT = 224000000 / RCC_ulClockFreq_Hz(HCLK);
 80043d6:	f001 fce5 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
 80043da:	4603      	mov	r3, r0
 80043dc:	4a34      	ldr	r2, [pc, #208]	; (80044b0 <USB_vDevIRQHandler+0x2b0>)
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	623b      	str	r3, [r7, #32]
                if (ulTRDT < 6)
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d801      	bhi.n	80043ee <USB_vDevIRQHandler+0x1ee>
                {
                    ulTRDT = 6;
 80043ea:	2306      	movs	r3, #6
 80043ec:	623b      	str	r3, [r7, #32]
                }
                pxUSB->Inst->GUSBCFG.b.TRDT = ulTRDT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	b2d9      	uxtb	r1, r3
 80043fa:	68d3      	ldr	r3, [r2, #12]
 80043fc:	f361 238d 	bfi	r3, r1, #10, #4
 8004400:	60d3      	str	r3, [r2, #12]
            }

            /* Notify device handler */
            USB_vResetCallback(pxUSB, eSpeed);
 8004402:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fe f882 	bl	8002512 <USBD_ResetCallback>
        }

        /* Handle Resume Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_WKUINT) != 0)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	da18      	bge.n	8004446 <USB_vDevIRQHandler+0x246>
        {
            /* Stop any ongoing Remote Wakeup signaling */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800441c:	f36f 0300 	bfc	r3, #0, #1
 8004420:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804

            USB_FLAG_CLEAR(pxUSB, WKUINT);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800442c:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Resume, pxUSB);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <USB_vDevIRQHandler+0x23e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3

            /* LPM state is changed after Resume callback
             * -> possible to determine exited suspend level */
            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
        }
#endif

        /* Handle Suspend Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBSUSP) != 0)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444c:	2b00      	cmp	r3, #0
 800444e:	d019      	beq.n	8004484 <USB_vDevIRQHandler+0x284>
        {
            USB_FLAG_CLEAR(pxUSB, USBSUSP);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004458:	615a      	str	r2, [r3, #20]

            if (USB_REG_BIT(pxUSB,DSTS,SUSPSTS) != 0)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8004462:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <USB_vDevIRQHandler+0x284>
            {
                /* Set the target Link State */
                pxUSB->LinkState = USB_LINK_STATE_SUSPEND;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <USB_vDevIRQHandler+0x284>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
            }
        }

        /* Handle SOF Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_SOF) != 0)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <USB_vDevIRQHandler+0x2a6>
        {
            USB_FLAG_CLEAR(pxUSB, SOF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2208      	movs	r2, #8
 8004494:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.SOF, pxUSB);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <USB_vDevIRQHandler+0x2a6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
        }
    }
}
 80044a6:	bf00      	nop
 80044a8:	3728      	adds	r7, #40	; 0x28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	0d59f800 	.word	0x0d59f800

080044b4 <USB_vAllocateEPs>:
 * @brief Configure peripheral FIFO allocation for endpoints
 *        after device initialization and before starting the USB operation.
 * @param pxUSB: pointer to the USB handle structure
 */
__weak void USB_vAllocateEPs(USB_HandleType * pxUSB)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b089      	sub	sp, #36	; 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
    XPD_ReturnType eResult = XPD_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	74fb      	strb	r3, [r7, #19]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a46      	ldr	r2, [pc, #280]	; (80045e0 <USB_vAllocateEPs+0x12c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <USB_vAllocateEPs+0x1a>
 80044ca:	2306      	movs	r3, #6
 80044cc:	e000      	b.n	80044d0 <USB_vAllocateEPs+0x1c>
 80044ce:	2304      	movs	r3, #4
 80044d0:	74bb      	strb	r3, [r7, #18]
    uint32_t ulMinFifoSizeVal = 16;
 80044d2:	2310      	movs	r3, #16
 80044d4:	60fb      	str	r3, [r7, #12]
    uint32_t ulFifoSize = ulMinFifoSizeVal * sizeof(uint32_t);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	61bb      	str	r3, [r7, #24]
    uint32_t ulFifoOffset;
    uint32_t ulFifoLimit = USB_TOTAL_FIFO_SIZE(pxUSB);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a3f      	ldr	r2, [pc, #252]	; (80045e0 <USB_vAllocateEPs+0x12c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d102      	bne.n	80044ec <USB_vAllocateEPs+0x38>
 80044e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ea:	e001      	b.n	80044f0 <USB_vAllocateEPs+0x3c>
 80044ec:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80044f0:	60bb      	str	r3, [r7, #8]

    /* Configure the global Receive FIFO based on the largest requested OUT EP size */
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e015      	b.n	8004524 <USB_vAllocateEPs+0x70>
    {
        if (pxUSB->EP.OUT[ucEpNum].MaxPacketSize > ulFifoSize)
 80044f8:	7ffb      	ldrb	r3, [r7, #31]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	330a      	adds	r3, #10
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	3304      	adds	r3, #4
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	4293      	cmp	r3, r2
 800450c:	d207      	bcs.n	800451e <USB_vAllocateEPs+0x6a>
        {
            ulFifoSize = pxUSB->EP.OUT[ucEpNum].MaxPacketSize;
 800450e:	7ffb      	ldrb	r3, [r7, #31]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	330a      	adds	r3, #10
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4413      	add	r3, r2
 8004518:	3304      	adds	r3, #4
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	61bb      	str	r3, [r7, #24]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 800451e:	7ffb      	ldrb	r3, [r7, #31]
 8004520:	3301      	adds	r3, #1
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	7ffa      	ldrb	r2, [r7, #31]
 8004526:	7cbb      	ldrb	r3, [r7, #18]
 8004528:	429a      	cmp	r2, r3
 800452a:	d3e5      	bcc.n	80044f8 <USB_vAllocateEPs+0x44>
        }
    }

    /* FIFO sizes are in words */
    ulFifoSize = (ulFifoSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	3303      	adds	r3, #3
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	61bb      	str	r3, [r7, #24]

    /* Global RX FIFO according to trial and error, thanks to defective documentation */
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
            + (ulFifoSize + 1)  /* each packet gets status info as well */
            + (ucEpCount * 2)   /* transfer complete status is also stored with the last packet */
 8004534:	7cbb      	ldrb	r3, [r7, #18]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	461a      	mov	r2, r3
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4413      	add	r3, r2
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
 800453e:	330f      	adds	r3, #15
 8004540:	617b      	str	r3, [r7, #20]
            + 1;                /* for Global OUT NAK */
    pxUSB->Inst->GRXFSIZ = ulFifoOffset;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	625a      	str	r2, [r3, #36]	; 0x24

    /* EP0 TX FIFO */
    ulFifoSize = (pxUSB->EP.IN[0].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004550:	3303      	adds	r3, #3
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	61bb      	str	r3, [r7, #24]
    if (ulFifoSize < ulMinFifoSizeVal)
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	429a      	cmp	r2, r3
 800455c:	d201      	bcs.n	8004562 <USB_vAllocateEPs+0xae>
    {   ulFifoSize = ulMinFifoSizeVal; }
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	61bb      	str	r3, [r7, #24]

    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	0419      	lsls	r1, r3, #16
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	430a      	orrs	r2, r1
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
            (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);

    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 8004570:	2301      	movs	r3, #1
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e022      	b.n	80045bc <USB_vAllocateEPs+0x108>
    {
        /* Increase offset with the FIFO size */
        ulFifoOffset += ulFifoSize;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	4413      	add	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

        /* FIFO sizes are in words */
        ulFifoSize = (pxUSB->EP.IN[ucEpNum].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800457e:	7ffb      	ldrb	r3, [r7, #31]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	4413      	add	r3, r2
 8004588:	3304      	adds	r3, #4
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	3303      	adds	r3, #3
 800458e:	089b      	lsrs	r3, r3, #2
 8004590:	61bb      	str	r3, [r7, #24]
        if (ulFifoSize < ulMinFifoSizeVal)
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	d201      	bcs.n	800459e <USB_vAllocateEPs+0xea>
        {   ulFifoSize = ulMinFifoSizeVal; }
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	61bb      	str	r3, [r7, #24]

        /* EPx TX FIFOs */
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	0418      	lsls	r0, r3, #16
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68d9      	ldr	r1, [r3, #12]
 80045a6:	7ffb      	ldrb	r3, [r7, #31]
 80045a8:	3b01      	subs	r3, #1
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4302      	orrs	r2, r0
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 80045ae:	3340      	adds	r3, #64	; 0x40
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	605a      	str	r2, [r3, #4]
    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 80045b6:	7ffb      	ldrb	r3, [r7, #31]
 80045b8:	3301      	adds	r3, #1
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	7ffa      	ldrb	r2, [r7, #31]
 80045be:	7cbb      	ldrb	r3, [r7, #18]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d3d8      	bcc.n	8004576 <USB_vAllocateEPs+0xc2>
                (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);
    }

    /* Total FIFO use shouldn't exceed available size */
    if (ulFifoLimit < (ulFifoOffset + ulFifoSize))
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d201      	bcs.n	80045d4 <USB_vAllocateEPs+0x120>
    {
        eResult = XPD_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	74fb      	strb	r3, [r7, #19]
    }

    (void) eResult;
}
 80045d4:	bf00      	nop
 80045d6:	3724      	adds	r7, #36	; 0x24
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40040000 	.word	0x40040000

080045e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <HAL_Init+0x40>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0d      	ldr	r2, [pc, #52]	; (8004624 <HAL_Init+0x40>)
 80045ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_Init+0x40>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <HAL_Init+0x40>)
 80045fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004600:	4b08      	ldr	r3, [pc, #32]	; (8004624 <HAL_Init+0x40>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a07      	ldr	r2, [pc, #28]	; (8004624 <HAL_Init+0x40>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800460c:	2003      	movs	r0, #3
 800460e:	f000 f973 	bl	80048f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004612:	2000      	movs	r0, #0
 8004614:	f000 f808 	bl	8004628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004618:	f7fd f846 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40023c00 	.word	0x40023c00

08004628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_InitTick+0x54>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <HAL_InitTick+0x58>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	4619      	mov	r1, r3
 800463a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800463e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f999 	bl	800497e <HAL_SYSTICK_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e00e      	b.n	8004674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b0f      	cmp	r3, #15
 800465a:	d80a      	bhi.n	8004672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800465c:	2200      	movs	r2, #0
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	f000 f953 	bl	800490e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004668:	4a06      	ldr	r2, [pc, #24]	; (8004684 <HAL_InitTick+0x5c>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000034 	.word	0x20000034
 8004680:	2000003c 	.word	0x2000003c
 8004684:	20000038 	.word	0x20000038

08004688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_IncTick+0x20>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <HAL_IncTick+0x24>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4413      	add	r3, r2
 8004698:	4a04      	ldr	r2, [pc, #16]	; (80046ac <HAL_IncTick+0x24>)
 800469a:	6013      	str	r3, [r2, #0]
}
 800469c:	bf00      	nop
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	2000003c 	.word	0x2000003c
 80046ac:	20000fb8 	.word	0x20000fb8

080046b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return uwTick;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <HAL_GetTick+0x14>)
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000fb8 	.word	0x20000fb8

080046c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046d0:	f7ff ffee 	bl	80046b0 <HAL_GetTick>
 80046d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d005      	beq.n	80046ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_Delay+0x44>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046ee:	bf00      	nop
 80046f0:	f7ff ffde 	bl	80046b0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d8f7      	bhi.n	80046f0 <HAL_Delay+0x28>
  {
  }
}
 8004700:	bf00      	nop
 8004702:	bf00      	nop
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	2000003c 	.word	0x2000003c

08004710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <__NVIC_SetPriorityGrouping+0x44>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800472c:	4013      	ands	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800473c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004742:	4a04      	ldr	r2, [pc, #16]	; (8004754 <__NVIC_SetPriorityGrouping+0x44>)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	60d3      	str	r3, [r2, #12]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <__NVIC_GetPriorityGrouping+0x18>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 0307 	and.w	r3, r3, #7
}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	2b00      	cmp	r3, #0
 8004784:	db0b      	blt.n	800479e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	4907      	ldr	r1, [pc, #28]	; (80047ac <__NVIC_EnableIRQ+0x38>)
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2001      	movs	r0, #1
 8004796:	fa00 f202 	lsl.w	r2, r0, r2
 800479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e100 	.word	0xe000e100

080047b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	db12      	blt.n	80047e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	490a      	ldr	r1, [pc, #40]	; (80047f4 <__NVIC_DisableIRQ+0x44>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2001      	movs	r0, #1
 80047d2:	fa00 f202 	lsl.w	r2, r0, r2
 80047d6:	3320      	adds	r3, #32
 80047d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80047dc:	f3bf 8f4f 	dsb	sy
}
 80047e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047e2:	f3bf 8f6f 	isb	sy
}
 80047e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000e100 	.word	0xe000e100

080047f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db0a      	blt.n	8004822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	490c      	ldr	r1, [pc, #48]	; (8004844 <__NVIC_SetPriority+0x4c>)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	440b      	add	r3, r1
 800481c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004820:	e00a      	b.n	8004838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4908      	ldr	r1, [pc, #32]	; (8004848 <__NVIC_SetPriority+0x50>)
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	3b04      	subs	r3, #4
 8004830:	0112      	lsls	r2, r2, #4
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	440b      	add	r3, r1
 8004836:	761a      	strb	r2, [r3, #24]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000e100 	.word	0xe000e100
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	; 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f1c3 0307 	rsb	r3, r3, #7
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf28      	it	cs
 800486a:	2304      	movcs	r3, #4
 800486c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3304      	adds	r3, #4
 8004872:	2b06      	cmp	r3, #6
 8004874:	d902      	bls.n	800487c <NVIC_EncodePriority+0x30>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3b03      	subs	r3, #3
 800487a:	e000      	b.n	800487e <NVIC_EncodePriority+0x32>
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43da      	mvns	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	401a      	ands	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004894:	f04f 31ff 	mov.w	r1, #4294967295
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	43d9      	mvns	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	4313      	orrs	r3, r2
         );
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3724      	adds	r7, #36	; 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c4:	d301      	bcc.n	80048ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <SysTick_Config+0x40>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d2:	210f      	movs	r1, #15
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	f7ff ff8e 	bl	80047f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <SysTick_Config+0x40>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <SysTick_Config+0x40>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff05 	bl	8004710 <__NVIC_SetPriorityGrouping>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004920:	f7ff ff1a 	bl	8004758 <__NVIC_GetPriorityGrouping>
 8004924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff8e 	bl	800484c <NVIC_EncodePriority>
 8004930:	4602      	mov	r2, r0
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff5d 	bl	80047f8 <__NVIC_SetPriority>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff0d 	bl	8004774 <__NVIC_EnableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff1d 	bl	80047b0 <__NVIC_DisableIRQ>
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ff94 	bl	80048b4 <SysTick_Config>
 800498c:	4603      	mov	r3, r0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049aa:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <HAL_FLASH_Program+0xa0>)
 80049ac:	7e1b      	ldrb	r3, [r3, #24]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_FLASH_Program+0x1e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e03b      	b.n	8004a2e <HAL_FLASH_Program+0x96>
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <HAL_FLASH_Program+0xa0>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049c0:	f000 f87c 	bl	8004abc <FLASH_WaitForLastOperation>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d12b      	bne.n	8004a26 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80049d4:	783b      	ldrb	r3, [r7, #0]
 80049d6:	4619      	mov	r1, r3
 80049d8:	68b8      	ldr	r0, [r7, #8]
 80049da:	f000 f927 	bl	8004c2c <FLASH_Program_Byte>
 80049de:	e016      	b.n	8004a0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80049e6:	883b      	ldrh	r3, [r7, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	68b8      	ldr	r0, [r7, #8]
 80049ec:	f000 f8fa 	bl	8004be4 <FLASH_Program_HalfWord>
 80049f0:	e00d      	b.n	8004a0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d105      	bne.n	8004a04 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4619      	mov	r1, r3
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	f000 f8cf 	bl	8004ba0 <FLASH_Program_Word>
 8004a02:	e004      	b.n	8004a0e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f000 f897 	bl	8004b3c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a12:	f000 f853 	bl	8004abc <FLASH_WaitForLastOperation>
 8004a16:	4603      	mov	r3, r0
 8004a18:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_FLASH_Program+0xa4>)
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <HAL_FLASH_Program+0xa4>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_FLASH_Program+0xa0>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000fbc 	.word	0x20000fbc
 8004a3c:	40023c00 	.word	0x40023c00

08004a40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_FLASH_Unlock+0x38>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	da0b      	bge.n	8004a6a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_FLASH_Unlock+0x38>)
 8004a54:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <HAL_FLASH_Unlock+0x3c>)
 8004a56:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <HAL_FLASH_Unlock+0x38>)
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_FLASH_Unlock+0x40>)
 8004a5c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_FLASH_Unlock+0x38>)
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da01      	bge.n	8004a6a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40023c00 	.word	0x40023c00
 8004a7c:	45670123 	.word	0x45670123
 8004a80:	cdef89ab 	.word	0xcdef89ab

08004a84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_FLASH_Lock+0x1c>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <HAL_FLASH_Lock+0x1c>)
 8004a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a92:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40023c00 	.word	0x40023c00

08004aa4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_FLASH_GetError+0x14>)
 8004aaa:	69db      	ldr	r3, [r3, #28]
}  
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000fbc 	.word	0x20000fbc

08004abc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <FLASH_WaitForLastOperation+0x78>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ace:	f7ff fdef 	bl	80046b0 <HAL_GetTick>
 8004ad2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004ad4:	e010      	b.n	8004af8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d00c      	beq.n	8004af8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <FLASH_WaitForLastOperation+0x38>
 8004ae4:	f7ff fde4 	bl	80046b0 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d201      	bcs.n	8004af8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e019      	b.n	8004b2c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <FLASH_WaitForLastOperation+0x7c>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e8      	bne.n	8004ad6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <FLASH_WaitForLastOperation+0x7c>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <FLASH_WaitForLastOperation+0x7c>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <FLASH_WaitForLastOperation+0x7c>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b22:	f000 f8a5 	bl	8004c70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
  
}  
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000fbc 	.word	0x20000fbc
 8004b38:	40023c00 	.word	0x40023c00

08004b3c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <FLASH_Program_DoubleWord+0x60>)
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <FLASH_Program_DoubleWord+0x60>)
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004b54:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <FLASH_Program_DoubleWord+0x60>)
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <FLASH_Program_DoubleWord+0x60>)
 8004b5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004b5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b60:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <FLASH_Program_DoubleWord+0x60>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	4a0d      	ldr	r2, [pc, #52]	; (8004b9c <FLASH_Program_DoubleWord+0x60>)
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b72:	f3bf 8f6f 	isb	sy
}
 8004b76:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	000a      	movs	r2, r1
 8004b86:	2300      	movs	r3, #0
 8004b88:	68f9      	ldr	r1, [r7, #12]
 8004b8a:	3104      	adds	r1, #4
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40023c00 	.word	0x40023c00

08004ba0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <FLASH_Program_Word+0x40>)
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <FLASH_Program_Word+0x40>)
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <FLASH_Program_Word+0x40>)
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <FLASH_Program_Word+0x40>)
 8004bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <FLASH_Program_Word+0x40>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <FLASH_Program_Word+0x40>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40023c00 	.word	0x40023c00

08004be4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bf0:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <FLASH_Program_HalfWord+0x44>)
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <FLASH_Program_HalfWord+0x44>)
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <FLASH_Program_HalfWord+0x44>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	4a09      	ldr	r2, [pc, #36]	; (8004c28 <FLASH_Program_HalfWord+0x44>)
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <FLASH_Program_HalfWord+0x44>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	4a06      	ldr	r2, [pc, #24]	; (8004c28 <FLASH_Program_HalfWord+0x44>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	801a      	strh	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40023c00 	.word	0x40023c00

08004c2c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <FLASH_Program_Byte+0x40>)
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	4a0b      	ldr	r2, [pc, #44]	; (8004c6c <FLASH_Program_Byte+0x40>)
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <FLASH_Program_Byte+0x40>)
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <FLASH_Program_Byte+0x40>)
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <FLASH_Program_Byte+0x40>)
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <FLASH_Program_Byte+0x40>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	701a      	strb	r2, [r3, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40023c00 	.word	0x40023c00

08004c70 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004c74:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f043 0310 	orr.w	r3, r3, #16
 8004c88:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004c8a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004c8c:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004c8e:	2210      	movs	r2, #16
 8004c90:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f043 0308 	orr.w	r3, r3, #8
 8004ca6:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004ca8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004caa:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004cac:	2220      	movs	r2, #32
 8004cae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004cb0:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004cbc:	4b16      	ldr	r3, [pc, #88]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004cc6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004cca:	2240      	movs	r2, #64	; 0x40
 8004ccc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f043 0302 	orr.w	r3, r3, #2
 8004ce2:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004ce4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004ce8:	2280      	movs	r2, #128	; 0x80
 8004cea:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f043 0320 	orr.w	r3, r3, #32
 8004d00:	4a05      	ldr	r2, [pc, #20]	; (8004d18 <FLASH_SetErrorCode+0xa8>)
 8004d02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <FLASH_SetErrorCode+0xa4>)
 8004d06:	2202      	movs	r2, #2
 8004d08:	60da      	str	r2, [r3, #12]
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40023c00 	.word	0x40023c00
 8004d18:	20000fbc 	.word	0x20000fbc

08004d1c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d2e:	4b31      	ldr	r3, [pc, #196]	; (8004df4 <HAL_FLASHEx_Erase+0xd8>)
 8004d30:	7e1b      	ldrb	r3, [r3, #24]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_FLASHEx_Erase+0x1e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e058      	b.n	8004dec <HAL_FLASHEx_Erase+0xd0>
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	; (8004df4 <HAL_FLASHEx_Erase+0xd8>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d44:	f7ff feba 	bl	8004abc <FLASH_WaitForLastOperation>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d148      	bne.n	8004de4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d115      	bne.n	8004d8e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f000 f844 	bl	8004dfc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d78:	f7ff fea0 	bl	8004abc <FLASH_WaitForLastOperation>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004d80:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <HAL_FLASHEx_Erase+0xdc>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	4a1c      	ldr	r2, [pc, #112]	; (8004df8 <HAL_FLASHEx_Erase+0xdc>)
 8004d86:	f023 0304 	bic.w	r3, r3, #4
 8004d8a:	6113      	str	r3, [r2, #16]
 8004d8c:	e028      	b.n	8004de0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	e01c      	b.n	8004dd0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	68b8      	ldr	r0, [r7, #8]
 8004da0:	f000 f850 	bl	8004e44 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004da4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004da8:	f7ff fe88 	bl	8004abc <FLASH_WaitForLastOperation>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <HAL_FLASHEx_Erase+0xdc>)
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <HAL_FLASHEx_Erase+0xdc>)
 8004db6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004dba:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	601a      	str	r2, [r3, #0]
          break;
 8004dc8:	e00a      	b.n	8004de0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d3da      	bcc.n	8004d96 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004de0:	f000 f878 	bl	8004ed4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <HAL_FLASHEx_Erase+0xd8>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	761a      	strb	r2, [r3, #24]

  return status;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20000fbc 	.word	0x20000fbc
 8004df8:	40023c00 	.word	0x40023c00

08004dfc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	6039      	str	r1, [r7, #0]
 8004e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <FLASH_MassErase+0x44>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <FLASH_MassErase+0x44>)
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <FLASH_MassErase+0x44>)
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <FLASH_MassErase+0x44>)
 8004e1a:	f043 0304 	orr.w	r3, r3, #4
 8004e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <FLASH_MassErase+0x44>)
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	4a05      	ldr	r2, [pc, #20]	; (8004e40 <FLASH_MassErase+0x44>)
 8004e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e30:	6113      	str	r3, [r2, #16]
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40023c00 	.word	0x40023c00

08004e44 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e010      	b.n	8004e82 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d103      	bne.n	8004e6e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e009      	b.n	8004e82 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d103      	bne.n	8004e7c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e002      	b.n	8004e82 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004e7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e80:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	490f      	ldr	r1, [pc, #60]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004ea0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ea4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004eb2:	f043 0302 	orr.w	r3, r3, #2
 8004eb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <FLASH_Erase_Sector+0x8c>)
 8004ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec2:	6113      	str	r3, [r2, #16]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40023c00 	.word	0x40023c00

08004ed4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004ed8:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d017      	beq.n	8004f14 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004eea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004ef6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f06:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f12:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d017      	beq.n	8004f50 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f2a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a07      	ldr	r2, [pc, #28]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f42:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <FLASH_FlushCaches+0x88>)
 8004f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f4e:	6013      	str	r3, [r2, #0]
  }
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40023c00 	.word	0x40023c00

08004f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e16b      	b.n	8005254 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	f040 815a 	bne.w	800524e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d005      	beq.n	8004fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d130      	bne.n	8005014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fe8:	2201      	movs	r2, #1
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 0201 	and.w	r2, r3, #1
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	2b03      	cmp	r3, #3
 800501e:	d017      	beq.n	8005050 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	2203      	movs	r2, #3
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4013      	ands	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d123      	bne.n	80050a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	08da      	lsrs	r2, r3, #3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3208      	adds	r2, #8
 8005064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	220f      	movs	r2, #15
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4313      	orrs	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	08da      	lsrs	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3208      	adds	r2, #8
 800509e:	69b9      	ldr	r1, [r7, #24]
 80050a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	2203      	movs	r2, #3
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 0203 	and.w	r2, r3, #3
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80b4 	beq.w	800524e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	4b60      	ldr	r3, [pc, #384]	; (800526c <HAL_GPIO_Init+0x30c>)
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	4a5f      	ldr	r2, [pc, #380]	; (800526c <HAL_GPIO_Init+0x30c>)
 80050f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050f4:	6453      	str	r3, [r2, #68]	; 0x44
 80050f6:	4b5d      	ldr	r3, [pc, #372]	; (800526c <HAL_GPIO_Init+0x30c>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005102:	4a5b      	ldr	r2, [pc, #364]	; (8005270 <HAL_GPIO_Init+0x310>)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	089b      	lsrs	r3, r3, #2
 8005108:	3302      	adds	r3, #2
 800510a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	220f      	movs	r2, #15
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43db      	mvns	r3, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4013      	ands	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a52      	ldr	r2, [pc, #328]	; (8005274 <HAL_GPIO_Init+0x314>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d02b      	beq.n	8005186 <HAL_GPIO_Init+0x226>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a51      	ldr	r2, [pc, #324]	; (8005278 <HAL_GPIO_Init+0x318>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d025      	beq.n	8005182 <HAL_GPIO_Init+0x222>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a50      	ldr	r2, [pc, #320]	; (800527c <HAL_GPIO_Init+0x31c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01f      	beq.n	800517e <HAL_GPIO_Init+0x21e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a4f      	ldr	r2, [pc, #316]	; (8005280 <HAL_GPIO_Init+0x320>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d019      	beq.n	800517a <HAL_GPIO_Init+0x21a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a4e      	ldr	r2, [pc, #312]	; (8005284 <HAL_GPIO_Init+0x324>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_GPIO_Init+0x216>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a4d      	ldr	r2, [pc, #308]	; (8005288 <HAL_GPIO_Init+0x328>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00d      	beq.n	8005172 <HAL_GPIO_Init+0x212>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a4c      	ldr	r2, [pc, #304]	; (800528c <HAL_GPIO_Init+0x32c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <HAL_GPIO_Init+0x20e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a4b      	ldr	r2, [pc, #300]	; (8005290 <HAL_GPIO_Init+0x330>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <HAL_GPIO_Init+0x20a>
 8005166:	2307      	movs	r3, #7
 8005168:	e00e      	b.n	8005188 <HAL_GPIO_Init+0x228>
 800516a:	2308      	movs	r3, #8
 800516c:	e00c      	b.n	8005188 <HAL_GPIO_Init+0x228>
 800516e:	2306      	movs	r3, #6
 8005170:	e00a      	b.n	8005188 <HAL_GPIO_Init+0x228>
 8005172:	2305      	movs	r3, #5
 8005174:	e008      	b.n	8005188 <HAL_GPIO_Init+0x228>
 8005176:	2304      	movs	r3, #4
 8005178:	e006      	b.n	8005188 <HAL_GPIO_Init+0x228>
 800517a:	2303      	movs	r3, #3
 800517c:	e004      	b.n	8005188 <HAL_GPIO_Init+0x228>
 800517e:	2302      	movs	r3, #2
 8005180:	e002      	b.n	8005188 <HAL_GPIO_Init+0x228>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <HAL_GPIO_Init+0x228>
 8005186:	2300      	movs	r3, #0
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	f002 0203 	and.w	r2, r2, #3
 800518e:	0092      	lsls	r2, r2, #2
 8005190:	4093      	lsls	r3, r2
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005198:	4935      	ldr	r1, [pc, #212]	; (8005270 <HAL_GPIO_Init+0x310>)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	089b      	lsrs	r3, r3, #2
 800519e:	3302      	adds	r3, #2
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051a6:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_GPIO_Init+0x334>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051ca:	4a32      	ldr	r2, [pc, #200]	; (8005294 <HAL_GPIO_Init+0x334>)
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <HAL_GPIO_Init+0x334>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	43db      	mvns	r3, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4013      	ands	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051f4:	4a27      	ldr	r2, [pc, #156]	; (8005294 <HAL_GPIO_Init+0x334>)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051fa:	4b26      	ldr	r3, [pc, #152]	; (8005294 <HAL_GPIO_Init+0x334>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_GPIO_Init+0x334>)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_GPIO_Init+0x334>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005248:	4a12      	ldr	r2, [pc, #72]	; (8005294 <HAL_GPIO_Init+0x334>)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3301      	adds	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b0f      	cmp	r3, #15
 8005258:	f67f ae90 	bls.w	8004f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40023800 	.word	0x40023800
 8005270:	40013800 	.word	0x40013800
 8005274:	40020000 	.word	0x40020000
 8005278:	40020400 	.word	0x40020400
 800527c:	40020800 	.word	0x40020800
 8005280:	40020c00 	.word	0x40020c00
 8005284:	40021000 	.word	0x40021000
 8005288:	40021400 	.word	0x40021400
 800528c:	40021800 	.word	0x40021800
 8005290:	40021c00 	.word	0x40021c00
 8005294:	40013c00 	.word	0x40013c00

08005298 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	e0cd      	b.n	8005450 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052b4:	2201      	movs	r2, #1
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	f040 80bd 	bne.w	800544a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80052d0:	4a65      	ldr	r2, [pc, #404]	; (8005468 <HAL_GPIO_DeInit+0x1d0>)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	089b      	lsrs	r3, r3, #2
 80052d6:	3302      	adds	r3, #2
 80052d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052dc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	220f      	movs	r2, #15
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a5d      	ldr	r2, [pc, #372]	; (800546c <HAL_GPIO_DeInit+0x1d4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d02b      	beq.n	8005352 <HAL_GPIO_DeInit+0xba>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a5c      	ldr	r2, [pc, #368]	; (8005470 <HAL_GPIO_DeInit+0x1d8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d025      	beq.n	800534e <HAL_GPIO_DeInit+0xb6>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a5b      	ldr	r2, [pc, #364]	; (8005474 <HAL_GPIO_DeInit+0x1dc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01f      	beq.n	800534a <HAL_GPIO_DeInit+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a5a      	ldr	r2, [pc, #360]	; (8005478 <HAL_GPIO_DeInit+0x1e0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d019      	beq.n	8005346 <HAL_GPIO_DeInit+0xae>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a59      	ldr	r2, [pc, #356]	; (800547c <HAL_GPIO_DeInit+0x1e4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_GPIO_DeInit+0xaa>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_GPIO_DeInit+0x1e8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00d      	beq.n	800533e <HAL_GPIO_DeInit+0xa6>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a57      	ldr	r2, [pc, #348]	; (8005484 <HAL_GPIO_DeInit+0x1ec>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <HAL_GPIO_DeInit+0xa2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a56      	ldr	r2, [pc, #344]	; (8005488 <HAL_GPIO_DeInit+0x1f0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d101      	bne.n	8005336 <HAL_GPIO_DeInit+0x9e>
 8005332:	2307      	movs	r3, #7
 8005334:	e00e      	b.n	8005354 <HAL_GPIO_DeInit+0xbc>
 8005336:	2308      	movs	r3, #8
 8005338:	e00c      	b.n	8005354 <HAL_GPIO_DeInit+0xbc>
 800533a:	2306      	movs	r3, #6
 800533c:	e00a      	b.n	8005354 <HAL_GPIO_DeInit+0xbc>
 800533e:	2305      	movs	r3, #5
 8005340:	e008      	b.n	8005354 <HAL_GPIO_DeInit+0xbc>
 8005342:	2304      	movs	r3, #4
 8005344:	e006      	b.n	8005354 <HAL_GPIO_DeInit+0xbc>
 8005346:	2303      	movs	r3, #3
 8005348:	e004      	b.n	8005354 <HAL_GPIO_DeInit+0xbc>
 800534a:	2302      	movs	r3, #2
 800534c:	e002      	b.n	8005354 <HAL_GPIO_DeInit+0xbc>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <HAL_GPIO_DeInit+0xbc>
 8005352:	2300      	movs	r3, #0
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	f002 0203 	and.w	r2, r2, #3
 800535a:	0092      	lsls	r2, r2, #2
 800535c:	4093      	lsls	r3, r2
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	429a      	cmp	r2, r3
 8005362:	d132      	bne.n	80053ca <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005364:	4b49      	ldr	r3, [pc, #292]	; (800548c <HAL_GPIO_DeInit+0x1f4>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	43db      	mvns	r3, r3
 800536c:	4947      	ldr	r1, [pc, #284]	; (800548c <HAL_GPIO_DeInit+0x1f4>)
 800536e:	4013      	ands	r3, r2
 8005370:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005372:	4b46      	ldr	r3, [pc, #280]	; (800548c <HAL_GPIO_DeInit+0x1f4>)
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	43db      	mvns	r3, r3
 800537a:	4944      	ldr	r1, [pc, #272]	; (800548c <HAL_GPIO_DeInit+0x1f4>)
 800537c:	4013      	ands	r3, r2
 800537e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005380:	4b42      	ldr	r3, [pc, #264]	; (800548c <HAL_GPIO_DeInit+0x1f4>)
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	43db      	mvns	r3, r3
 8005388:	4940      	ldr	r1, [pc, #256]	; (800548c <HAL_GPIO_DeInit+0x1f4>)
 800538a:	4013      	ands	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800538e:	4b3f      	ldr	r3, [pc, #252]	; (800548c <HAL_GPIO_DeInit+0x1f4>)
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	43db      	mvns	r3, r3
 8005396:	493d      	ldr	r1, [pc, #244]	; (800548c <HAL_GPIO_DeInit+0x1f4>)
 8005398:	4013      	ands	r3, r2
 800539a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	220f      	movs	r2, #15
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80053ac:	4a2e      	ldr	r2, [pc, #184]	; (8005468 <HAL_GPIO_DeInit+0x1d0>)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	3302      	adds	r3, #2
 80053b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	43da      	mvns	r2, r3
 80053bc:	482a      	ldr	r0, [pc, #168]	; (8005468 <HAL_GPIO_DeInit+0x1d0>)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	089b      	lsrs	r3, r3, #2
 80053c2:	400a      	ands	r2, r1
 80053c4:	3302      	adds	r3, #2
 80053c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	2103      	movs	r1, #3
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	08da      	lsrs	r2, r3, #3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3208      	adds	r2, #8
 80053e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	220f      	movs	r2, #15
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43db      	mvns	r3, r3
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	08d2      	lsrs	r2, r2, #3
 8005400:	4019      	ands	r1, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3208      	adds	r2, #8
 8005406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2103      	movs	r1, #3
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	401a      	ands	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	2101      	movs	r1, #1
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	fa01 f303 	lsl.w	r3, r1, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	401a      	ands	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	2103      	movs	r1, #3
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	401a      	ands	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	3301      	adds	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b0f      	cmp	r3, #15
 8005454:	f67f af2e 	bls.w	80052b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40013800 	.word	0x40013800
 800546c:	40020000 	.word	0x40020000
 8005470:	40020400 	.word	0x40020400
 8005474:	40020800 	.word	0x40020800
 8005478:	40020c00 	.word	0x40020c00
 800547c:	40021000 	.word	0x40021000
 8005480:	40021400 	.word	0x40021400
 8005484:	40021800 	.word	0x40021800
 8005488:	40021c00 	.word	0x40021c00
 800548c:	40013c00 	.word	0x40013c00

08005490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	887b      	ldrh	r3, [r7, #2]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	e001      	b.n	80054b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	807b      	strh	r3, [r7, #2]
 80054cc:	4613      	mov	r3, r2
 80054ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054d0:	787b      	ldrb	r3, [r7, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054d6:	887a      	ldrh	r2, [r7, #2]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054dc:	e003      	b.n	80054e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054de:	887b      	ldrh	r3, [r7, #2]
 80054e0:	041a      	lsls	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	619a      	str	r2, [r3, #24]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fc f81c 	bl	8001550 <HAL_GPIO_EXTI_Callback>
  }
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40013c00 	.word	0x40013c00

08005524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e264      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d075      	beq.n	800562e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005542:	4ba3      	ldr	r3, [pc, #652]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	2b04      	cmp	r3, #4
 800554c:	d00c      	beq.n	8005568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800554e:	4ba0      	ldr	r3, [pc, #640]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005556:	2b08      	cmp	r3, #8
 8005558:	d112      	bne.n	8005580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800555a:	4b9d      	ldr	r3, [pc, #628]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005566:	d10b      	bne.n	8005580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005568:	4b99      	ldr	r3, [pc, #612]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d05b      	beq.n	800562c <HAL_RCC_OscConfig+0x108>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d157      	bne.n	800562c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e23f      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d106      	bne.n	8005598 <HAL_RCC_OscConfig+0x74>
 800558a:	4b91      	ldr	r3, [pc, #580]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a90      	ldr	r2, [pc, #576]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e01d      	b.n	80055d4 <HAL_RCC_OscConfig+0xb0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0x98>
 80055a2:	4b8b      	ldr	r3, [pc, #556]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a8a      	ldr	r2, [pc, #552]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	4b88      	ldr	r3, [pc, #544]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a87      	ldr	r2, [pc, #540]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e00b      	b.n	80055d4 <HAL_RCC_OscConfig+0xb0>
 80055bc:	4b84      	ldr	r3, [pc, #528]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a83      	ldr	r2, [pc, #524]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	4b81      	ldr	r3, [pc, #516]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a80      	ldr	r2, [pc, #512]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d013      	beq.n	8005604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7ff f868 	bl	80046b0 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055e4:	f7ff f864 	bl	80046b0 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	; 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e204      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	4b76      	ldr	r3, [pc, #472]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0xc0>
 8005602:	e014      	b.n	800562e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005604:	f7ff f854 	bl	80046b0 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800560c:	f7ff f850 	bl	80046b0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	; 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e1f0      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561e:	4b6c      	ldr	r3, [pc, #432]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0xe8>
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800562c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d063      	beq.n	8005702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800563a:	4b65      	ldr	r3, [pc, #404]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005646:	4b62      	ldr	r3, [pc, #392]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800564e:	2b08      	cmp	r3, #8
 8005650:	d11c      	bne.n	800568c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005652:	4b5f      	ldr	r3, [pc, #380]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d116      	bne.n	800568c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565e:	4b5c      	ldr	r3, [pc, #368]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_RCC_OscConfig+0x152>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d001      	beq.n	8005676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e1c4      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005676:	4b56      	ldr	r3, [pc, #344]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4952      	ldr	r1, [pc, #328]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568a:	e03a      	b.n	8005702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d020      	beq.n	80056d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005694:	4b4f      	ldr	r3, [pc, #316]	; (80057d4 <HAL_RCC_OscConfig+0x2b0>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7ff f809 	bl	80046b0 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056a2:	f7ff f805 	bl	80046b0 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e1a5      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b4:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c0:	4b43      	ldr	r3, [pc, #268]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4940      	ldr	r1, [pc, #256]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]
 80056d4:	e015      	b.n	8005702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056d6:	4b3f      	ldr	r3, [pc, #252]	; (80057d4 <HAL_RCC_OscConfig+0x2b0>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056dc:	f7fe ffe8 	bl	80046b0 <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e4:	f7fe ffe4 	bl	80046b0 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e184      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f6:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f0      	bne.n	80056e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d030      	beq.n	8005770 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d016      	beq.n	8005744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005716:	4b30      	ldr	r3, [pc, #192]	; (80057d8 <HAL_RCC_OscConfig+0x2b4>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571c:	f7fe ffc8 	bl	80046b0 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005724:	f7fe ffc4 	bl	80046b0 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e164      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005736:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x200>
 8005742:	e015      	b.n	8005770 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005744:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <HAL_RCC_OscConfig+0x2b4>)
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574a:	f7fe ffb1 	bl	80046b0 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005752:	f7fe ffad 	bl	80046b0 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e14d      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80a0 	beq.w	80058be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005782:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	4a0e      	ldr	r2, [pc, #56]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579c:	6413      	str	r3, [r2, #64]	; 0x40
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_RCC_OscConfig+0x2b8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d121      	bne.n	80057fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <HAL_RCC_OscConfig+0x2b8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a07      	ldr	r2, [pc, #28]	; (80057dc <HAL_RCC_OscConfig+0x2b8>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c6:	f7fe ff73 	bl	80046b0 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057cc:	e011      	b.n	80057f2 <HAL_RCC_OscConfig+0x2ce>
 80057ce:	bf00      	nop
 80057d0:	40023800 	.word	0x40023800
 80057d4:	42470000 	.word	0x42470000
 80057d8:	42470e80 	.word	0x42470e80
 80057dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e0:	f7fe ff66 	bl	80046b0 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e106      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f2:	4b85      	ldr	r3, [pc, #532]	; (8005a08 <HAL_RCC_OscConfig+0x4e4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d106      	bne.n	8005814 <HAL_RCC_OscConfig+0x2f0>
 8005806:	4b81      	ldr	r3, [pc, #516]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	4a80      	ldr	r2, [pc, #512]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	6713      	str	r3, [r2, #112]	; 0x70
 8005812:	e01c      	b.n	800584e <HAL_RCC_OscConfig+0x32a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b05      	cmp	r3, #5
 800581a:	d10c      	bne.n	8005836 <HAL_RCC_OscConfig+0x312>
 800581c:	4b7b      	ldr	r3, [pc, #492]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	4a7a      	ldr	r2, [pc, #488]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 8005822:	f043 0304 	orr.w	r3, r3, #4
 8005826:	6713      	str	r3, [r2, #112]	; 0x70
 8005828:	4b78      	ldr	r3, [pc, #480]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	4a77      	ldr	r2, [pc, #476]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	6713      	str	r3, [r2, #112]	; 0x70
 8005834:	e00b      	b.n	800584e <HAL_RCC_OscConfig+0x32a>
 8005836:	4b75      	ldr	r3, [pc, #468]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	4a74      	ldr	r2, [pc, #464]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	6713      	str	r3, [r2, #112]	; 0x70
 8005842:	4b72      	ldr	r3, [pc, #456]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4a71      	ldr	r2, [pc, #452]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 8005848:	f023 0304 	bic.w	r3, r3, #4
 800584c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d015      	beq.n	8005882 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7fe ff2b 	bl	80046b0 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585c:	e00a      	b.n	8005874 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800585e:	f7fe ff27 	bl	80046b0 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	f241 3288 	movw	r2, #5000	; 0x1388
 800586c:	4293      	cmp	r3, r2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e0c5      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005874:	4b65      	ldr	r3, [pc, #404]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 8005876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0ee      	beq.n	800585e <HAL_RCC_OscConfig+0x33a>
 8005880:	e014      	b.n	80058ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005882:	f7fe ff15 	bl	80046b0 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005888:	e00a      	b.n	80058a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fe ff11 	bl	80046b0 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f241 3288 	movw	r2, #5000	; 0x1388
 8005898:	4293      	cmp	r3, r2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e0af      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a0:	4b5a      	ldr	r3, [pc, #360]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1ee      	bne.n	800588a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d105      	bne.n	80058be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b2:	4b56      	ldr	r3, [pc, #344]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	4a55      	ldr	r2, [pc, #340]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 80058b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 809b 	beq.w	80059fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058c8:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 030c 	and.w	r3, r3, #12
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d05c      	beq.n	800598e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d141      	bne.n	8005960 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058dc:	4b4c      	ldr	r3, [pc, #304]	; (8005a10 <HAL_RCC_OscConfig+0x4ec>)
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e2:	f7fe fee5 	bl	80046b0 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ea:	f7fe fee1 	bl	80046b0 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e081      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fc:	4b43      	ldr	r3, [pc, #268]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f0      	bne.n	80058ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	019b      	lsls	r3, r3, #6
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	3b01      	subs	r3, #1
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	061b      	lsls	r3, r3, #24
 800592c:	4937      	ldr	r1, [pc, #220]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 800592e:	4313      	orrs	r3, r2
 8005930:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005932:	4b37      	ldr	r3, [pc, #220]	; (8005a10 <HAL_RCC_OscConfig+0x4ec>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005938:	f7fe feba 	bl	80046b0 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005940:	f7fe feb6 	bl	80046b0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e056      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005952:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x41c>
 800595e:	e04e      	b.n	80059fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005960:	4b2b      	ldr	r3, [pc, #172]	; (8005a10 <HAL_RCC_OscConfig+0x4ec>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005966:	f7fe fea3 	bl	80046b0 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800596e:	f7fe fe9f 	bl	80046b0 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e03f      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005980:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f0      	bne.n	800596e <HAL_RCC_OscConfig+0x44a>
 800598c:	e037      	b.n	80059fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e032      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800599a:	4b1c      	ldr	r3, [pc, #112]	; (8005a0c <HAL_RCC_OscConfig+0x4e8>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d028      	beq.n	80059fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d121      	bne.n	80059fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d11a      	bne.n	80059fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059ca:	4013      	ands	r3, r2
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d111      	bne.n	80059fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	3b01      	subs	r3, #1
 80059e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40007000 	.word	0x40007000
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	42470060 	.word	0x42470060

08005a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0cc      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a28:	4b68      	ldr	r3, [pc, #416]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d90c      	bls.n	8005a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b65      	ldr	r3, [pc, #404]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3e:	4b63      	ldr	r3, [pc, #396]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0b8      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d020      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a68:	4b59      	ldr	r3, [pc, #356]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4a58      	ldr	r2, [pc, #352]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a80:	4b53      	ldr	r3, [pc, #332]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4a52      	ldr	r2, [pc, #328]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8c:	4b50      	ldr	r3, [pc, #320]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	494d      	ldr	r1, [pc, #308]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d044      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab2:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d119      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e07f      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d107      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad2:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e06f      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae2:	4b3b      	ldr	r3, [pc, #236]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e067      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005af2:	4b37      	ldr	r3, [pc, #220]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f023 0203 	bic.w	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4934      	ldr	r1, [pc, #208]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b04:	f7fe fdd4 	bl	80046b0 <HAL_GetTick>
 8005b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0c:	f7fe fdd0 	bl	80046b0 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e04f      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b22:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 020c 	and.w	r2, r3, #12
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d1eb      	bne.n	8005b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b34:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d20c      	bcs.n	8005b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e032      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4916      	ldr	r1, [pc, #88]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b86:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	490e      	ldr	r1, [pc, #56]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b9a:	f000 f821 	bl	8005be0 <HAL_RCC_GetSysClockFreq>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	490a      	ldr	r1, [pc, #40]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005bac:	5ccb      	ldrb	r3, [r1, r3]
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fd34 	bl	8004628 <HAL_InitTick>

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40023c00 	.word	0x40023c00
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	080068b0 	.word	0x080068b0
 8005bd8:	20000034 	.word	0x20000034
 8005bdc:	20000038 	.word	0x20000038

08005be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	607b      	str	r3, [r7, #4]
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bf8:	4b67      	ldr	r3, [pc, #412]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 030c 	and.w	r3, r3, #12
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d00d      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x40>
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	f200 80bd 	bhi.w	8005d84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0x34>
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d003      	beq.n	8005c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c12:	e0b7      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c14:	4b61      	ldr	r3, [pc, #388]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c16:	60bb      	str	r3, [r7, #8]
       break;
 8005c18:	e0b7      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c1a:	4b61      	ldr	r3, [pc, #388]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005c1c:	60bb      	str	r3, [r7, #8]
      break;
 8005c1e:	e0b4      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c20:	4b5d      	ldr	r3, [pc, #372]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c2a:	4b5b      	ldr	r3, [pc, #364]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d04d      	beq.n	8005cd2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c36:	4b58      	ldr	r3, [pc, #352]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	099b      	lsrs	r3, r3, #6
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c46:	f04f 0100 	mov.w	r1, #0
 8005c4a:	ea02 0800 	and.w	r8, r2, r0
 8005c4e:	ea03 0901 	and.w	r9, r3, r1
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	014b      	lsls	r3, r1, #5
 8005c60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c64:	0142      	lsls	r2, r0, #5
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	ebb0 0008 	subs.w	r0, r0, r8
 8005c6e:	eb61 0109 	sbc.w	r1, r1, r9
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	018b      	lsls	r3, r1, #6
 8005c7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c80:	0182      	lsls	r2, r0, #6
 8005c82:	1a12      	subs	r2, r2, r0
 8005c84:	eb63 0301 	sbc.w	r3, r3, r1
 8005c88:	f04f 0000 	mov.w	r0, #0
 8005c8c:	f04f 0100 	mov.w	r1, #0
 8005c90:	00d9      	lsls	r1, r3, #3
 8005c92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c96:	00d0      	lsls	r0, r2, #3
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	eb12 0208 	adds.w	r2, r2, r8
 8005ca0:	eb43 0309 	adc.w	r3, r3, r9
 8005ca4:	f04f 0000 	mov.w	r0, #0
 8005ca8:	f04f 0100 	mov.w	r1, #0
 8005cac:	0259      	lsls	r1, r3, #9
 8005cae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005cb2:	0250      	lsls	r0, r2, #9
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4619      	mov	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	f7fa fa80 	bl	80001c8 <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4613      	mov	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e04a      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cd2:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	099b      	lsrs	r3, r3, #6
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ce2:	f04f 0100 	mov.w	r1, #0
 8005ce6:	ea02 0400 	and.w	r4, r2, r0
 8005cea:	ea03 0501 	and.w	r5, r3, r1
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	014b      	lsls	r3, r1, #5
 8005cfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d00:	0142      	lsls	r2, r0, #5
 8005d02:	4610      	mov	r0, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	1b00      	subs	r0, r0, r4
 8005d08:	eb61 0105 	sbc.w	r1, r1, r5
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	018b      	lsls	r3, r1, #6
 8005d16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d1a:	0182      	lsls	r2, r0, #6
 8005d1c:	1a12      	subs	r2, r2, r0
 8005d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	00d9      	lsls	r1, r3, #3
 8005d2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d30:	00d0      	lsls	r0, r2, #3
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	1912      	adds	r2, r2, r4
 8005d38:	eb45 0303 	adc.w	r3, r5, r3
 8005d3c:	f04f 0000 	mov.w	r0, #0
 8005d40:	f04f 0100 	mov.w	r1, #0
 8005d44:	0299      	lsls	r1, r3, #10
 8005d46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d4a:	0290      	lsls	r0, r2, #10
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4610      	mov	r0, r2
 8005d52:	4619      	mov	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	f7fa fa34 	bl	80001c8 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	0c1b      	lsrs	r3, r3, #16
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	3301      	adds	r3, #1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	60bb      	str	r3, [r7, #8]
      break;
 8005d82:	e002      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d86:	60bb      	str	r3, [r7, #8]
      break;
 8005d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d96:	bf00      	nop
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	00f42400 	.word	0x00f42400
 8005da0:	007a1200 	.word	0x007a1200

08005da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005da8:	4b03      	ldr	r3, [pc, #12]	; (8005db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005daa:	681b      	ldr	r3, [r3, #0]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20000034 	.word	0x20000034

08005dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e041      	b.n	8005e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fb fc88 	bl	80016f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f000 fac2 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d001      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e04e      	b.n	8005f12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a23      	ldr	r2, [pc, #140]	; (8005f20 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d01d      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1f      	ldr	r2, [pc, #124]	; (8005f24 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1e      	ldr	r2, [pc, #120]	; (8005f28 <HAL_TIM_Base_Start_IT+0xcc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <HAL_TIM_Base_Start_IT+0xd0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a19      	ldr	r2, [pc, #100]	; (8005f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d111      	bne.n	8005f00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d010      	beq.n	8005f10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efe:	e007      	b.n	8005f10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40010400 	.word	0x40010400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40001800 	.word	0x40001800

08005f3c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0201 	bic.w	r2, r2, #1
 8005f52:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10f      	bne.n	8005f84 <HAL_TIM_Base_Stop_IT+0x48>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	f240 4344 	movw	r3, #1092	; 0x444
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <HAL_TIM_Base_Stop_IT+0x48>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d122      	bne.n	8005ff6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d11b      	bne.n	8005ff6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f06f 0202 	mvn.w	r2, #2
 8005fc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f9b2 	bl	8006346 <HAL_TIM_IC_CaptureCallback>
 8005fe2:	e005      	b.n	8005ff0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f9a4 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f9b5 	bl	800635a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b04      	cmp	r3, #4
 8006002:	d122      	bne.n	800604a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b04      	cmp	r3, #4
 8006010:	d11b      	bne.n	800604a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f06f 0204 	mvn.w	r2, #4
 800601a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f988 	bl	8006346 <HAL_TIM_IC_CaptureCallback>
 8006036:	e005      	b.n	8006044 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f97a 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f98b 	bl	800635a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d122      	bne.n	800609e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b08      	cmp	r3, #8
 8006064:	d11b      	bne.n	800609e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f06f 0208 	mvn.w	r2, #8
 800606e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2204      	movs	r2, #4
 8006074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f95e 	bl	8006346 <HAL_TIM_IC_CaptureCallback>
 800608a:	e005      	b.n	8006098 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f950 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f961 	bl	800635a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d122      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b10      	cmp	r3, #16
 80060b8:	d11b      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f06f 0210 	mvn.w	r2, #16
 80060c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2208      	movs	r2, #8
 80060c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f934 	bl	8006346 <HAL_TIM_IC_CaptureCallback>
 80060de:	e005      	b.n	80060ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f926 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f937 	bl	800635a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10e      	bne.n	800611e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d107      	bne.n	800611e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f06f 0201 	mvn.w	r2, #1
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fb fa75 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d10e      	bne.n	800614a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006136:	2b80      	cmp	r3, #128	; 0x80
 8006138:	d107      	bne.n	800614a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fadd 	bl	8006704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d10e      	bne.n	8006176 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d107      	bne.n	8006176 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800616e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8fc 	bl	800636e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b20      	cmp	r3, #32
 8006182:	d10e      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b20      	cmp	r3, #32
 8006190:	d107      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f06f 0220 	mvn.w	r2, #32
 800619a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 faa7 	bl	80066f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_ConfigClockSource+0x18>
 80061be:	2302      	movs	r3, #2
 80061c0:	e0b3      	b.n	800632a <HAL_TIM_ConfigClockSource+0x180>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061fa:	d03e      	beq.n	800627a <HAL_TIM_ConfigClockSource+0xd0>
 80061fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006200:	f200 8087 	bhi.w	8006312 <HAL_TIM_ConfigClockSource+0x168>
 8006204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006208:	f000 8085 	beq.w	8006316 <HAL_TIM_ConfigClockSource+0x16c>
 800620c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006210:	d87f      	bhi.n	8006312 <HAL_TIM_ConfigClockSource+0x168>
 8006212:	2b70      	cmp	r3, #112	; 0x70
 8006214:	d01a      	beq.n	800624c <HAL_TIM_ConfigClockSource+0xa2>
 8006216:	2b70      	cmp	r3, #112	; 0x70
 8006218:	d87b      	bhi.n	8006312 <HAL_TIM_ConfigClockSource+0x168>
 800621a:	2b60      	cmp	r3, #96	; 0x60
 800621c:	d050      	beq.n	80062c0 <HAL_TIM_ConfigClockSource+0x116>
 800621e:	2b60      	cmp	r3, #96	; 0x60
 8006220:	d877      	bhi.n	8006312 <HAL_TIM_ConfigClockSource+0x168>
 8006222:	2b50      	cmp	r3, #80	; 0x50
 8006224:	d03c      	beq.n	80062a0 <HAL_TIM_ConfigClockSource+0xf6>
 8006226:	2b50      	cmp	r3, #80	; 0x50
 8006228:	d873      	bhi.n	8006312 <HAL_TIM_ConfigClockSource+0x168>
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	d058      	beq.n	80062e0 <HAL_TIM_ConfigClockSource+0x136>
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d86f      	bhi.n	8006312 <HAL_TIM_ConfigClockSource+0x168>
 8006232:	2b30      	cmp	r3, #48	; 0x30
 8006234:	d064      	beq.n	8006300 <HAL_TIM_ConfigClockSource+0x156>
 8006236:	2b30      	cmp	r3, #48	; 0x30
 8006238:	d86b      	bhi.n	8006312 <HAL_TIM_ConfigClockSource+0x168>
 800623a:	2b20      	cmp	r3, #32
 800623c:	d060      	beq.n	8006300 <HAL_TIM_ConfigClockSource+0x156>
 800623e:	2b20      	cmp	r3, #32
 8006240:	d867      	bhi.n	8006312 <HAL_TIM_ConfigClockSource+0x168>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d05c      	beq.n	8006300 <HAL_TIM_ConfigClockSource+0x156>
 8006246:	2b10      	cmp	r3, #16
 8006248:	d05a      	beq.n	8006300 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800624a:	e062      	b.n	8006312 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6899      	ldr	r1, [r3, #8]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f000 f9ac 	bl	80065b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800626e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
      break;
 8006278:	e04e      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6899      	ldr	r1, [r3, #8]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f000 f995 	bl	80065b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800629c:	609a      	str	r2, [r3, #8]
      break;
 800629e:	e03b      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	6859      	ldr	r1, [r3, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	461a      	mov	r2, r3
 80062ae:	f000 f909 	bl	80064c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2150      	movs	r1, #80	; 0x50
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f962 	bl	8006582 <TIM_ITRx_SetConfig>
      break;
 80062be:	e02b      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	461a      	mov	r2, r3
 80062ce:	f000 f928 	bl	8006522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2160      	movs	r1, #96	; 0x60
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 f952 	bl	8006582 <TIM_ITRx_SetConfig>
      break;
 80062de:	e01b      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	461a      	mov	r2, r3
 80062ee:	f000 f8e9 	bl	80064c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2140      	movs	r1, #64	; 0x40
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f942 	bl	8006582 <TIM_ITRx_SetConfig>
      break;
 80062fe:	e00b      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f000 f939 	bl	8006582 <TIM_ITRx_SetConfig>
        break;
 8006310:	e002      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a40      	ldr	r2, [pc, #256]	; (8006498 <TIM_Base_SetConfig+0x114>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d00f      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3d      	ldr	r2, [pc, #244]	; (800649c <TIM_Base_SetConfig+0x118>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3c      	ldr	r2, [pc, #240]	; (80064a0 <TIM_Base_SetConfig+0x11c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a3b      	ldr	r2, [pc, #236]	; (80064a4 <TIM_Base_SetConfig+0x120>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3a      	ldr	r2, [pc, #232]	; (80064a8 <TIM_Base_SetConfig+0x124>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d108      	bne.n	80063d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2f      	ldr	r2, [pc, #188]	; (8006498 <TIM_Base_SetConfig+0x114>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d02b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e4:	d027      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2c      	ldr	r2, [pc, #176]	; (800649c <TIM_Base_SetConfig+0x118>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d023      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <TIM_Base_SetConfig+0x11c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01f      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2a      	ldr	r2, [pc, #168]	; (80064a4 <TIM_Base_SetConfig+0x120>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <TIM_Base_SetConfig+0x124>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d017      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a28      	ldr	r2, [pc, #160]	; (80064ac <TIM_Base_SetConfig+0x128>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a27      	ldr	r2, [pc, #156]	; (80064b0 <TIM_Base_SetConfig+0x12c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00f      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a26      	ldr	r2, [pc, #152]	; (80064b4 <TIM_Base_SetConfig+0x130>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a25      	ldr	r2, [pc, #148]	; (80064b8 <TIM_Base_SetConfig+0x134>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a24      	ldr	r2, [pc, #144]	; (80064bc <TIM_Base_SetConfig+0x138>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a23      	ldr	r2, [pc, #140]	; (80064c0 <TIM_Base_SetConfig+0x13c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d108      	bne.n	8006448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <TIM_Base_SetConfig+0x114>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_Base_SetConfig+0xf8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <TIM_Base_SetConfig+0x124>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d103      	bne.n	8006484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	615a      	str	r2, [r3, #20]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40010000 	.word	0x40010000
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800
 80064b8:	40001800 	.word	0x40001800
 80064bc:	40001c00 	.word	0x40001c00
 80064c0:	40002000 	.word	0x40002000

080064c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f023 0201 	bic.w	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 030a 	bic.w	r3, r3, #10
 8006500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	621a      	str	r2, [r3, #32]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006522:	b480      	push	{r7}
 8006524:	b087      	sub	sp, #28
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f023 0210 	bic.w	r2, r3, #16
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800654c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	031b      	lsls	r3, r3, #12
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800655e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	f043 0307 	orr.w	r3, r3, #7
 80065a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	021a      	lsls	r2, r3, #8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	431a      	orrs	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	609a      	str	r2, [r3, #8]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800660c:	2302      	movs	r3, #2
 800660e:	e05a      	b.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a21      	ldr	r2, [pc, #132]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665c:	d01d      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a15      	ldr	r2, [pc, #84]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10c      	bne.n	80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40010400 	.word	0x40010400
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40001800 	.word	0x40001800

080066f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f000 f82e 	bl	800678c <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	08006990 	.word	0x08006990
 8006754:	08006990 	.word	0x08006990
 8006758:	08006990 	.word	0x08006990
 800675c:	08006994 	.word	0x08006994

08006760 <memcpy>:
 8006760:	440a      	add	r2, r1
 8006762:	4291      	cmp	r1, r2
 8006764:	f100 33ff 	add.w	r3, r0, #4294967295
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	4770      	bx	lr
 800676c:	b510      	push	{r4, lr}
 800676e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006776:	4291      	cmp	r1, r2
 8006778:	d1f9      	bne.n	800676e <memcpy+0xe>
 800677a:	bd10      	pop	{r4, pc}

0800677c <memset>:
 800677c:	4402      	add	r2, r0
 800677e:	4603      	mov	r3, r0
 8006780:	4293      	cmp	r3, r2
 8006782:	d100      	bne.n	8006786 <memset+0xa>
 8006784:	4770      	bx	lr
 8006786:	f803 1b01 	strb.w	r1, [r3], #1
 800678a:	e7f9      	b.n	8006780 <memset+0x4>

0800678c <_init>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr

08006798 <_fini>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr
